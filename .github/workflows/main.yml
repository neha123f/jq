name: Generate HTML Table

on:
 workflow_dispatch:

jobs:
  generate-table:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run jq to filter JSON
        run: |
          jq '[.[] | select(.errorCount > 0) | {filePath,messages: [.messages[] | select(.severity > 1) | { ruleId: .ruleId, message,line,column}]}]' lint.json > errors.json
          cat errors.json
      
      - name: Generate HTML Table
        run: |
              echo "<html><body><table border='1'><thead><tr><th colspan='5'>Linting Files</th></tr><th>File Path</th><th>Rule ID</th><th>Message</th><th>Line</th><th>Column</th></tr></thead><tbody>" > $GITHUB_WORKSPACE/table.html
              cat errors.json | jq -r '.[] | .filePath as $filePath | .messages[] | "<tr><td>\(( $filePath | split("/") | last ))</td><td>\(.ruleId)</td><td>\(.message)</td><td>\(.line)</td><td>\(.column)</td></tr>"' >> $GITHUB_WORKSPACE/table.html
              echo "</tbody></table></body></html>" >> $GITHUB_WORKSPACE/table.html
     
      - name: Display HTML Table
        run: cat $GITHUB_WORKSPACE/table.html >> $GITHUB_STEP_SUMMARY


      - name: Update Pull Request Description
        uses: actions/github-script@v6
        with:
           github-token: ${{ secrets.API_TOKEN }}
           script: |
               const fs = require('fs');
               const summaryHtml = fs.readFileSync('./table.html', 'utf8');
               const { owner, repo, number } = context.issue;
               async function updateComment(github) {
               try {
                   await github.rest.issues.createComment({
                   owner: owner,
                   repo: repo,
                   issue_number: number,
                  body: `<!--HTML_COMMENT_START-->\n${summaryHtml}\n<!--HTML_COMMENT_END-->`,
                  });
               } catch (error) {
               console.error(error.message);
                }
                }
               updateComment(github);
      - name: Notify Team on Failure
        run: |

                echo "##############################################" 
                cat quality_status.txt
                echo "##############################################" 
                
                if grep -q "failure" quality_status.txt; then
                  
                  echo "Send Notification to MS Teams";
                
                  echo "{\"@type\":\"MessageCard\",\"@context\":\"https://schema.org/extensions\",\"summary\":\" Quality check failed!\",\"themeColor\":\"ff0000\",\"title\":\"ðŸ’¢ Code Quality check failed ! ðŸ’¢\",\"sections\":[{\"facts\":[{\"name\":\"Repository:\",\"value\":\"$GITHUB_REPOSITORY\"},{\"name\":\"Branch:\",\"value\":\"$GITHUB_REF_NAME\"},{\"name\":\"Git User:\",\"value\":\"$GITHUB_ACTOR\"},{\"name\":\"Commit:\",\"value\":\"$GITHUB_SHA\"}]}],\"potentialAction\":[{\"@type\":\"OpenUri\",\"name\":\"View on GitHub\",\"targets\":[{\"os\":\"default\",\"uri\":\"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}]}]}" > failed.json
                  curl -X POST -H 'Content-Type: application/json' -s -d @failed.json ${{ secrets.MS_TEAMS_WEBHOOK_URI }}

                  exit 1
                fi
