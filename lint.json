[
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/app.service.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1115,
                1118
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1115,
                1118
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1165,
                1168
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1165,
                1168
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { TestBed } from '@angular/core/testing';\nimport { AppService } from './app.service';\nimport { UtilService } from './utilities/util.service';\nimport { AppState } from './store/app-state';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { BaseSiteService, SiteContextParamsService, OAuthLibWrapperService } from '@spartacus/core';\nimport { UserAuthService } from './features/user/services/user-auth.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, EMPTY } from 'rxjs';\nimport { OAuthEvent, TokenResponse } from 'angular-oauth2-oidc';\n\nconst oauthLibEvents = new BehaviorSubject<OAuthEvent>({\n  type: 'token_received',\n});\nclass MockOAuthLibWrapperService implements Partial<OAuthLibWrapperService> {\n  revokeAndLogout() {\n    return Promise.resolve();\n  }\n  authorizeWithPasswordFlow() {\n    return Promise.resolve({} as TokenResponse);\n  }\n  tryLogin() {\n    return Promise.resolve({ result: true, tokenReceived: true });\n  }\n  events$ = oauthLibEvents;\n}\n\nclass ActivatedRouteMock {\n  paramsSubscriptionHandler: any;\n\n  queryParams = {\n    subscribe: (observer: any) => {\n      this.paramsSubscriptionHandler = observer;\n    },\n  };\n}\n\nclass MockBaseSite {\n  getActive() {\n    return EMPTY;\n  }\n}\n\nclass MockuseAuthService {\n  handleOneTimeToken() {\n    return EMPTY;\n  }\n}\n\n\ndescribe('AppService', () => {\n  let service: AppService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({})],\n      providers:[\n       {provide: BaseSiteService, useClass: MockBaseSite},\n       {provide: ActivatedRoute, useClass: ActivatedRouteMock},\n       { provide: SiteContextParamsService, useValue: {} },        \n        \n       \n        {provide: UtilService, useValue:''},\n       \n        {provide: AppState, useValue: ''},\n        {provide: UserAuthService, useClass: MockuseAuthService},\n        {\n          provide: OAuthLibWrapperService,\n          useClass: MockOAuthLibWrapperService,\n        },\n      ]\n    });\n    service = TestBed.inject(AppService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/app.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1522,
                1525
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1522,
                1525
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2042,
                2045
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2042,
                2045
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2234,
                2237
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2234,
                2237
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BaseSiteService } from '@spartacus/core';\nimport { take, switchMap } from 'rxjs/operators';\nimport { UserAuthService } from './features/user/services/user-auth.service';\nimport { AppState } from './store/app-state';\nimport { UtilService } from './utilities/util.service';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppService {\n  constructor(\n    private _baseSiteService: BaseSiteService,\n    private _appState: AppState,\n    private utilService: UtilService,\n    private userAuthService: UserAuthService,\n    private route: ActivatedRoute,\n    private _winRef: WindowRef\n  ) {}\n\n  public init() {\n    this.load3dsScript();\n    this.loadOneTimeToken();\n    this._loadCurrentCountry();\n    this.loadMpayScript();\n  }\n\n  public loadCMPScript() {\n    this.appendScript2Head({\n      src: this.utilService.getCMPScriptUrl(),\n      type: 'module',\n      async: true,\n      crossorigin: 'anonymous',\n      'data-stencil-namespace': 'cookie-banner',\n    });\n  }\n\n  private loadOneTimeToken() {\n    this.route.queryParams.subscribe((params) => {\n      this.userAuthService.handleOneTimeToken(params);\n    });\n  }\n\n  private _loadCurrentCountry(): void {\n    this._baseSiteService\n      .getActive()\n      .pipe(\n        take(1),\n        switchMap((siteId: string) => {\n          return this._baseSiteService.get(siteId);\n        })\n      )\n      .subscribe((baseSiteData: any) => {\n        this._appState.loadCurrentCountry(\n          baseSiteData?.baseStore?.billingCountries[0]?.isocode\n        );\n      });\n  }\n\n  private loadMpayScript() {\n    this.appendScript2Head({\n      src: this.utilService.getMpayScriptUrl(),\n      type: 'text/javascript',\n      async: true,\n    });\n  }\n\n  private load3dsScript() {\n    this.appendScript2Head({\n      src: this.utilService.get3dsScriptUrl(),\n      type: 'text/javascript',\n      async: true,\n    });\n  }\n\n  private appendScript2Head(attributes?: any) {\n    const script = this._winRef.document.createElement('script');\n    if (attributes) {\n      Object.keys(attributes).forEach((key) => {\n        script.setAttribute(key, (attributes as any)[key]);\n      });\n      this._winRef.document.head.appendChild(script);\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/cms/cms.models.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                350,
                353
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                350,
                353
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Occ, ContentSlotData, PageRobotsMeta } from \"@spartacus/core\";\n\ndeclare module '@spartacus/core' {\n  export interface Page {\n    pageId?: string;\n    name?: string;\n    description?: string;\n    type?: string;\n    title?: string;\n    template?: string;\n    loadTime?: number;\n    slots?: { [key: string]: ContentSlotData };\n    properties?: any;\n    label?: string;\n\n    /**\n     * Lists the page robot information for the given page: `INDEX`, `NOINDEX`, `FOLLOW` or `NOFOLLOW`\n     */\n    robots?: PageRobotsMeta[];\n    analyticsPageName?: string;\n    analyticsPageType?: string;\n  }\n}\n\nexport interface CustomCMSPage extends Occ.CMSPage{\n  analyticsPageName?:string;\n  analyticsPageType?:string;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/cms/seo/custom-seo-meta.service.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-function",
        "severity": 2,
        "message": "Unexpected empty method 'setCanonicalLink'.",
        "line": 23,
        "column": 28,
        "nodeType": "FunctionExpression",
        "messageId": "unexpected",
        "endLine": 23,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { TestBed } from '@angular/core/testing';\n\nimport { CustomSeoMetaService } from './custom-seo-meta.service';\nimport { PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { PageMetaLinkService } from '@spartacus/storefront';\nimport { Observable, of } from 'rxjs';\nimport { PageMetaService } from '@spartacus/core';\nimport { Meta, Title } from '@angular/platform-browser';\n\nclass MockPageMetaService {\n  getMeta(): Observable<PageMeta> {\n    return of(<PageMeta>{\n      title: 'Test title',\n      description: 'Test description',\n      image: 'http://assets.com/image.jpg',\n      robots: [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW],\n      canonicalUrl: 'https://www.canonicalUrl.com',\n    });\n  }\n}\n\nclass MockPageMetaLinkService implements Partial<PageMetaLinkService> {\n  setCanonicalLink(): void {}\n}\n\ndescribe('CustomSeoMetaService', () => {\n  let customSeoMetaService: CustomSeoMetaService;\n  let pageMetaService: PageMetaService;\n\n  let ngTitleService: Title;\n  let ngMetaService: Meta;\n\n  let updateMetaTagSpy: jasmine.Spy;\n  let removeMetaTagSpy: jasmine.Spy;\n  let addCanonicalLinkSpy: jasmine.Spy;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        CustomSeoMetaService,\n        Title,\n        Meta,\n        { provide: PageMetaService, useClass: MockPageMetaService },\n        { provide: PageMetaLinkService, useClass: MockPageMetaLinkService },\n      ],\n    });\n    customSeoMetaService = TestBed.inject(CustomSeoMetaService);\n    pageMetaService = TestBed.inject(PageMetaService);\n\n    ngTitleService = TestBed.inject(Title);\n    ngMetaService = TestBed.inject(Meta);\n\n    updateMetaTagSpy = spyOn(ngMetaService, 'updateTag');\n    removeMetaTagSpy = spyOn(ngMetaService, 'removeTag');\n    addCanonicalLinkSpy = spyOn(\n      TestBed.inject(PageMetaLinkService),\n      'setCanonicalLink'\n    );\n  });\n\n  it('should be created', () => {\n    expect(customSeoMetaService).toBeTruthy();\n  });\n  it('should not any default tags', () => {\n    spyOn(pageMetaService, 'getMeta').and.returnValue(of({}));\n    customSeoMetaService.init();\n    expect(updateMetaTagSpy).not.toHaveBeenCalled();\n  });\n\n  it('Should update title', () => {\n    customSeoMetaService.init();\n    expect(ngTitleService.getTitle()).toBe('Test title');\n  });\n\n  describe('description', () => {\n    it('Should add description meta tag', () => {\n      customSeoMetaService.init();\n      expect(updateMetaTagSpy).toHaveBeenCalledWith({\n        name: 'description',\n        content: 'Test description',\n      });\n    });\n\n    it('Should remove description meta tag', () => {\n      spyOn(pageMetaService, 'getMeta').and.returnValue(of({}));\n      customSeoMetaService.init();\n      expect(removeMetaTagSpy).toHaveBeenCalledWith('name=\"description\"');\n    });\n  });\n\n  describe('image', () => {\n    it('Should add og:image meta tag', () => {\n      customSeoMetaService.init();\n      expect(updateMetaTagSpy).toHaveBeenCalledWith({\n        name: 'og:image',\n        content: 'http://assets.com/image.jpg',\n      });\n    });\n\n    it('Should remove og:image meta tag', () => {\n      spyOn(pageMetaService, 'getMeta').and.returnValue(of({}));\n      customSeoMetaService.init();\n      expect(removeMetaTagSpy).toHaveBeenCalledWith('name=\"og:image\"');\n    });\n  });\n\n  describe('robots', () => {\n    it('Should add `INDEX FOLLOW` in robots meta tag', () => {\n      customSeoMetaService.init();\n      expect(updateMetaTagSpy).toHaveBeenCalledWith({\n        name: 'robots',\n        content: 'INDEX, FOLLOW',\n      });\n    });\n  });\n\n  describe('canonical url', () => {\n    it('Should build the canonical url with the link builder', () => {\n      customSeoMetaService.init();\n      expect(addCanonicalLinkSpy).toHaveBeenCalledWith(\n        'https://www.canonicalUrl.com'\n      );\n    });\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/common/ssr/ssr-options.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'defaultSsrOptimizationOptions' is defined but never used.",
        "line": 1,
        "column": 102,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 131
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { RenderingStrategyResolverOptions, SsrOptimizationOptions, defaultRenderingStrategyResolver, defaultSsrOptimizationOptions } from \"@spartacus/setup/ssr\";\n\n\nconst renderingStrategyResolverOptions: RenderingStrategyResolverOptions =\n  {\n    excludedUrls: ['checkout', 'my-account', 'cx-preview', 'order-confirmation', 'login'],\n    excludedParams: ['asm'],\n  };\n\nexport const ssrOptimizationOptions: SsrOptimizationOptions = {\n    concurrency: 10,\n    timeout: 3_000,\n    forcedSsrTimeout: 60_000,\n    maxRenderTime: 300_000,\n    reuseCurrentRendering: true,\n    debug: false,\n    renderingStrategyResolver: defaultRenderingStrategyResolver(\n      renderingStrategyResolverOptions\n    ),\n  };\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/core/directives/clicked-outside.directive.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                361,
                364
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                361,
                364
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\n\n@Directive({\n  selector: '[atcppsClickedOutside]'\n})\nexport class ClickedOutsideDirective {\n\n  constructor(private el: ElementRef) { }\n\n  @Output() public clickedOutside = new EventEmitter();\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(target: any) {\n      const clickedInside = this.el.nativeElement.contains(target);\n      if (!clickedInside) {\n        this.clickedOutside.emit(target);\n      }\n  }\n\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/core/directives/market-specific.directive.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                289,
                292
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                289,
                292
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { UtilService } from 'src/app/utilities/util.service';\n\n@Directive({\n  selector: '[atcppsShowIfCountry]',\n})\nexport class MarketSpecificDirective {\n  constructor(\n    private _templateRef: TemplateRef<any>,\n    private _viewContainerRef: ViewContainerRef,\n    private _utilService: UtilService\n  ) {}\n\n  @Input() set atcppsShowIfCountry(countries: string[]) {\n    const currentCountry = this._utilService.getActiveCountryIsoCode();\n    if (countries.includes(currentCountry))\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/appointment-booking/components/timeslot-booking/timeslot-booking.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1285,
                1288
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1285,
                1288
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1656,
                1659
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1656,
                1659
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 261,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 261,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                8359,
                8362
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                8359,
                8362
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n  AfterViewChecked,\n  EventEmitter,\n  Output,\n  OnDestroy,\n} from '@angular/core';\nimport * as dayjs from 'dayjs';\nimport { Observable, Subscription } from 'rxjs';\nimport { DsdAppointmentHelperService } from '../../services/dsd-appointment-helper.service';\nimport {\n  AvailableDate,\n  AvailableDates,\n  DATE_FORMATS,\n  DSDAppointment,\n  DatePicker,\n  Timeslot,\n} from '../../models/appointment-booking.models';\nimport { OccCheckoutDeliveryModeService } from '../../../checkout/occ/occ-checkout-deliverymode.service';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { OccDsdAppointmentAdapter } from '../../occ/occ-dsd-appointment-adapter';\nimport { ActiveCartService } from '@spartacus/cart/base/core';\nimport { Cart } from '@spartacus/cart/base/root';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { WindowRef } from '@spartacus/core';\n\n@Component({\n  selector: 'atcpps-dsd-appointment-booking',\n  templateUrl: './timeslot-booking.component.html',\n  styleUrls: ['./timeslot-booking.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimeslotBookingComponent\n  implements OnInit, AfterViewChecked, OnDestroy\n{\n  @Input() dealer: any;\n  @Output() appointmentSaveCompleted = new EventEmitter();\n  @Output() dsdSystemAvailable = new EventEmitter<boolean>();\n  minDate = '';\n  maxDate = '';\n  selectedDate = '';\n  selectedEndDate = '';\n  timeslotDays$: Observable<AvailableDates>;\n  dateFormat = 'YYYY-MM-DD';\n  availableDates$: Observable<AvailableDates>;\n  missingDates: string[];\n  firstSlotOftheDay: any;\n  selectedOption: string;\n  isBlockoutDatesSet = false;\n  onDatesLoadComplete = false;\n  onDatesLoadError = false;\n  currentlySelectedAppoint: DSDAppointment;\n  savedAppointmentOnCart$: Observable<DSDAppointment | undefined>;\n  subscription$ = new Subscription();\n  locale = '';\n  market = '';\n  activeMonth: number;\n  activeYear: number;\n  activeTimeSlot: string;\n  preSelectSlots?: Timeslot;\n\n  constructor(\n    private _dsdAppointmentHelper: DsdAppointmentHelperService,\n    private occCheckoutDeliveryMode: OccCheckoutDeliveryModeService,\n    private _occDsdAppointmentAdapter: OccDsdAppointmentAdapter,\n    private cdRef: ChangeDetectorRef,\n    private _activeCartService: ActiveCartService,\n    private _utilService: UtilService,\n    private _winRef: WindowRef\n  ) {}\n  ngOnDestroy(): void {\n    this.subscription$.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.availableDates$ = this._occDsdAppointmentAdapter\n      .getAvailableDates(this.dealer.id)\n      .pipe(shareReplay(1));\n\n    this.savedAppointmentOnCart$ = this._activeCartService.getActive().pipe(\n      map((cart: Cart) => {\n        return cart.appointment;\n      })\n    );\n    this.market = this._utilService.getActiveCountryIsoCode();\n    this.locale = this._utilService.getSiteContext('language')?.split('_')[0];\n    if (this.locale) dayjs.locale(this.locale);\n    this.fetchAvailableDates();\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewChecked(): void {\n    if (this.missingDates?.length && !this.isBlockoutDatesSet) {\n      this.setBlockedOutDates(this.missingDates);\n    }\n  }\n\n  private fetchAvailableDates() {\n    this.subscription$.add(\n      this.availableDates$.subscribe({\n        next: (value) => {\n          this.dsdSystemAvailable.emit(true);\n          this._processAvailableDates(value);\n        },\n        error: () => {\n          this.onDatesLoadError = true;\n          this.dsdSystemAvailable.emit(false);\n          this.cdRef.detectChanges();\n        },\n        complete: () => {\n          this.onDatesLoadComplete = true;\n          this.cdRef.detectChanges();\n        },\n      })\n    );\n  }\n\n  private _processAvailableDates(value: AvailableDates): void {\n    const availableDates = value.availableDates.map(\n      (item: AvailableDate) => item.id\n    );\n    [this.minDate] = availableDates;\n    this.maxDate = availableDates[availableDates.length - 1];\n    const allDates = this.generateDateRange(this.minDate, this.maxDate);\n    this.missingDates = allDates.filter(\n      (date) => !availableDates.includes(date)\n    );\n    this._setSavedSlotOnCalendar(this.minDate);\n  }\n\n  private _setSavedSlotOnCalendar(dateToBeSelected: string): void {\n    this.subscription$.add(\n      this.savedAppointmentOnCart$.subscribe((savedAppointment) => {\n        const appointmentFromState =\n          this._dsdAppointmentHelper.getSelectedAppointmentOnState();\n        if (savedAppointment || appointmentFromState) {\n          if (savedAppointment) {\n            const bookedDate = savedAppointment.bookedDate;\n            this.activeTimeSlot = bookedDate.split('T')[1];\n          }\n\n          const selectedAppoint = savedAppointment?.bookedDate\n            ? savedAppointment\n            : appointmentFromState;\n          const selectedDate = selectedAppoint\n            ? this._dsdAppointmentHelper.formatDate(\n                selectedAppoint.bookedDate,\n                DATE_FORMATS.DATE_FORMAT\n              )\n            : dateToBeSelected;\n\n          if (selectedAppoint && dayjs(selectedDate).isBefore(this.minDate)) {\n            this.selectedDate = dateToBeSelected;\n            this.getAvailableSlots();\n          } else {\n            this.currentlySelectedAppoint = selectedAppoint;\n            this.selectedDate = selectedDate;\n            this.getAvailableSlots(selectedAppoint?.bookedDate);\n          }\n        } else {\n          this.selectedDate = dateToBeSelected;\n          this.getAvailableSlots();\n        }\n        this.cdRef.detectChanges();\n      })\n    );\n  }\n\n  private getAvailableSlots(lastSavedAppointId?: string) {\n    this.timeslotDays$ = this.fetchTimeSlots(\n      this.dealer.id,\n      this.selectedDate,\n      this.selectedDate\n    );\n    this.setTimeSlotOnCalendar(lastSavedAppointId);\n  }\n\n  private setBlockedOutDates(blockedOutDates: string[]) {\n    const datepicker: DatePicker | null =\n      this._winRef.document.querySelector('wb-datepicker');\n    datepicker?.setBlockedDates(blockedOutDates);\n    this.isBlockoutDatesSet = true;\n  }\n\n  private getFirstSlotFromAvailableDates(\n    availableDates: AvailableDate[] | undefined\n  ): Timeslot | undefined {\n    const firstDaySlots = availableDates?.[0]?.timeslots;\n    if (this.activeTimeSlot) {\n      this.preSelectSlots = availableDates?.[0].timeslots?.find(\n        (timeslot: Timeslot) => {\n          return timeslot.id.includes(this.activeTimeSlot);\n        }\n      );\n      return this.preSelectSlots ? this.preSelectSlots : firstDaySlots?.[0];\n    } else {\n      return firstDaySlots?.[0];\n    }\n  }\n\n  private setTimeSlotOnCalendar(lastSavedAppointId?: string): void {\n    this.subscription$.add(\n      this.timeslotDays$.subscribe((data) => {\n        this.firstSlotOftheDay = this.getFirstSlotFromAvailableDates(\n          data.availableDates\n        );\n        this.selectedOption = lastSavedAppointId\n          ? lastSavedAppointId\n          : this.firstSlotOftheDay.id;\n        this.currentlySelectedAppoint = {\n          bookedDate: lastSavedAppointId\n            ? lastSavedAppointId\n            : this.firstSlotOftheDay.id,\n          duration: this.firstSlotOftheDay.duration,\n        };\n      })\n    );\n  }\n\n  compareDateTimeslot(timeSlotId: string): boolean {\n    return (\n      this._dsdAppointmentHelper.formatDate(\n        timeSlotId,\n        DATE_FORMATS.DATE_WITH_TIME_FORMAT\n      ) ===\n      this._dsdAppointmentHelper.formatDate(\n        this.selectedOption,\n        DATE_FORMATS.DATE_WITH_TIME_FORMAT\n      )\n    );\n  }\n\n  onOptionSelected(timeslotDetails: Timeslot) {\n    this.selectedOption = timeslotDetails.id;\n    this.activeTimeSlot = this.selectedOption.split('T')[1];\n    this.currentlySelectedAppoint = {\n      bookedDate: timeslotDetails.id,\n      duration: String(timeslotDetails.duration),\n    };\n    this._dsdAppointmentHelper.storeSelectedAppointmentOnState(\n      this.currentlySelectedAppoint\n    );\n  }\n\n  private generateDateRange(startDate: string, endDate: string): string[] {\n    const dateRange = [];\n    let currentDate = dayjs(startDate);\n    const endDay = dayjs(endDate);\n\n    while (currentDate <= endDay) {\n      dateRange.push(currentDate.format(this.dateFormat));\n      currentDate = currentDate.add(1, 'day');\n    }\n    return dateRange;\n  }\n\n  selectionChanged(event: any) {\n    if (event?.detail?.selectedDate) {\n      this.selectedDate = event.detail.selectedDate;\n    }\n\n    if (this.selectedDate) {\n      this.timeslotDays$ = this.fetchTimeSlots(\n        this.dealer.id,\n        this.selectedDate,\n        this.selectedDate\n      );\n      this.setTimeSlotOnCalendar();\n    }\n  }\n\n  private fetchTimeSlots(\n    dealerId: string,\n    startDate: string,\n    endDate: string\n  ): Observable<AvailableDates> {\n    return this._occDsdAppointmentAdapter\n      .getAvailableSlotsPerDay(dealerId, startDate, endDate)\n      .pipe(shareReplay(1));\n  }\n\n  saveAppointmentOnCart() {\n    this.subscription$.add(\n      this.occCheckoutDeliveryMode\n        .saveAppointmentToCart(this.currentlySelectedAppoint)\n        .subscribe({\n          complete: () => {\n            this._onSuccess();\n          },\n        })\n    );\n  }\n\n  getSelectedMonth(): number {\n    return dayjs(this.selectedDate).month();\n  }\n\n  getSelectedYear(): number {\n    return dayjs(this.selectedDate).year();\n  }\n\n  private _onSuccess() {\n    this.appointmentSaveCompleted.emit();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/cart/custom-add-to-cart/custom-add-to-cart.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1203,
                1206
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1203,
                1206
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\n\nimport { CustomAddToCartComponent } from './custom-add-to-cart.component';\nimport { CUSTOM_ELEMENTS_SCHEMA, ChangeDetectorRef } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { CurrentProductService, CmsComponentData, ProductListItemContext } from '@spartacus/storefront';\nimport { CustomAddToCartModule } from './custom-add-to-cart.module';\nimport { HttpClient } from '@angular/common/http';\nimport { DealerLocatorService } from '../../dealer-locator/services/dealer-locator.service';\nimport { OccDlcAdapter } from '../../dealer-locator/occ/occ-dlc-adapter';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { SiteContextParamsService, CmsAddToCartComponent } from '@spartacus/core';\nimport { ProductCompatibilityService } from '../../vehicle-configurator/core/services/product-compatibility.service';\nimport { BehaviorSubject, EMPTY, Observable } from 'rxjs';\nimport { Product } from '@spartacus/core/src/model/product.model';\n\n\nconst config$ = new BehaviorSubject<CmsAddToCartComponent>({\n  inventoryDisplay: false,\n});\n\nconst toggleInventoryDisplay = <CmsComponentData<any>>{\n  data$: config$.asObservable(),\n};\n\nclass MockCurrentProductService {\n  getProduct(): Observable<Product> {\n    return EMPTY;\n  }\n}\n\ndescribe('CustomAddToCartComponent', () => {\n  let component: CustomAddToCartComponent;\n  let fixture: ComponentFixture<CustomAddToCartComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomAddToCartComponent ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), CustomAddToCartModule],\n      providers: [\n        {\n          provide: CurrentProductService,\n          useClass: MockCurrentProductService,\n        },\n        {\n          provide: ProductListItemContext,\n          useValue: undefined,\n        },\n        { provide: CmsComponentData, useValue: toggleInventoryDisplay },\n        {provide: HttpClient, useValue: {} },\n        {provide: DealerLocatorService, useValue: {} },\n        {provide: OccDlcAdapter, useValue: {} },\n        UtilService,\n        { provide: SiteContextParamsService, useValue: {} },\n        {provide: ProductCompatibilityService},\n        {provide: ChangeDetectorRef},\n       ],\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomAddToCartComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', fakeAsync(() => {\n    tick();\n  fixture.detectChanges();\n    expect(component).toBeTruthy();\n  }));\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/cart/custom-add-to-cart/custom-add-to-cart.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 77,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 77,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2998,
                3001
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2998,
                3001
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 127,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 127,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4665,
                4668
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4665,
                4668
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 140,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 140,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5049,
                5052
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5049,
                5052
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { AddToCartComponent } from '@spartacus/cart/base/components/add-to-cart';\nimport {\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport { CustomProduct } from '../../../models/mb-models';\nimport { filter, map, take } from 'rxjs/operators';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport { CurrentProductService, CmsComponentData } from '@spartacus/storefront';\nimport { EventService, CmsAddToCartComponent } from '@spartacus/core';\nimport { BrowserStorageService } from 'src/app/store/browser-storage.service';\nimport { DealerLocatorService } from '../../dealer-locator/services/dealer-locator.service';\nimport { Observable, Subscription, combineLatest, of } from 'rxjs';\nimport { ProductListItemContext } from '@spartacus/storefront';\nimport { VehicleStateService } from '../../vehicle-configurator/state/vehicle-state.service';\nimport {\n  COMPATIBILITY_MATRIX,\n  COMPATIBILITY_OUTPUTS,\n} from '../../vehicle-configurator/core/models/vehicle.models';\nimport { ProductCompatibilityService } from '../../vehicle-configurator/core/services/product-compatibility.service';\nimport { isNotNullable } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './custom-add-to-cart.component.html',\n  styleUrls: ['./custom-add-to-cart.component.scss'],\n})\nexport class CustomAddToCartComponent\n  extends AddToCartComponent\n  implements OnInit, OnDestroy\n{\n  isDealer: boolean;\n  dealerId: string;\n  vinNumberSubscription: Subscription;\n  compatibiltyCheckTypes: typeof COMPATIBILITY_MATRIX = COMPATIBILITY_MATRIX;\n  compatibiltyCheckOutputs: typeof COMPATIBILITY_OUTPUTS =\n    COMPATIBILITY_OUTPUTS;\n\n  disableAddToCartCTA$: Observable<boolean> = combineLatest([\n    this.currentProductService.getProduct(),\n    this._vehicleStateService.compatibilityCheckResult$,\n  ]).pipe(\n    map(\n      ([product, compatibilityCheckResult]) =>{\n        return (product?.compatibilityCheck === COMPATIBILITY_MATRIX.MANDATORY &&\n        compatibilityCheckResult?.status !== COMPATIBILITY_OUTPUTS.COMPATIBLE)\n      }\n    )\n  );\n  constructor(\n    private _browserStorageService: BrowserStorageService,\n    protected override currentProductService: CurrentProductService,\n    protected override cd: ChangeDetectorRef,\n    protected override activeCartService: ActiveCartFacade,\n    protected override component: CmsComponentData<CmsAddToCartComponent>,\n    protected override eventService: EventService,\n    private dealerLocatorService: DealerLocatorService,\n    private _vehicleStateService: VehicleStateService,\n    private _productCompatibilityService: ProductCompatibilityService,\n    @Optional() override productListItemContext?: ProductListItemContext\n  ) {\n    super(\n      currentProductService,\n      cd,\n      activeCartService,\n      component,\n      eventService,\n      productListItemContext\n    );\n  }\n\n  override ngOnInit() {\n    this.currentProductService.getProduct().subscribe((item: any) => {\n      this.dealerLocatorService.storeSelectedDealer(item?.isDealerAvailable);\n      this.isDealer = item?.isDealerAvailable;\n    });\n\n    super.ngOnInit();\n    this._checkCCStatusForProduct();\n  }\n\n  private _checkCCStatusForProduct() {\n    this.vinNumberSubscription = combineLatest([\n      this._productCompatibilityService.cartEntryNeedsVin(),\n      this._vehicleStateService.vinVehicleData$,\n      this.currentProductService.getProduct(),\n    ])\n      .pipe(\n        filter(([, , product]) => isNotNullable(product?.compatibilityCheck))\n      )\n      .subscribe(([flag, vehicleData, product]) => {\n        if (flag && product?.compatibilityCheck)\n          this._vehicleStateService.setProductVinNumber(vehicleData?.vin);\n        else this._vehicleStateService.setProductVinNumber(undefined);\n      });\n  }\n\n  protected override setStockInfo(product: CustomProduct): void {\n    this.quantity = 1;\n    this.hasStock = Boolean(product.stock?.stockLevelStatus !== 'outOfStock');\n\n    this.inventoryThreshold = product.stock?.isValueRounded ?? false;\n\n    if (this.hasStock && product.stock?.stockLevel) {\n      this.maxQuantity =\n        product.stock.stockLevel >= product.maxOrderQuantity\n          ? product.maxOrderQuantity\n          : product.stock.stockLevel;\n    } else if (this.hasStock) {\n      this.maxQuantity = product.maxOrderQuantity;\n    }\n\n    if (this.productListItemContext) {\n      this.showQuantity = false;\n    }\n  }\n\n  override addToCart() {\n    if (this.isDealer) {\n      const dealerIdFromLocal = of(\n        JSON.parse(this._browserStorageService.readItem('dealer_details') ?? '')\n      );\n      dealerIdFromLocal.subscribe((item: any) => {\n        this.dealerId = item.name;\n      });\n    }\n\n    const quantity = this.addToCartForm.get('quantity')?.value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n\n    if (this.pickupOptionCompRef instanceof ComponentRef) {\n      this.pickupOptionCompRef.instance.intendedPickupLocation$\n        .pipe(take(1))\n        .subscribe((intendedPickupLocation: any) => {\n          this.pickupStore =\n            intendedPickupLocation?.pickupOption === 'pickup'\n              ? intendedPickupLocation.name\n              : undefined;\n        });\n    }\n\n    this.activeCartService\n      .getEntries()\n      .pipe(take(1))\n      .subscribe((cartEntries) => {\n        this.activeCartService.addEntry(\n          this.productCode,\n          quantity,\n          this.isDealer ? this.dealerId : ''\n        );\n\n\n        // A CartUiEventAddToCart is dispatched.  This event is intended for the UI\n        // responsible to provide feedback about what was added to the cart, like\n        // the added to cart dialog.\n        //\n        // Because we call activeCartService.getEntries() before, we can be sure the\n        // cart library is loaded already and that the event listener exists.\n        this.eventService.dispatch(\n          this.createCartUiEventAddToCart(\n            this.productCode,\n            quantity,\n            cartEntries.length,\n            this.isDealer ? this.dealerId : ''\n          )\n        );\n      });\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this.vinNumberSubscription?.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/cart/custom-cart-details/custom-cart-details.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-function",
        "severity": 2,
        "message": "Unexpected empty method 'initLoginFlow'.",
        "line": 26,
        "column": 19,
        "nodeType": "FunctionExpression",
        "messageId": "unexpected",
        "endLine": 26,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { TestBed } from '@angular/core/testing';\n\nimport { CustomCartDetailsComponent } from './custom-cart-details.component';\nimport { AuthService } from '@spartacus/core';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { CustomCartDetailsModule } from './custom-cart-details.module';\nimport { OAuthLibWrapperService } from '@spartacus/core';\nimport { OAuthEvent, TokenResponse } from 'angular-oauth2-oidc';\nimport { BehaviorSubject } from 'rxjs';\nimport { AuthMultisiteIsolationService } from '@spartacus/core';\nimport { UserIdService } from '@spartacus/core';\nimport { AuthRedirectService } from '@spartacus/core';\nimport { BaseSiteService } from '@spartacus/core';\n\nconst oauthLibEvents = new BehaviorSubject<OAuthEvent>({\n  type: 'token_received',\n});\nclass MockOAuthLibWrapperService implements Partial<OAuthLibWrapperService> {\n  revokeAndLogout() {\n    return Promise.resolve();\n  }\n  authorizeWithPasswordFlow() {\n    return Promise.resolve({} as TokenResponse);\n  }\n  initLoginFlow() {}\n  tryLogin() {\n    return Promise.resolve({ result: true, tokenReceived: true });\n  }\n  events$ = oauthLibEvents;\n}\n\ndescribe('CustomCartDetailsComponent', () => {\n \n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), CustomCartDetailsModule],\n      providers: [AuthService,\n        {\n          provide: OAuthLibWrapperService,\n          useClass: MockOAuthLibWrapperService,\n        },\n        {\n          provide: AuthMultisiteIsolationService,\n          useValue: '',\n        },\n        {\n          provide: UserIdService,\n          useValue: '',\n        },\n        { provide: AuthRedirectService, useValue: '' },\n        {provide: BaseSiteService, useValue: ''}\n      ],\n    });\n    TestBed.inject(AuthService);\n    TestBed.inject(OAuthLibWrapperService);\n  });\n\n  it('should create', () => {\n    const component = TestBed.createComponent(CustomCartDetailsComponent);\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/cart/custom-cart-proceed-to-checkout/custom-cart-proceed-to-checkout.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                829,
                832
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                829,
                832
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomCartProceedToCheckoutComponent } from './custom-cart-proceed-to-checkout.component';\nimport { CustomCheckoutService } from '../../checkout/services/custom-checkout.service';\nimport { StoreModule } from '@ngrx/store';\nimport { CUSTOM_ELEMENTS_SCHEMA, ChangeDetectorRef, Pipe, PipeTransform } from '@angular/core';\nimport { Router, RouterEvent } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { I18nTestingModule } from '@spartacus/core';\n\n@Pipe({\n  name: 'cxUrl',\n})\n\nclass MockUrlPipe implements PipeTransform {\n  transform() { return }\n}\n\n\nconst mockRouterEvents$ = new Observable<RouterEvent>();\nclass MockRouter implements Partial<Router> {\n  events = mockRouterEvents$;\n  routerState = { snapshot: { root: {} } } as any;\n}\n\n\n\nclass MockCustomCheckout {\n  isEmailUpdateRequired() {\n    return EMPTY\n  }\n}\n\n\ndescribe('CustomCartProceedToCheckoutComponent', () => {\n  let component: CustomCartProceedToCheckoutComponent;\n  let fixture: ComponentFixture<CustomCartProceedToCheckoutComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomCartProceedToCheckoutComponent, MockUrlPipe],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), I18nTestingModule],\n      providers:[\n        {provide: CustomCheckoutService, useClass: MockCustomCheckout},\n        {\n          provide: Router,\n          useClass: MockRouter,\n        },\n        {\n          provide: ChangeDetectorRef,\n          useValue: '',\n        },\n        ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomCartProceedToCheckoutComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n\n\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/components/custom-checkout-3ds/custom-checkout-3ds-payments/custom-checkout-3ds-payments.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1169,
                1172
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1169,
                1172
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1531,
                1534
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1531,
                1534
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1565,
                1568
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1565,
                1568
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1681,
                1684
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1681,
                1684
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1705,
                1708
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1705,
                1708
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2683,
                2686
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2683,
                2686
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2986,
                2989
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2986,
                2989
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 90,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 90,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3468,
                3471
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3468,
                3471
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4347,
                4350
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4347,
                4350
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4372,
                4375
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4372,
                4375
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5177,
                5180
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5177,
                5180
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 145,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 145,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5549,
                5552
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5549,
                5552
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 145,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 145,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5574,
                5577
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5574,
                5577
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 160,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 160,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5963,
                5966
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5963,
                5966
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 175,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 175,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6498,
                6501
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6498,
                6501
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 188,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 188,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6781,
                6784
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6781,
                6784
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 231,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 231,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                8372,
                8375
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                8372,
                8375
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                9895,
                9898
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                9895,
                9898
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 283,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 283,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                10184,
                10187
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                10184,
                10187
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 321,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 321,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                11234,
                11237
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                11234,
                11237
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 332,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 332,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                11570,
                11573
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                11570,
                11573
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 21,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, Subject, Subscription, timer } from 'rxjs';\nimport { OccCheckoutPlaceOrderService } from '../../../occ/occ-checkout-place-order.service';\nimport { MultiCartFacade } from '@spartacus/cart/base/root';\nimport { GlobalMessageService } from '@spartacus/core';\nimport { GlobalMessageType } from '@spartacus/core';\nimport { TranslationService } from '@spartacus/core';\nimport { LaunchDialogService } from '@spartacus/storefront';\nimport { LAUNCH_CALLER } from '@spartacus/storefront';\nimport { AppState } from 'src/app/store/app-state';\nimport { RoutingService } from '@spartacus/core';\nimport { map, switchMap, takeUntil } from 'rxjs/operators';\nimport { CheckoutPaymentService } from '@spartacus/checkout/base/core';\nimport { Dialog3DSLoadingService } from '../custom-checkout-3ds-dialog/custom-checkout-3ds-dialog.service';\nimport { PaymentAuthStatus } from '../../../models/checkout.models';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { WindowRef } from '@spartacus/core';\ndeclare const window: any;\n\n@Component({\n  selector: 'atcpps-checkout-3ds-payments',\n  templateUrl: './custom-checkout-3ds-payments.component.html',\n  styleUrls: ['./custom-checkout-3ds-payments.component.scss'],\n})\nexport class CustomCheckout3DSPaymentsComponent implements OnDestroy {\n  preAuthSub: Subscription | undefined;\n  threeDSDialogComponent: void | Observable<ComponentRef<any> | undefined>;\n  paymentData: any;\n  currentCartId = '';\n  userGuid: string;\n  stopTimer: Subject<void> = new Subject();\n\n  @Input() placedOrder: any;\n  @Input() userId: any;\n  @Input() onSubmitSubscription: Subscription | undefined;\n  @Output() submitOrder = new EventEmitter();\n  @Output() setPaymentData = new EventEmitter();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private _occCheckoutPlaceOrderService: OccCheckoutPlaceOrderService,\n    private multiCartFacade: MultiCartFacade,\n    private globalMessage: GlobalMessageService,\n    private translationService: TranslationService,\n    private launchDialogService: LaunchDialogService,\n    private appState: AppState,\n    private utilService: UtilService,\n    private routingService: RoutingService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private dialog3DSLoadingService: Dialog3DSLoadingService,\n    private _winRef: WindowRef\n  ) {}\n\n  public verify3DSPayments(userId: string, cartId: string) {\n    if (userId && cartId) {\n      this.currentCartId = cartId;\n      window.UPI3DS2.getDeviceInformation({\n        callback: (err: object, deviceInformation: any) => {\n          if (err) {\n            this.handle3DSError(err, 'checkoutReview.auth.failed');\n          } else {\n            this.preAuthSub = this._occCheckoutPlaceOrderService\n              .postDeviceInformation(userId, cartId, deviceInformation)\n              .subscribe(\n                (res: any) => {\n                  this.paymentData = res;\n                  this.setPaymentData.emit(this.paymentData);\n                  this.initiate3DSFlow(res, false);\n                },\n                (error: object) => {\n                  this.handle3DSError(error, 'checkoutReview.auth.failed');\n                }\n              );\n          }\n        },\n      });\n    } else {\n      this.handle3DSError({}, 'checkoutReview.auth.failed');\n    }\n  }\n\n  public initiate3DSFlow(data: any, retry: boolean) {\n    this.enablePlaceOrderButton(false);\n    if (data?.threeDSecure2Challenge) {\n      retry\n        ? this.verify3DSPayments(this.userId, this.currentCartId)\n        : this.render3DSChallenge(data.threeDSecure2Challenge);\n    } else if (data?.threeDSecure2Fingerprint) {\n      retry\n        ? this.verify3DSPayments(this.userId, this.currentCartId)\n        : this.generateDeviceFingerprint(data?.threeDSecure2Fingerprint);\n    } else if (data?.redirectUrl) {\n      this.handle3DS1Authentication(this.userId, data);\n    } else {\n      this.submitOrder.emit();\n    }\n  }\n\n  private generateDeviceFingerprint(threeDSecure2Fingerprint: string) {\n    if (threeDSecure2Fingerprint) {\n      window.UPI3DS2.generateDeviceFingerprint(threeDSecure2Fingerprint, {\n        elem: this._winRef.document.getElementById('deviceFingerpintWrapper'),\n        callback: (err: any, transaction_status: any) => {\n          if (err) {\n            this.handle3DSError(\n              this.generate3DSRetryError(),\n              'checkoutReview.auth.failed'\n            );\n          } else {\n            const threeDSecure2Challenge =\n              transaction_status?.asynchronous?.threeDSecure2Challenge;\n            if (transaction_status?.status === PaymentAuthStatus.AUTHORIZED) {\n              this.submitOrder.emit();\n            } else if (threeDSecure2Challenge) {\n              this.render3DSChallenge(threeDSecure2Challenge);\n            } else {\n              this.handle3DSError({}, 'checkoutReview.auth.failed');\n            }\n          }\n        },\n      });\n    } else {\n      this.handle3DSError({}, 'checkoutReview.auth.failed');\n    }\n  }\n\n  private render3DSChallenge(threeDSecure2Challenge: any) {\n    this.dialog3DSLoadingService.setLoading(false);\n    this.threeDSDialogComponent = this.launchDialogService.launch(\n      'THREE_DS_DIALOG',\n      this.vcr\n    );\n\n    if (threeDSecure2Challenge) {\n      window.UPI3DS2.showChallenge(threeDSecure2Challenge, {\n        elem: this._winRef.document.getElementById('threeDSChallengeWrapper'),\n        callback: (err: any, transaction_status: any) => {\n          if (!transaction_status || err) {\n            this.handle3DSError(\n              this.generate3DSRetryError(),\n              'checkoutReview.auth.failed'\n            );\n          } else if (transaction_status) {\n            this.submitOrder.emit();\n          }\n        },\n        size: '02',\n      });\n    }\n  }\n\n  private handle3DS1Authentication(userId: string, res: any) {\n    const transactionId: string = res?.transactionId ?? '';\n    const redirectUrl =\n      this.utilService.getMpayBaseUrl() + (res?.redirectUrl ?? '');\n    const authTabInstance = window.open(redirectUrl, '_blank');\n    if (!authTabInstance || authTabInstance?.closed) {\n      this.handle3DSError({}, 'checkoutReview.auth.popup');\n    } else {\n      this.getTransactionStatus(userId, transactionId, authTabInstance);\n    }\n  }\n\n  private getTransactionStatus(\n    userId: string,\n    transactionId: string,\n    authTabInstance: any\n  ) {\n    timer(0, 3000)\n      .pipe(\n        switchMap(() =>\n          this._occCheckoutPlaceOrderService.getTransactionStatus(\n            userId,\n            transactionId\n          )\n        ),\n        takeUntil(this.stopTimer)\n      )\n      .subscribe({\n        next: (res: any) => {\n          const transactionStatusReview =\n            res?.transactionStatus === PaymentAuthStatus.REVIEW;\n          if (!transactionStatusReview) {\n            this.stopTimer.next();\n            this.closeAuthTab(authTabInstance);\n            this.onPaymentAuthStatusChange(res?.transactionStatus);\n          }\n          if (authTabInstance.closed) {\n            this.stopTimer.next();\n            const transactionStatusRejected =\n              res?.transactionStatus === PaymentAuthStatus.REJECTED;\n            this.resetOrderSubmission(\n              transactionStatusReview || transactionStatusRejected\n                ? true\n                : false\n            );\n          }\n        },\n        error: (error: object) => {\n          this.handle3DSError(error, 'checkoutReview.auth.failed');\n        },\n      });\n  }\n\n  private onPaymentAuthStatusChange(transactionStatus: string) {\n    if (transactionStatus === PaymentAuthStatus.ACCEPTED) {\n      this.submitOrder.emit();\n    } else if (transactionStatus === PaymentAuthStatus.ERROR) {\n      this.handle3DSError({}, 'checkoutReview.auth.failed');\n    } else if (transactionStatus === PaymentAuthStatus.REJECTED) {\n      this.paymentData = undefined;\n      this.setPaymentData.emit(this.paymentData);\n      this.paymentDetailsAllowMultipleTransactions()\n        .subscribe((savedPaymentDetails) => {\n          !savedPaymentDetails\n            ? this.resetCheckoutPaymentOptions()\n            : this.handle3DSError({}, 'checkoutReview.auth.failed');\n        })\n        .unsubscribe();\n    }\n  }\n\n  private handle3DSError(err: any | undefined, key: string, message?: string) {\n    if (\n      err?.error?.errors[0]?.type === 'CartError' &&\n      err?.error?.errors[0]?.reason === 'expired' &&\n      err?.error?.errors[0]?.subject\n    ) {\n      this.userGuid = err?.error?.errors[0]?.subject;\n      this.currentCartId = this.userGuid ? this.userGuid : '';\n      //Update cart on transaction attempt if anonymous user guid has been updated\n      this.reloadActiveCart(this.userId, this.userGuid);\n      this.verify3DSPayments(this.userId, this.userGuid);\n    } else if (err?.error?.errors[0]?.type === 'PaymentAuthorizationError') {\n      this.paymentDetailsAllowMultipleTransactions()\n        .subscribe((savedPaymentDetails) => {\n          !savedPaymentDetails\n            ? this.resetCheckoutPaymentOptions()\n            : this.showUserErrorMsg(\n                err?.error?.errors[0]?.message ?? message ?? '',\n                key\n              );\n          this.resetOrderSubmission(true);\n        })\n        .unsubscribe();\n    } else {\n      this.showUserErrorMsg(\n        err?.error?.errors[0]?.message ?? message ?? '',\n        key\n      );\n      this.resetOrderSubmission(false);\n    }\n  }\n\n  public resetOrderSubmission(enablePlaceOrder: boolean) {\n    this.clearThreeDSDialog();\n    this.clearPlaceOrderSpinner();\n    this.onSubmitSubscription?.unsubscribe();\n    this.preAuthSub?.unsubscribe();\n    this.enablePlaceOrderButton(enablePlaceOrder);\n  }\n\n  private clearThreeDSDialog() {\n    this.threeDSDialogComponent\n      ?.subscribe((comp: any) => {\n        this.launchDialogService.clear('THREE_DS_DIALOG');\n        comp?.destroy();\n      })\n      .unsubscribe();\n  }\n\n  private clearPlaceOrderSpinner() {\n    this.launchDialogService.clear(LAUNCH_CALLER.PLACE_ORDER_SPINNER);\n    this.placedOrder\n      ?.subscribe((component: any) => {\n        this.launchDialogService.clear(LAUNCH_CALLER.PLACE_ORDER_SPINNER);\n        if (component) component.destroy();\n      })\n      .unsubscribe();\n  }\n\n  private reloadActiveCart(userId: string, cartId: string) {\n    this.onSubmitSubscription?.unsubscribe();\n    this.multiCartFacade.loadCart({\n      cartId: cartId,\n      userId: userId,\n      extraData: { active: true },\n    });\n  }\n\n  private showUserErrorMsg(errorMsg: string, key: string) {\n    this.translationService.translate(key).subscribe((text: string) => {\n      if (!errorMsg) errorMsg = text;\n    });\n    this.showErrorMessage(errorMsg);\n  }\n\n  public showErrorMessage(errorMessage: string) {\n    this.globalMessage.add(\n      errorMessage,\n      GlobalMessageType.MSG_TYPE_ERROR,\n      6000\n    );\n  }\n\n  public enablePlaceOrderButton(enabled: boolean) {\n    const placeOrderButton = this._winRef.document.getElementById(\n      'placeOrder'\n    ) as HTMLButtonElement;\n    if (placeOrderButton) placeOrderButton.disabled = !enabled;\n  }\n\n  private closeAuthTab(instance: any) {\n    if (instance) instance.close();\n  }\n\n  private generate3DSRetryError() {\n    return { error: { errors: [{ type: 'PaymentAuthorizationError' }] } };\n  }\n\n  private paymentDetailsAllowMultipleTransactions(): Observable<boolean> {\n    return this.checkoutPaymentService\n      .getPaymentDetailsState()\n      .pipe(map((payload: any) => payload?.data?.saved));\n  }\n\n  private resetCheckoutPaymentOptions() {\n    this.appState.setTransactionRetry(true);\n    this.routingService.go({ cxRoute: 'checkoutPaymentDetails' });\n    this.showUserErrorMsg('', 'checkoutReview.auth.rejected');\n  }\n\n  ngOnDestroy() {\n    if (this.onSubmitSubscription) this.onSubmitSubscription.unsubscribe();\n    if (this.preAuthSub) this.preAuthSub.unsubscribe();\n    this.stopTimer.next();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/components/custom-checkout-payment-method/custom-billing-address-form/custom-billing-address-form.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 123,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 123,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4386,
                4389
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4386,
                4389
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 175,
        "column": 7,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 175,
        "endColumn": 76
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport {\n  Country,\n  Region,\n  Title,\n  UserAddressService,\n  Address,\n  UserPaymentService,\n  getLastValueSync,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { filter, map, tap, switchMap } from 'rxjs/operators';\nimport {\n  UntypedFormGroup,\n  UntypedFormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { Card, sortTitles } from '@spartacus/storefront';\nimport {\n  CheckoutDeliveryAddressService,\n  CheckoutPaymentService,\n} from '@spartacus/checkout/base/core';\nimport { countryConfig } from 'src/app/countries/country-config';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { ActiveCartService } from '@spartacus/cart/base/core';\nimport { AddressType } from 'src/app/features/product/models/mb.product.model';\nimport { StoreKeys } from 'src/app/store/store-keys';\nimport { FormValidator } from 'src/app/shared/formValidator';\nimport { BrowserStorageService } from 'src/app/store/browser-storage.service';\n\n@Component({\n  selector: 'atcpps-billing-address-form',\n  templateUrl: './custom-billing-address-form.component.html',\n  styleUrls: ['./custom-billing-address-form.component.scss'],\n})\nexport class CustomBillingAddressFormComponent implements OnInit, OnDestroy {\n  deliveryAddress$: Observable<Address | undefined>;\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  sameAsDeliveryAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsDeliveryAddressCheckbox$: Observable<boolean>;\n  currentAddress: Address | undefined;\n\n  billingAddressForm: UntypedFormGroup = this.fb.group({\n    titleCode: ['', Validators.required],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  subscription: Subscription = new Subscription();\n\n  constructor(\n    protected fb: UntypedFormBuilder,\n    protected checkoutDeliveryAddressService: CheckoutDeliveryAddressService,\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    private _utilService: UtilService,\n    private activeCartService: ActiveCartService,\n    private _checkoutPaymentService: CheckoutPaymentService,\n    private browserStorageService: BrowserStorageService,\n    private translation: TranslationService,\n    private userService: UserService,\n    private _formValidator: FormValidator\n  ) {}\n\n  ngOnInit(): void {\n    // Fetching titles\n    this.titles$ = this.getTitles();\n    this.loadAddresses();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n    this.deliveryAddress$ = this.checkoutDeliveryAddressService\n      .getDeliveryAddressState()\n      .pipe(\n        filter((state) => !state.loading),\n        map((state) => state.data)\n      );\n\n    this.showSameAsDeliveryAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.deliveryAddress$,\n      this.userAddressService.getAddresses(),\n      this._checkoutPaymentService.getPaymentDetailsState().pipe(\n        filter((state) => !state.loading),\n        map((state) => state.data)\n      ),\n    ]).pipe(\n      map(([countries, address, currentAddress, updatedBillingAddress]) => {\n        const countryCheck =\n          (address?.country &&\n            !!countries.filter(\n              (country: Country): boolean =>\n                country.isocode === address.country?.isocode\n            ).length) ??\n          false;\n        const addressToBeUpdate =\n          updatedBillingAddress?.billingAddress || currentAddress[0];\n        return {\n          shouldShowCheckbox: countryCheck,\n          addressToBeUpdate: addressToBeUpdate,\n        };\n      }),\n      tap((obg: any) => {\n        this.sameAsDeliveryAddress = this.checkBoxState(obg.addressToBeUpdate);\n        this.billingAddressForm.patchValue(obg.addressToBeUpdate);\n      })\n    );\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl?.enable();\n        } else {\n          regionControl?.disable();\n        }\n      })\n    );\n    this._customFormValidatorIsRequired();\n    this.subscription = this.countries$.subscribe((countries) => {\n      if (countries.length === 1) {\n        this.billingAddressForm\n          .get(['country', 'isocode'])\n          ?.setValue(countries[0].isocode);\n      }\n    });\n  }\n\n  getTitles(): Observable<Title[]> {\n    return combineLatest([\n      this.translation.translate('addressForm.defaultTitle'),\n      this.userService.getTitles(),\n    ]).pipe(\n      map(([noneTitleText, titles]) => {\n        const noneTitle = { code: '', name: noneTitleText };\n        titles.sort(sortTitles);\n        return [noneTitle, ...titles];\n      })\n    );\n  }\n\n  toggleSameAsDeliveryAddress(): void {\n    this.sameAsDeliveryAddress = !this.sameAsDeliveryAddress;\n    this.browserStorageService.storeItem(\n      StoreKeys.SameAsDeliveryAddress,\n      JSON.stringify(this.sameAsDeliveryAddress)\n    );\n  }\n\n  checkBoxState(address: Address | undefined): boolean {\n    const checkboxState = JSON.parse(\n      this.browserStorageService.readItem(StoreKeys.SameAsDeliveryAddress)!\n    );\n    if (address === undefined) {\n      this.browserStorageService.storeItem(\n        StoreKeys.SameAsDeliveryAddress,\n        JSON.stringify(this.sameAsDeliveryAddress)\n      );\n      return checkboxState === null\n        ? this.sameAsDeliveryAddress\n        : checkboxState;\n    } else {\n      checkboxState === null &&\n        this.browserStorageService.storeItem(\n          StoreKeys.SameAsDeliveryAddress,\n          JSON.stringify(!this.sameAsDeliveryAddress)\n        );\n      return checkboxState === null\n        ? !this.sameAsDeliveryAddress\n        : checkboxState;\n    }\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    const currentConfig = countryConfig.find(\n      (obj) => obj.countryCode === this._utilService.getActiveCountryIsoCode()\n    );\n    if (\n      currentConfig &&\n      currentConfig.formatAddress &&\n      currentConfig.addressFormat\n    ) {\n      return currentConfig.addressFormat(null, address, AddressType.CHECKOUT);\n    } else {\n      return {\n        textBold: address.firstName + ' ' + address.lastName,\n        text: [\n          address.line1,\n          address.line2,\n          address.town + ', ' + region + address.country?.isocode,\n          address.postalCode,\n          address.phone,\n        ],\n      } as Card;\n    }\n  }\n\n  get isGuestCheckout(): boolean {\n    return !!getLastValueSync(this.activeCartService.isGuestCart());\n  }\n\n  protected loadAddresses(): void {\n    if (!this.isGuestCheckout) {\n      this.userAddressService.loadAddresses();\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode')?.setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode as string);\n  }\n\n  private _customFormValidatorIsRequired(): void {\n    const currentConfig = countryConfig.find(\n      (obj) => obj.countryCode === this._utilService.getActiveCountryIsoCode()\n    );\n\n    //TODO THis country flag should come from store\n    if (currentConfig && currentConfig.customAddressFormValidatorRequired) {\n      this.billingAddressForm = this._formValidator.formValidation;\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/components/custom-checkout-payment-method/custom-checkout-payment-form/custom-checkout-payment-form.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1467,
                1470
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1467,
                1470
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2375,
                2378
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2375,
                2378
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2450,
                2453
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2450,
                2453
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4370,
                4373
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4370,
                4373
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 133,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 133,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4491,
                4494
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4491,
                4494
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 218,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 218,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                7083,
                7086
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                7083,
                7086
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewChild,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport { CheckoutPaymentFormComponent } from '@spartacus/checkout/base/components';\nimport {\n  CheckoutPaymentFacade,\n  CheckoutDeliveryAddressFacade,\n} from '@spartacus/checkout/base/root';\nimport {\n  UserPaymentService,\n  GlobalMessageService,\n  UserAddressService,\n  AuthService,\n} from '@spartacus/core';\nimport { LaunchDialogService } from '@spartacus/storefront';\nimport { combineLatest, Subscription } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport { OccCheckoutPaymentService } from '../../../occ/occ-checkout-payment.service';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { Country, TranslationService, getLastValueSync } from '@spartacus/core';\nimport { CustomBillingAddressFormComponent } from '../custom-billing-address-form/custom-billing-address-form.component';\nimport { formCustomisation } from '../../../models/checkout-iframe.styles';\nimport { ExtendedPaymentDetails } from '../../../models/checkout.models';\nimport { GlobalMessageType } from '@spartacus/core';\nimport { CustomCheckoutService } from '../../../services/custom-checkout.service';\nimport { WindowRef } from '@spartacus/core';\n\ndeclare const window: any;\n@Component({\n  selector: 'atcpps-custom-checkout-payment-form',\n  templateUrl: './custom-checkout-payment-form.component.html',\n  styleUrls: ['./custom-checkout-payment-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomCheckoutPaymentFormComponent\n  extends CheckoutPaymentFormComponent\n  implements OnInit, OnDestroy\n{\n  ngOnDestroy(): void {\n    if (this.tokenSub) {\n      this.tokenSub.unsubscribe();\n    }\n    if (this.updatePaymentSub) {\n      this.updatePaymentSub.unsubscribe();\n    }\n    if (this.mpayInit && !this.mpayInit?.success) {\n      this.mpayInit.close();\n    }\n  }\n\n  public cardDetails: ExtendedPaymentDetails;\n  private isLoggedIn: boolean | undefined;\n  private cartId: string | undefined;\n  private tokenSub: Subscription | undefined;\n  private updatePaymentSub: Subscription | undefined;\n  private mpayToken = '';\n  private mpayInit: any;\n  toggleLoader = true;\n\n  @Output()\n  addedNewCard = new EventEmitter<any>();\n\n  get isGuestCheckout(): boolean {\n    return !!getLastValueSync(this.activeCartService.isGuestCart());\n  }\n\n  @ViewChild('customBillingAddressForm')\n  billingAddressFormComponent: CustomBillingAddressFormComponent;\n  constructor(\n    checkoutPaymentFacade: CheckoutPaymentFacade,\n    checkoutDeliveryAddressFacade: CheckoutDeliveryAddressFacade,\n    userPaymentService: UserPaymentService,\n    globalMessageService: GlobalMessageService,\n    fb: UntypedFormBuilder,\n    userAddressService: UserAddressService,\n    launchDialogService: LaunchDialogService,\n    private occCheckoutPaymentService: OccCheckoutPaymentService,\n    private authService: AuthService,\n    private activeCartService: ActiveCartFacade,\n    protected cd: ChangeDetectorRef,\n    private _utilService: UtilService,\n    private customCheckoutService: CustomCheckoutService,\n    private _winRef: WindowRef,\n    override translationService: TranslationService\n  ) {\n    super(\n      checkoutPaymentFacade,\n      checkoutDeliveryAddressFacade,\n      userPaymentService,\n      globalMessageService,\n      fb,\n      userAddressService,\n      launchDialogService,\n      translationService\n    );\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n    this.getMpayToken();\n    this.loadAddresses();\n\n    //FIXME This should be removed later\n    this.showSameAsDeliveryAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.deliveryAddress$,\n      this.userAddressService.getAddresses(),\n    ]).pipe(\n      map(([countries, address, currentAddress]) => {\n        const countryCheck =\n          (address?.country &&\n            !!countries.filter(\n              (country: Country): boolean =>\n                country.isocode === address.country?.isocode\n            ).length) ??\n          false;\n        return {\n          shouldShowCheckbox: countryCheck,\n          currentAddress: currentAddress,\n        };\n      }),\n      tap((obg: any) => {\n        if (obg.currentAddress?.length !== 0) {\n          obg.currentAddress.filter((address: { [key: string]: any }) => {\n            this.billingAddressFormComponent.billingAddressForm.patchValue(\n              address\n            );\n          });\n          this.sameAsDeliveryAddress = !obg.shouldShowCheckbox;\n        } else {\n          this.sameAsDeliveryAddress = obg.shouldShowCheckbox;\n        }\n      })\n    );\n  }\n  protected loadAddresses(): void {\n    if (!this.isGuestCheckout) {\n      this.userAddressService.loadAddresses();\n    }\n  }\n\n  backToPrev(event: Event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    this.goBack.emit();\n  }\n\n  nextStep(event: Event): void {\n    event.preventDefault();\n    this.billingAddressFormComponent.billingAddressForm.markAllAsTouched();\n    if (!this.cardDetails) {\n      this.showMpayErrorMessage('checkoutReview.cardFailiure');\n      return;\n    }\n    if (this.billingAddressFormComponent.sameAsDeliveryAddress) {\n      this.setPaymentDetails.emit({\n        paymentDetails: this.paymentForm.value,\n        billingAddress: null,\n        userLoggedIn: this.isLoggedIn,\n        cartId: this.cartId,\n      });\n    } else {\n      if (this.billingAddressFormComponent.billingAddressForm.valid) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress:\n            this.billingAddressFormComponent.billingAddressForm.value,\n          userLoggedIn: this.isLoggedIn,\n          cartId: this.cartId,\n        });\n      } else {\n        this.billingAddressFormComponent.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  private getMpayToken(): void {\n    this.toggleLoader = true;\n    this.cd.detectChanges();\n    this.tokenSub = combineLatest([\n      this.authService.isUserLoggedIn(),\n      this.activeCartService.getActiveCartId(),\n    ])\n      .pipe(\n        debounceTime(0),\n        switchMap(([loginStatus, cartId]) => {\n          this.isLoggedIn = loginStatus;\n          this.cartId = cartId;\n          return this.occCheckoutPaymentService.getMpayToken(\n            loginStatus,\n            cartId\n          );\n        })\n      )\n      .subscribe((data) => {\n        this.mpayToken = data.parameters.entry[0].value;\n        this.toggleLoader = false;\n        this.cd.detectChanges();\n        this.loadMpayForm();\n      });\n  }\n\n  private loadMpayForm(): void {\n    if (this.mpayToken) {\n      this.mpayInit = window.UPI.init(this.mpayToken, {\n        elem: this._winRef.document.getElementById('mPayPaymentForm'),\n        lang: this.customCheckoutService.getMpayFormLanguage(),\n        formCustomisation: formCustomisation,\n        callback: (err: object, asset: any) => {\n          if (err) {\n            this.onError();\n          } else {\n            this.onSuccess(asset);\n            this.mpayInit.success = true;\n          }\n        },\n      });\n    }\n  }\n\n  private onSuccess(asset: object): void {\n    this.updatePaymentSub = this.occCheckoutPaymentService\n      .updatePaymentDetails(this.isLoggedIn, this.cartId, asset)\n      .subscribe((paymentDetails: ExtendedPaymentDetails) => {\n        this.cardDetails = paymentDetails;\n        this.addedNewCard.emit({\n          paymentDetails: paymentDetails,\n          userLoggedIn: this.isLoggedIn,\n          cartId: this.cartId,\n        });\n        this.cd.detectChanges();\n      });\n  }\n\n  private onError(): void {\n    setTimeout(() => {\n      this.loadMpayForm();\n      this.showMpayErrorMessage('checkoutReview.cardFailiure');\n      this.cd.detectChanges();\n    }, 500);\n  }\n\n  private showMpayErrorMessage(key: string): void {\n    this.translationService\n      .translate(key)\n      .subscribe((text: string) => {\n        this.globalMessageService.add(\n          text,\n          GlobalMessageType.MSG_TYPE_ERROR,\n          6000\n        );\n      })\n      .unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/components/custom-checkout-payment-method/custom-checkout-payment-method.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 149,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 149,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5113,
                5116
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5113,
                5116
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport {\n  CheckoutPaymentMethodComponent,\n  CheckoutStepService,\n} from '@spartacus/checkout/base/components';\nimport {\n  PaymentDetails,\n  UserPaymentService,\n  TranslationService,\n  GlobalMessageService,\n  UserIdService,\n  EventService,\n} from '@spartacus/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport {\n  CheckoutDeliveryAddressFacade,\n  CheckoutPaymentFacade,\n  CheckoutPaymentDetailsCreatedEvent,\n  CheckoutQueryReloadEvent,\n} from '@spartacus/checkout/base/root';\nimport { combineLatest, Subscription, Subject, Observable } from 'rxjs';\nimport { Card } from '@spartacus/storefront';\nimport { CustomBillingAddressFormComponent } from './custom-billing-address-form/custom-billing-address-form.component';\nimport { AuthService } from '@spartacus/core';\nimport { switchMap, takeUntil, filter, map } from 'rxjs/operators';\nimport { AppState } from 'src/app/store/app-state';\nimport { OccCheckoutPaymentService } from '../../occ/occ-checkout-payment.service';\nimport { CustomCheckoutService } from '../../services/custom-checkout.service';\n\n@Component({\n  selector: 'atcpps-custom-checkout-payment-method',\n  templateUrl: './custom-checkout-payment-method.component.html',\n  styleUrls: ['./custom-checkout-payment-method.component.scss'],\n})\nexport class CustomCheckoutPaymentMethodComponent\n  extends CheckoutPaymentMethodComponent\n  implements OnInit, OnDestroy\n{\n  override get existingPaymentMethods$(): Observable<PaymentDetails[]> {\n    return combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.checkoutPaymentFacade.getPaymentDetailsState().pipe(\n        filter((state) => !state.loading),\n        map((state) => state.data)\n      ),\n    ]).pipe(\n      map(([paymentMethods, selectedMethod]) => {\n        if (this.appState.getTransactionRetry()) return [];\n        const containsSelectedMethod = paymentMethods.find(\n          (item: PaymentDetails) => item?.id === selectedMethod?.id\n        );\n        if (!!selectedMethod && this.isGuestCheckout) {\n          return [...paymentMethods, selectedMethod];\n        } else if (\n          !!selectedMethod &&\n          !this.isGuestCheckout &&\n          !containsSelectedMethod\n        ) {\n          return [...paymentMethods, selectedMethod];\n        }\n        return paymentMethods;\n      })\n    );\n  }\n\n  @ViewChild('customBillingAddressForm')\n  billingAddressFormComponent: CustomBillingAddressFormComponent;\n  updateBillingSub: Subscription;\n  private ngUnsubscribe: Subject<void> = new Subject();\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutDeliveryAddressFacade: CheckoutDeliveryAddressFacade,\n    checkoutPaymentFacade: CheckoutPaymentFacade,\n    activatedRoute: ActivatedRoute,\n    translationService: TranslationService,\n    activeCartFacade: ActiveCartFacade,\n    private authService: AuthService,\n    checkoutStepService: CheckoutStepService,\n    globalMessageService: GlobalMessageService,\n    private occCheckoutPaymentService: OccCheckoutPaymentService,\n    private eventService: EventService,\n    protected userIdService: UserIdService,\n    private _customCheckoutService: CustomCheckoutService,\n    private appState: AppState\n  ) {\n    super(\n      userPaymentService,\n      checkoutDeliveryAddressFacade,\n      checkoutPaymentFacade,\n      activatedRoute,\n      translationService,\n      activeCartFacade,\n      checkoutStepService,\n      globalMessageService\n    );\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this.updateBillingSub) this.updateBillingSub.unsubscribe();\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  public handleContinue(event: Event): void {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n    this.billingAddressFormComponent.billingAddressForm.markAllAsTouched();\n    if (\n      !this.billingAddressFormComponent.sameAsDeliveryAddress &&\n      !this.billingAddressFormComponent.billingAddressForm.valid\n    )\n      return;\n    const billingAddress = this.billingAddressFormComponent\n      .sameAsDeliveryAddress\n      ? this.deliveryAddress\n      : this.billingAddressFormComponent.billingAddressForm.value;\n    const paymentDetails: PaymentDetails = {};\n    const { email, ...restOfAddress } = billingAddress;\n    paymentDetails.billingAddress = email ? billingAddress : restOfAddress;\n    this.busy$.next(true);\n    this.updateBillingSub = combineLatest([\n      this.authService.isUserLoggedIn(),\n      this.activeCartFacade.getActiveCartId(),\n    ])\n      .pipe(\n        takeUntil(this.ngUnsubscribe),\n        switchMap(([loginStatus, cartId]) => {\n          return this.occCheckoutPaymentService.updateBillingAddress(\n            loginStatus,\n            cartId,\n            paymentDetails\n          );\n        })\n      )\n      .subscribe(() => {\n        this.updatePaymentChangeEvent();\n      })\n      .add(() => {\n        this.busy$.next(false);\n      });\n  }\n\n  addedNewCard(data: any): void {\n    this.paymentDetails = data.paymentDetails;\n    this.updateCheckoutEvent(data.paymentDetails);\n    this.newPaymentFormManuallyOpened = false;\n    this.appState.setTransactionRetry(false);\n  }\n\n  private updatePaymentChangeEvent(): void {\n    this.eventService.dispatch({}, CheckoutQueryReloadEvent);\n    this.next();\n  }\n\n  private updateCheckoutEvent(paymentDetails: PaymentDetails): void {\n    this.subscriptions.add(\n      combineLatest([\n        this.userIdService.takeUserId(),\n        this.activeCartFacade.takeActiveCartId(),\n      ]).subscribe(([userId, cartId]) => {\n        this.eventService.dispatch(\n          {\n            userId,\n            cartId,\n            paymentDetails,\n          },\n          CheckoutPaymentDetailsCreatedEvent\n        );\n      })\n    );\n  }\n\n  override createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails | undefined\n  ): Card {\n    return {\n      role: 'region',\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [\n        this._customCheckoutService.maskCreditCardNumber(\n          paymentDetails.cardNumber ?? ''\n        ),\n        cardLabels.textExpires,\n      ],\n      img: this.getCardIcon(paymentDetails.cardType?.code as string),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.subscriptionId === paymentDetails.subscriptionId\n          ? cardLabels.textSelected\n          : undefined,\n      label: paymentDetails.defaultPayment\n        ? 'paymentCard.defaultPaymentLabel'\n        : 'paymentCard.additionalPaymentLabel',\n    };\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/components/custom-checkout-place-order/custom-checkout-place-order.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1659,
                1662
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1659,
                1662
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1679,
                1682
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1679,
                1682
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1705,
                1708
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1705,
                1708
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1718,
                1721
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1718,
                1721
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2054,
                2057
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2054,
                2057
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 90,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 90,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3092,
                3095
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3092,
                3095
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3350,
                3353
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3350,
                3353
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 109,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 109,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3583,
                3586
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3583,
                3586
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 123,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 123,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3882,
                3885
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3882,
                3885
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4318,
                4321
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4318,
                4321
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4331,
                4334
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4331,
                4334
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4384,
                4387
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4384,
                4387
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 233,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 233,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                7100,
                7103
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                7100,
                7103
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  Component,\n  ViewContainerRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutPlaceOrderComponent } from '@spartacus/checkout/base/components';\nimport { LAUNCH_CALLER, LaunchDialogService } from '@spartacus/storefront';\nimport { OrderFacade } from '@spartacus/order/root';\nimport {\n  RoutingService,\n  UserIdService,\n} from '@spartacus/core';\nimport {\n  FormArray,\n  FormControl,\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport { CmsService } from '@spartacus/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartFacade,\n  Cart,\n} from '@spartacus/cart/base/root';\nimport { combineLatest, Subscription, Subject } from 'rxjs';\nimport { switchMap, takeUntil, first } from 'rxjs/operators';\nimport { BrowserStorageService } from 'src/app/store/browser-storage.service';\nimport { StoreKeys } from 'src/app/store/store-keys';\nimport { OCC_USER_ID_ANONYMOUS } from '@spartacus/core';\nimport { OccCheckoutPlaceOrderService } from '../../occ/occ-checkout-place-order.service';\nimport { CustomCheckout3DSPaymentsComponent } from '../custom-checkout-3ds/custom-checkout-3ds-payments/custom-checkout-3ds-payments.component';\n\n@Component({\n  selector: 'atcpps-checkout-place-order',\n  templateUrl: './custom-checkout-place-order.component.html',\n  styleUrls: ['./custom-checkout-place-order.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomCheckoutPlaceOrderComponent\n  extends CheckoutPlaceOrderComponent\n  implements OnInit, OnDestroy\n{\n  form: FormGroup;\n  userId: any = '';\n  pageId: any = '';\n  consentData$: any;\n  data: any[] = [];\n  public errorMsg = '';\n  postSubscriptionConsent: Subscription | undefined;\n  onSubmitSubscription: Subscription | undefined;\n  checkingLength: number | undefined;\n  placeOrderConsent: Subscription | undefined;\n  checkingsub: Subscription | undefined;\n  private ngUnsubscribe: Subject<void> = new Subject();\n  paymentData: any;\n\n  @ViewChild(CustomCheckout3DSPaymentsComponent) checkout3DSPayments: CustomCheckout3DSPaymentsComponent;\n  \n  constructor(\n    orderFacade: OrderFacade,\n    routingService: RoutingService,\n    fb: UntypedFormBuilder,\n    launchDialogService: LaunchDialogService,\n    vcr: ViewContainerRef,\n    private cd: ChangeDetectorRef,\n    protected userIdService: UserIdService,\n    private _occCheckoutPlaceOrderService: OccCheckoutPlaceOrderService,\n    protected cms: CmsService,\n    private formBuilder: FormBuilder,\n    private activeCartFacade: ActiveCartFacade,\n    private _browserStorageService: BrowserStorageService,\n  ) {\n    super(orderFacade, routingService, fb, launchDialogService, vcr);\n    this.form = this.formBuilder.group({\n      checkArray: this.formBuilder.array([], [Validators.required]),\n    });\n  }\n  override checkoutSubmitForm: UntypedFormGroup = this.fb.group({\n    termsAndConditions: [true],\n  });\n  get consentFormArray() {\n    return this.form.controls['checkArray'] as FormArray;\n  }\n\n  onConsentChange(e: any) {\n    // Fix me\n    e.preventDefault();\n    const checkArray: FormArray = this.consentFormArray;\n    if (e.target.checked) {\n      checkArray.push(new FormControl(e.target.value));\n    } else {\n      let ct = 0;\n      checkArray.controls.forEach((item: any) => {\n        if (item.value == e.target.value) {\n          checkArray.removeAt(ct);\n          return;\n        }\n        ct++;\n      });\n    }\n  }\n\n  enablePlaceHolder() {\n    this.checkingsub = this.consentData$.subscribe((len: any) => {\n      return (this.checkingLength = len?.consentTemplates.length);\n    });\n    if (this.consentFormArray.length === this.checkingLength) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  ngOnInit(): void {\n    this.consentData$ = this.loadConsent();\n  }\n\n  loadConsent(): any {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.cms.getCurrentPage(),\n    ]).pipe(\n      first(),\n      takeUntil(this.ngUnsubscribe),\n      switchMap(([userid, data]) => {\n        this.userId = userid;\n        this.pageId = data?.pageId;\n        return this._occCheckoutPlaceOrderService.getConsent(\n          this.userId,\n          this.pageId\n        );\n      })\n    );\n  }\n\n  giveConsent(consent: any, cartId: any) {\n    consent?.consentTemplates?.forEach((data: any) => {\n      const obj = {\n        id: data.id,\n        version: data.version,\n      };\n      this.data.push(obj);\n    });\n    const checkedDetails = {\n      cartId: cartId,\n      consentTemplates: this.data,\n    };\n    return checkedDetails;\n  }\n\n  onSubmitOrder(event: Event) {\n    event.preventDefault();\n    this.showLoaderSpinner();\n    if (!this.paymentData) {\n      this.checkout3DSPayments.enablePlaceOrderButton(false);\n      this.onSubmitSubscription = this.activeCartFacade\n        .getActive()\n        .subscribe((cart) => {\n          this.initiateOrderSubmission(cart);\n        });\n    } else {\n      this.checkout3DSPayments.initiate3DSFlow(this.paymentData, true);\n    }\n  }\n\n  private initiateOrderSubmission(cart: Cart) {\n    this.postSubscriptionConsent = combineLatest([\n      this.activeCartFacade.getActive(),\n      this.loadConsent(),\n    ])\n      .pipe(\n        first(),\n        takeUntil(this.ngUnsubscribe),\n      switchMap(([cart, consent]) => {\n        const reqDetails = this.giveConsent(consent, cart?.code);\n          return this._occCheckoutPlaceOrderService.postConsent(reqDetails);\n        })\n      )\n      .subscribe((data) => {\n        const details = data.body;\n        if(details.isValid){\n          const cartId = this.getCartIdByUser(this.userId, cart);\n          this.checkout3DSPayments.verify3DSPayments(this.userId, cartId)\n        }\n        if(details.errorMessage && !details.isValid){\n          this.checkout3DSPayments.showErrorMessage(data.body.errorMessage);\n          this.checkout3DSPayments.resetOrderSubmission(false);\n        }\n    });\n  }\n\n  public submitOrder() {\n    this.activeCartFacade.isGuestCart().subscribe((isGuest) => {\n      if (isGuest)\n        this._browserStorageService.deleteItem(StoreKeys.SameAsDeliveryAddress);\n    });\n    this.checkout3DSPayments.resetOrderSubmission(false);\n    this.submitForm();\n  }\n\n  override submitForm(): void {\n    this.errorMsg = '';\n    this.orderFacade.clearPlacedOrder();\n    this.placeOrderConsent = this.orderFacade\n      .placeOrder(this.checkoutSubmitForm.valid)\n      .subscribe({\n        error: (data) => {\n          this.errorMsg = data?.details[0]?.type;\n          this.cd.detectChanges();\n        if (!this.placedOrder) { return; }\n        this.checkout3DSPayments.resetOrderSubmission(true);\n        },\n        next: (response) => {\n          if (response && response.code)\n            sessionStorage.setItem('orderId', response.code);\n          this.onSuccess();\n        },\n      });\n  }\n\n  private getCartIdByUser(userId: string, cart: Cart): string {\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return cart?.guid ?? '';\n    }\n    return cart?.code ?? '';\n  }\n\n  public setPaymentData(data: any) {\n    this.paymentData = data;\n  }\n\n  private showLoaderSpinner() {\n    this.placedOrder = this.launchDialogService.launch(\n      LAUNCH_CALLER.PLACE_ORDER_SPINNER,\n      this.vcr\n    );\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    if (this.postSubscriptionConsent)\n      this.postSubscriptionConsent.unsubscribe();\n    if (this.placeOrderConsent) this.placeOrderConsent.unsubscribe();\n    if (this.checkingsub) this.checkingsub.unsubscribe();\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/components/custom-checkout-review-submit/custom-checkout-review-submit.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 127,
        "column": 26,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 127,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                4300,
                4322
              ],
              "text": "(cartLoaded$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                4300,
                4322
              ],
              "text": "(cartLoaded$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                4300,
                4322
              ],
              "text": "(cartLoaded$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<div class=\"cx-review\">\n  <!-- TITLE -->\n  <h2 class=\"cx-review-title d-none d-lg-block d-xl-block\">\n    {{ \"checkoutReview.review\" | cxTranslate }}\n  </h2>\n\n  <div class=\"cx-review-summary row\">\n    <ng-container *ngIf=\"(steps$ | async)?.slice(0, -1) as steps\">\n      <div class=\"col-md-12 col-lg-6 col-xl-6 cx-review-payment-col\">\n        <ng-container *ngFor=\"let step of paymentSteps(steps)\">\n          <ng-container [ngSwitch]=\"step.type[0]\">\n            <ng-container *ngSwitchCase=\"checkoutStepTypePaymentDetails\">\n              <ng-container *ngTemplateOutlet=\"paymentMethod\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n      <div class=\"col-md-12 col-lg-6 col-xl-6 cx-review-shipping-col\">\n        <ng-container *ngFor=\"let step of deliverySteps(steps)\">\n          <ng-container [ngSwitch]=\"step.type[0]\">\n            <ng-container *ngSwitchCase=\"checkoutStepTypeDeliveryMode\">\n              <ng-container *ngTemplateOutlet=\"deliveryMode\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n\n  <!-- DELIVERY MODE SECTION -->\n  <ng-template #deliveryMode>\n    <!-- DELIVERY ADDRESS SECTION -->\n\n    <div\n      *ngIf=\"deliveryAddress$ | async as deliveryAddress\"\n      class=\"cx-review-summary-card cx-review-card-address\"\n    >\n      <cx-card\n        [content]=\"getFullDeliveryAddressCard(deliveryAddress) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"\n            'checkoutReview.editDeliveryAddressDetails' | cxTranslate\n          \"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepTypeDeliveryAddress)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n    <div class=\"cx-review-summary-card cx-review-card-shipping\">\n      <cx-card\n        *ngIf=\"deliveryMode$ | async as deliveryMode\"\n        [content]=\"getDeliveryModeCard(deliveryMode) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editDeliveryMode' | cxTranslate\"\n          [routerLink]=\"\n            { cxRoute: getCheckoutStepUrl(checkoutStepTypeDeliveryMode) }\n              | cxUrl\n          \"\n        >\n          <cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon>\n        </a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- PAYMENT METHOD SECTION -->\n  <ng-template #paymentMethod>\n    <div class=\"cx-review-summary-card cx-review-card-payment\">\n      <div>\n        <cx-card\n          *ngIf=\"paymentDetails$ | async as paymentDetails\"\n          [content]=\"getFullPaymentMethodCard(paymentDetails) | async\"\n        ></cx-card>\n        <cx-card\n          *ngIf=\"paymentDetails$ | async as paymentDetails\"\n          [content]=\"getBillingAddressDetails(paymentDetails) | async\"\n        ></cx-card>\n      </div>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentDetails' | cxTranslate\"\n          [routerLink]=\"\n            { cxRoute: getCheckoutStepUrl(checkoutStepTypePaymentDetails) }\n              | cxUrl\n          \"\n        >\n          <cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon>\n        </a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- CART ITEM SECTION -->\n  <ng-container *ngIf=\"cart$ | async as cart\">\n    <div class=\"cx-review-cart-total d-none d-lg-block d-xl-block\">\n      {{\n        \"cartItems.cartTotal\"\n          | cxTranslate : { count: cart.deliveryItemsQuantity }\n      }}:\n      {{ cart.totalPrice?.formattedValue }}\n    </div>\n    <div class=\"cx-review-cart-heading d-block d-lg-none d-xl-none\">\n      {{ \"checkoutReview.placeOrder\" | cxTranslate }}\n    </div>\n    <div\n      class=\"cx-review-cart-item col-md-12\"\n      *ngIf=\"entries$ | async as entries\"\n    >\n      <cx-promotions\n        [promotions]=\"\n          (cart.appliedOrderPromotions || []).concat(\n            cart.potentialOrderPromotions || []\n          )\n        \"\n      ></cx-promotions>\n      <atcpps-custom-cart-item-list\n        [items]=\"entries\"\n        [readonly]=\"true\"\n        [cartIsLoading]=\"!(cartLoaded$ | async)\"\n        [promotionLocation]=\"promotionLocation\"\n        [options]=\"{\n          isSaveForLater: false,\n          optionalBtn: saveForLaterBtn\n        }\"\n      ></atcpps-custom-cart-item-list>\n    </div>\n  </ng-container>\n</div>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/occ/adapters/occ-checkout-email-adapter.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/ban-types",
        "severity": 2,
        "message": "Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.",
        "line": 16,
        "column": 17,
        "nodeType": "TSTypeLiteral",
        "messageId": "bannedTypeMessage",
        "endLine": 16,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { OccEndpointsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OccCheckoutEmailAdapter {\n  constructor(\n    private _http: HttpClient,\n    private _occEndpointsService: OccEndpointsService\n  ) {}\n  updateEmailToCart(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this._occEndpointsService.buildUrl('updateEmail', {\n      urlParams: {\n        userId,\n        cartId,\n      },\n    });\n    return this._http.put(url, httpParams, {});\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/occ/occ-checkout-deliverymode.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1074,
                1077
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1074,
                1077
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1501,
                1504
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1501,
                1504
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { OccEndpointsService } from '@spartacus/core';\nimport { Observable, combineLatest, throwError } from 'rxjs';\nimport { catchError, map, switchMap, take } from 'rxjs/operators';\nimport { UserIdService } from '@spartacus/core';\nimport { ActiveCartService } from '@spartacus/cart/base/core';\nimport { OCC_USER_ID_ANONYMOUS } from '@spartacus/core';\nimport { DSDAppointment } from '../../appointment-booking/models/appointment-booking.models';\nimport { GlobalMessageService } from '@spartacus/core';\nimport { GlobalMessageType } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccCheckoutDeliveryModeService {\n  constructor(\n    private _activeCartService: ActiveCartService,\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    private _userIdService: UserIdService,\n    private _globalMsgService: GlobalMessageService\n  ) {}\n\n  public saveAppointmentToCart(appointment: DSDAppointment): Observable<any> {\n    const appointmentPayload = {\n      appointment: appointment,\n    };\n    return this._getUserIdAndCartId().pipe(\n      switchMap(([userId, cartId]) => {\n        return this.http\n          .post(\n            this.occEndpoints.buildUrl('storeAppointmentOnCart', {\n              urlParams: { userId, cartId },\n            }),\n            appointmentPayload\n          )\n          .pipe(\n            catchError((response: any) => {\n              if (response instanceof HttpErrorResponse) {\n                this.handleDABErrors(response);\n              }\n              return throwError(response);\n            })\n          );\n      })\n    );\n  }\n\n  private handleDABErrors(errorResponse: HttpErrorResponse) {\n    const message =\n      errorResponse.status === 404\n        ? { key: 'httpHandlers.dsdSystemUnavailable' }\n        : errorResponse?.error?.errors[0]?.message;\n    this._globalMsgService.add(message, GlobalMessageType.MSG_TYPE_ERROR, 2000);\n  }\n\n  protected _getUserIdAndCartId(): Observable<[string, string]> {\n    return combineLatest([\n      this._userIdService.takeUserId(),\n      this._activeCartService.takeActiveCartId(),\n      this._activeCartService.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/occ/occ-checkout-payment.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 76,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 79,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                489,
                492
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                489,
                492
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 103,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 106,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                685,
                688
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                685,
                688
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 120,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 123,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                702,
                705
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                702,
                705
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 103,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 106,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1310,
                1313
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1310,
                1313
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 119,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 122,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1326,
                1329
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1326,
                1329
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OccCheckoutConfig } from './occ-endpoints-config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OccCheckoutPaymentService {\n\n  constructor(private http: HttpClient, private occEndpoints: OccEndpointsService) { }\n\n  public getMpayToken(isUserLoggedIn: boolean, cartId: string): Observable<any> {\n    return this.http.post(this.buildUrl('mpayToken', isUserLoggedIn, cartId), {})\n  }\n\n  public updatePaymentDetails(isUserLoggedIn: boolean | undefined, cartId: string | undefined, asset: any): Observable<any> {\n    return this.http.post(this.buildUrl('updatePayment', isUserLoggedIn, cartId), asset, {})\n  }\n\n  private buildUrl(context: string, isLoggedIn: boolean | undefined, cartId: string | undefined): string {\n    const occBaseurl = this.occEndpoints.getBaseUrl();\n    const cartType = isLoggedIn ? OccCheckoutConfig.userCart : OccCheckoutConfig.guestCart;\n    const endpoint = OccCheckoutConfig[context as keyof typeof OccCheckoutConfig];\n    return `${occBaseurl}${cartType}${cartId}${endpoint}`;\n  }\n\n  public updateBillingAddress(isUserLoggedIn: boolean | undefined, cartId: string | undefined,payload:any):Observable<any>{\n    const formData = new FormData();\n    Object.keys(payload.billingAddress).forEach(key => {\n      if(key==='country'){\n        return formData.append('billTo_country', payload.billingAddress.country['isocode'])\n      }else{\n        return formData.append(`billTo_${key}`, payload.billingAddress[key])\n      }\n\n    });\n    return this.http.post(this.buildUrl('updatebillingaddress', isUserLoggedIn, cartId),formData,  {})\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/occ/occ-checkout-place-order.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2146,
                2149
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2146,
                2149
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2163,
                2166
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2163,
                2166
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 64,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 64,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2303,
                2306
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2303,
                2306
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { OccEndpointsService } from \"@spartacus/core\";\nimport { Observable } from \"rxjs\";\nimport { OccCheckoutConfig } from \"./occ-endpoints-config\";\nimport { OCC_USER_ID_ANONYMOUS } from \"@spartacus/core\";\nimport { USE_CLIENT_TOKEN } from \"@spartacus/core\";\nimport { InterceptorUtil } from \"@spartacus/core\";\n\nexport interface ConsentBody {\n  cartId: string,\n  consentTemplates: Array<ConsentTemplates>\n}\nexport interface ConsentTemplates {\n  id: string,\n  version: number,\n}\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class OccCheckoutPlaceOrderService {\n  constructor(\n    private http: HttpClient, \n    private occEndpoints: OccEndpointsService\n  ) { }\n\n  private getHeadersByUserId(userId: string) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return headers;\n  }\n\n  private postConsentbuildUrl(context: string) {\n    const occBaseurl = this.occEndpoints.getBaseUrl();\n    const endpoint = OccCheckoutConfig[context as keyof typeof OccCheckoutConfig];\n    return `${occBaseurl}${endpoint}`\n    }\n\n  private buildUrl(context: string, userId: string | undefined, pageId: string | undefined): string {\n    const occBaseurl = this.occEndpoints.getBaseUrl();\n    const endpoint = '/users/' + userId + '/consenttemplates/pages?pageId=';\n    return `${occBaseurl}${endpoint}${pageId}`;\n  }\n\n  private postDeviceInformationUrl(context: string, userId: string, cartId: string, deviceInformation: string): string {\n    const path = '/users/' + userId + '/orders/preauth';\n    return this.occEndpoints.buildUrl(path, { queryParams: { cartId, deviceInformation } });\n  }\n\n  private getTransactionStatusUrl(context: string, userId: string, transactionId: string) {\n    const path = '/users/' + userId + '/orders/status';\n    return this.occEndpoints.buildUrl(path, { queryParams: { transactionId } });\n  }\n\n  public getConsent(userId: string, pageId: any): Observable<any> {\n    return this.http.get(this.buildUrl('getConsent', userId, pageId), {});\n  }\n  \n  public postConsent(body:ConsentBody): Observable<any> {\n    return this.http.post(this.postConsentbuildUrl('postConsent'), body, {observe: 'response'});\n  }\n\n  public postDeviceInformation(userId: string, cartId: string, deviceInformation: string) {\n    const headers = this.getHeadersByUserId(userId);\n    return this.http.post(this.postDeviceInformationUrl('auth', userId, cartId, deviceInformation), {}, { headers });\n  }\n\n  public getTransactionStatus(userId: string, transactionId: string) {\n    const headers = this.getHeadersByUserId(userId);\n    return this.http.post(this.getTransactionStatusUrl('auth', userId, transactionId), {}, { headers });\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/checkout/services/custom-checkout.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2014,
                2017
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2014,
                2017
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport { UserAddressService } from '@spartacus/core';\nimport { Address } from '@spartacus/core';\nimport { getLastValueSync } from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { OccCheckoutEmailAdapter } from '../occ/adapters/occ-checkout-email-adapter';\nimport { UserIdService } from '@spartacus/core';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AuthService } from '@spartacus/core';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { countryConfig } from 'src/app/countries/country-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomCheckoutService {\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    private _authService: AuthService,\n    protected userAddressService: UserAddressService,\n    private _occCheckoutEmailAdapter: OccCheckoutEmailAdapter,\n    private _userIdService: UserIdService,\n    private _utilService: UtilService\n  ) {}\n\n  public maskCreditCardNumber(lastDigits: string) {\n    const maxLength = 16 + 3;\n    const maskedNumber =\n      '**** **** **** ' +\n      (lastDigits.length > 4\n        ? lastDigits.slice(-4)\n        : lastDigits.padStart(4, '*'));\n    return maskedNumber.slice(0, maxLength);\n  }\n\n  isGuestCheckout(): boolean {\n    return !!getLastValueSync(this.activeCartFacade.isGuestCart());\n  }\n\n  getSavedUserAddress(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  loadAddresses(): void {\n    if (!this.isGuestCheckout) {\n      this.userAddressService.loadAddresses();\n    }\n  }\n\n  isEmailUpdateRequired(): Observable<boolean> {\n    return combineLatest([\n      this._authService.isUserLoggedIn(),\n      this.activeCartFacade.getActive(),\n    ]).pipe(\n      map(\n        ([isUserLoggedIn, activeCart]) =>\n          isUserLoggedIn && !activeCart?.emailAvailable\n      )\n    );\n  }\n\n  updateEmailToCart(email: string): Observable<any> {\n    return combineLatest([\n      this._userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n    ]).pipe(\n      take(1),\n      switchMap(([userId, cartId]) => {\n        return this._occCheckoutEmailAdapter.updateEmailToCart(\n          userId,\n          cartId,\n          email\n        );\n      })\n    );\n  }\n\n  getMpayFormLanguage(): string {\n    let mpayFormLanguage = this.getMpayCountrySpecificLanguage();\n    if (!mpayFormLanguage) {\n      mpayFormLanguage = this._utilService.getSiteContext('language');\n    }\n    return mpayFormLanguage;\n  }\n\n  getMpayCountrySpecificLanguage(): string {\n    const activeCountryIsoCode = this._utilService.getActiveCountryIsoCode();\n    const currentConfig = countryConfig.find(obj => obj.countryCode === activeCountryIsoCode);\n    return currentConfig?.mpayCountrySpecificLanguage || '';\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/dealer-locator/components/dlc-wrapper/atcpps-dealer-container.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1662,
                1665
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1662,
                1665
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, OnInit } from '@angular/core';\nimport { DealerLocatorconfig } from '../../../../common/constants';\nimport { DealerLocatorService } from '../../services/dealer-locator.service';\nimport { BrowserStorageService } from 'src/app/store/browser-storage.service';\nimport { map } from 'rxjs/operators';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { Observable, of } from 'rxjs';\nimport { PointOfService } from '@spartacus/core';\n\n@Component({\n  selector: 'atcpps-dealer-container',\n  templateUrl: './atcpps-dealer-container.component.html',\n})\nexport class AtcppsDealerContainerComponent implements OnInit {\n  public showModal = false;\n  public displayModal() {\n    this.showModal = true;\n  }\n  public modalClosed() {\n    this.showModal = false;\n  }\n  getDealerDetails$: Observable<PointOfService>;\n  \n\n  constructor(\n    private dealerLocatorService: DealerLocatorService,\n    private _browserStorageService: BrowserStorageService,\n    private utilService: UtilService\n  ) {}\n  \n  appId: string = DealerLocatorconfig.dealerLocatorApplicationId;\n  dealerLocatorMultiCardConfigId: string =\n    DealerLocatorconfig.dealerLocatorMultipleDealerConfigId;\n  dealerLocatorSearchProfileName: string =\n    DealerLocatorconfig.dealerLocatorSearchProfileName;\n  language: string = this.utilService.getSiteContext('language');\n  country: string = this.utilService.getActiveCountryIsoCode();\n  isDealer$ = this.dealerLocatorService.data$;\n\n\n  ngOnInit() {\n    if(this._browserStorageService.readItem('dealer_details') === null || undefined) {\n      this.getDealerDetails$ = this.dealerLocatorService.getDealerId().pipe(\n        map((item: any) => {\n          const saveDealerRes = JSON.stringify(item?.pointOfServices.length > 0 ? item?.pointOfServices[0] : '');\n          this._browserStorageService.storeItem('dealer_details', saveDealerRes);\n          return item?.pointOfServices.length > 0 ? item?.pointOfServices[0] : '';\n          }\n        )\n      );\n    } else {\n    this.getDealerDetails$ = of(JSON.parse(this._browserStorageService.readItem('dealer_details') ?? ''));\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/dealer-locator/components/multi-dealer/multi-dealer.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                797,
                800
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                797,
                800
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                902,
                905
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                902,
                905
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1956,
                1959
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1956,
                1959
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DealerLocatorService } from '../../services/dealer-locator.service';\n\nexport const eventEmit = new EventEmitter();\nexport function vendorSelected() {\n  eventEmit.emit(true);\n}\n@Component({\n  selector: 'atcpps-multi-dealer',\n  templateUrl: './multi-dealer.component.html',\n})\nexport class MultiDealerComponent {\n  @Input() dealerLocatorConfigId: string;\n  @Input() dealerLocatorHeight: string;\n  @Input() dealerLocatorBaseUrl: string;\n  @Input() dealerId: string;\n  @Input() dealerLocatorApiKey: string;\n  @Input() dealerLocatorApplicationId: string;\n  @Input() searchProfileName: string;\n  @Input() language: string;\n  @Input() country: string;\n  @Output() modalClosed = new EventEmitter();\n  dealerLocatorInstance: any;\n\n  constructor(private dealerLocatorService: DealerLocatorService) {\n    eventEmit.subscribe((item: any) => {\n      if (item) {\n        this.modalClosed.emit();\n      }\n    });\n  }\n\n  _config() {\n    const dealerLocatorApplicationId = this.dealerLocatorApplicationId, // name of the application (provided by DLC team for your integration case)\n      dealerLocatorConfigId = this.dealerLocatorConfigId, // 'OneDLC_ATCPPS_DealerCard', // 'ONEDLC_TEMPLATE_DEALERCARD', //'OneDLC_ATCPPS_Selector', //  //'ATC_Selector', // name of configuration ID (provided by DL team for your integration case)\n      dealerLocatorShopCountry = this.country;\n\n    return {\n      dealerSelectorConfiguration: {\n        height: this.dealerLocatorHeight,\n        dealerLocatorBaseUrl: this.dealerLocatorBaseUrl,\n        applicationId: dealerLocatorApplicationId,\n        configId: dealerLocatorConfigId,\n        market: dealerLocatorShopCountry,\n        language: this.language,\n        element: 'dcp-vendor-context-selector__widget-container',\n        apiKey: this.dealerLocatorApiKey,\n        countries: [dealerLocatorShopCountry],\n        selectDealerCallback: (dealerInfo: any) => {\n          vendorSelected();\n          this.dealerLocatorService.storeSelectedDealer(dealerInfo);\n        },\n        searchProfileName: this.searchProfileName,\n        whiteList: this.dealerId,\n      },\n    };\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/dealer-locator/services/dealer-locator.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                338,
                341
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                338,
                341
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                377,
                380
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                377,
                380
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                446,
                449
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                446,
                449
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { OccDlcAdapter } from '../occ/occ-dlc-adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DealerLocatorService {\n  constructor(\n    private _occDlcAdapter: OccDlcAdapter,\n  ) {}\n\n  private dataSubject = new BehaviorSubject<any>(null);\n  public data$: Observable<any> = this.dataSubject.asObservable();\n\n  storeSelectedDealer(data: any) {\n    this.dataSubject?.next(data);\n  }\n\n  getDealerId() {\n    return this._occDlcAdapter.loadDealers();\n  }\n\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/flyoutheader/flyoutheader.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 6,
        "column": 105,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 6,
        "endColumn": 143,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                429,
                467
              ],
              "text": "(authService.isUserLoggedIn()| async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                429,
                467
              ],
              "text": "(authService.isUserLoggedIn()| async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                429,
                467
              ],
              "text": "(authService.isUserLoggedIn()| async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<ng-container *ngIf=\"components$ | async as components\">\n  <div *ngIf=\"componentData.uid === FlyoutHeaderSlots.DESKTOP\" role=\"region\" tabindex=\"-1\"\n    [attr.aria-label]=\"ariaLabel | cxTranslate\" class=\"container\">\n    <ng-container *ngFor=\"let component of components; let i = index\">\n      <ng-container *ngIf=\"component\">\n        <button  [ngClass]=\"component.flexType\" *ngIf=\"(component.uid !== FlyoutLoginComponentUID)?true:!(authService.isUserLoggedIn()| async)\" (click)=\"toggleFlyout(component.flexType,$any($event))\">\n        </button>\n        <div class=\"atcpps-flyout\" [ngClass]=\"component.flexType\" tabindex=\"-1\" role=\"presentation\" >\n          <div class=\"flyout-container\">\n            <div class=\"flyout\">\n              <button class=\"close\" (click)=\"toggleFlyout(component.flexType,$any($event))\">\n              </button>\n              <ng-template [cxOutlet]=\"component.flexType\" [cxOutletContext]=\"{}\">\n                <ng-container [cxComponentWrapper]=\"component\" (cxComponentRef)=\"tabCompLoaded($event)\"></ng-container>\n              </ng-template>\n            </div>\n          </div>\n          <div class=\"backdrop\" (click)=\"toggleFlyout(component.flexType,$any($event))\"></div>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n  <div *ngIf=\"componentData.uid === FlyoutHeaderSlots.MOBILE\" role=\"region\" tabindex=\"-1\"\n    [attr.aria-label]=\"ariaLabel | cxTranslate\" class=\"container m-0 p-0 \">\n    <ng-container *ngFor=\"let component of components; let i = index\">\n      <ng-container *ngIf=\"component\">\n        <button [class.active]=\"i === activeTabNum\" (click)=\"select(i, $event)\"\n          [attr.aria-expanded]=\"i === activeTabNum\" [class]=\"component.flexType\">\n          {{\n          'common.'+component.title | cxTranslate: { param: tabTitleParams[i] | async }\n          }}\n          <span class=\"accordion-icon\" aria-hidden=\"true\"></span>\n        </button>\n\n        <div [class.active]=\"i === activeTabNum\" class=\"atcpps-flyoutheader\" tabindex=\"0\" role=\"presentation\">\n          <ng-template [cxOutlet]=\"component.flexType\" [cxOutletContext]=\"{}\">\n            <ng-container [cxComponentWrapper]=\"component\" (cxComponentRef)=\"tabCompLoaded($event)\"></ng-container>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-container>",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/homepage/full-width-slider-item/full-width-slider-item.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                890,
                893
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                890,
                893
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FullWidthSliderItemComponent } from './full-width-slider-item.component';\nimport { CmsComponentData, GenericLinkComponent } from '@spartacus/storefront';\nimport { UrlModule, CmsService, CmsBannerComponent, FeaturesConfig, SemanticPathService, UrlCommand, I18nTestingModule } from '@spartacus/core';\nimport { StoreModule } from '@ngrx/store';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n\nconst mockBannerData: CmsBannerComponent = {\n  urlLink: 'https://testing.com/logo',\n};\n\nconst data$: BehaviorSubject<CmsBannerComponent> = new BehaviorSubject(\n  mockBannerData\n);\n\nclass MockCmsComponentData {\n  get data$(): Observable<CmsBannerComponent> {\n    return data$.asObservable();\n  }\n}\n\n\nclass MockSemanticPathService {\n  transform(test: UrlCommand): any[] {\n    return test.params.code ?? test.cxRoute;\n  }\n}\n\n\ndescribe('FullWidthSliderItemComponent', () => {\n  let bannerComponent: FullWidthSliderItemComponent;\n  let fixture: ComponentFixture<FullWidthSliderItemComponent>;\n  \n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ FullWidthSliderItemComponent, GenericLinkComponent ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), UrlModule, I18nTestingModule],\n      providers: [\n        {\n          provide: CmsComponentData,\n          useClass: MockCmsComponentData,\n        },\n        { provide: CmsService, useValue: {} },\n        { provide: SemanticPathService, useClass: MockSemanticPathService },\n        {\n          provide: FeaturesConfig,\n          useValue: {\n            features: { level: '6.3' },\n          },\n        },\n      ],\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(FullWidthSliderItemComponent);\n    bannerComponent = fixture.componentInstance;\n    bannerComponent.item = mockBannerData;\n    \n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(bannerComponent).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/homepage/full-width-slider-item/full-width-slider-item.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                876,
                879
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                876,
                879
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1060,
                1063
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1060,
                1063
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1932,
                1935
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1932,
                1935
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, Input, OnInit, ViewChild, ElementRef, OnDestroy, HostListener, Output, EventEmitter } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core/src/model';\nimport { BannerComponent } from '@spartacus/storefront';\nimport { timer } from 'rxjs';\ninterface CMSBannerComponentCustom extends CmsBannerComponent {\n  theme?: string;\n  animationScale?: number;\n  animationSpeed?: number;\n}\n\n@Component({\n  selector: 'atcpps-full-width-slider-item',\n  templateUrl: './full-width-slider-item.component.html',\n  styleUrls: ['./full-width-slider-item.component.scss']\n})\nexport class FullWidthSliderItemComponent extends BannerComponent implements OnInit, OnDestroy {\n  @ViewChild('bannerImage') bannerImage: ElementRef<HTMLElement>;\n  @Output() hideParentLoader = new EventEmitter<boolean>();\n  animationScale: number;\n  theme: string;\n  subscription: any;\n  public showLoader = true;\n  @Input() item: CMSBannerComponentCustom;\n  ngOnInit(): void {\n    this.setRouterLink(this.item);\n    this.subscription = this.data$.subscribe((data: any) => {\n      this.animationScale = parseInt(data?.animationScale);\n      this.theme = data?.effect;\n      (this.theme && this.theme != 'DARK' && this.theme != 'LIGHT') && (this.theme = 'DARK')\n    })\n  }\n  // following section is added to prevent the display issue which is occuring if the\n  // viewport quickly switched from responsive mode to desktop view\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    timer(100).subscribe(() => this.adjustContenAndShadowRootStyle());\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n  private adjustContenAndShadowRootStyle() {\n    // This code block is required to set the position of banner content as\n    // the position of the banner cannot be made as 'absolute' so there isno way\n    // to provide the position as percentage only calculative position can be given\n    const bannerContent: any = (this.bannerImage.nativeElement.getElementsByClassName('banner-content'))[0];\n    const bannerImage: HTMLImageElement = (this.bannerImage.nativeElement.getElementsByTagName('img'))[0];\n    const applyStyle = (bannerImage: HTMLImageElement) => {\n      this.stopLoader();\n      if (bannerContent) {\n        bannerContent.style.bottom = (bannerImage.height / 1.5) + \"px\";\n        bannerContent.style.display = 'block';\n      }\n    }\n    // checking if the image is actually loaded in DOM tree or not\n    if (bannerImage.clientHeight == 0) {\n      // image is not loaded yet to dom tree applying a bit more delay\n      timer(100).subscribe(() => {\n        applyStyle(bannerImage);\n      });\n    } else {\n      applyStyle(bannerImage);\n    }\n  }\n  applyScalingAnimation(): void {\n    const bannerImage: HTMLImageElement = (this.bannerImage.nativeElement.getElementsByTagName('img'))[0];\n    // Following timer is added to start the animation after a fixed delay as per mention in ATCMBRDI-109\n    timer(100).subscribe(() => {\n      bannerImage.setAttribute('style',\n        `\n      width: 100%;\n      transform: scale(${(1 + (this.animationScale / 100))});\n      transition: all 8000ms ease-in-out;\n    `);\n      this.adjustContenAndShadowRootStyle();\n    });\n  }\n  stopLoader() {\n    this.showLoader = false;\n    this.hideParentLoader.emit(false);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/homepage/multi-banner/multi-banner.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                828,
                831
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                828,
                831
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component } from '@angular/core';\nimport { CmsService } from '@spartacus/core';\nimport { ContentSlotComponentData, CmsBannerCarouselComponent as model } from '@spartacus/core';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'atcpps-multi-banner',\n  templateUrl: './multi-banner.component.html',\n  styleUrls: ['./multi-banner.component.scss']\n})\nexport class MultiBannerComponent {\n\n  componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter((data) => Boolean(data))\n  );\n\n  items$: Observable<Observable<ContentSlotComponentData>[]> =\n    this.componentData$.pipe(\n      map((data) => data.banners?.trim().split(' ') ?? []),\n      map((codes) => {\n        return codes.map((code: any) => this.cmsService.getComponentData(code))\n      }\n      )\n    );\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) { }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/homepage/responsive-banner/responsive-banner.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1281,
                1284
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1281,
                1284
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { ResponsiveBannerComponent } from './responsive-banner.component';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { CmsService, CmsBannerComponent, PageContext, Page, UrlCommand, SemanticPathService, FeaturesConfig, I18nTestingModule } from '@spartacus/core';\nimport { StoreModule } from '@ngrx/store';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nconst mockBannerData: CmsBannerComponent = {\n  uid: 'SiteLogoComponent',\n  typeCode: 'SimpleBannerComponent',\n  name: 'Site Logo Component',\n  container: 'false',\n  external: 'false',\n  media: {\n    code: '/images/theme/logo_hybris.jpg',\n    mime: 'image/svg+xml',\n    altText: 'hybris Accelerator',\n    url: '/medias/logo-hybris.jpg',\n  },\n  urlLink: '/logo',\n};\n\nconst data$: BehaviorSubject<CmsBannerComponent> = new BehaviorSubject(\n  mockBannerData\n);\n\nclass MockCmsComponentData {\n  get data$(): Observable<CmsBannerComponent> {\n    return data$.asObservable();\n  }\n}\n\nclass MockCmsService {\n  getPage(pageContext: PageContext): Observable<Page> {\n    return of({ label: `${pageContext.id}` });\n  }\n}\n\nclass MockSemanticPathService {\n  transform(test: UrlCommand): any[] {\n    return test.params.code ?? test.cxRoute;\n  }\n}\n\ndescribe('ResponsiveBannerComponent', () => {\n  let component: ResponsiveBannerComponent;\n  let fixture: ComponentFixture<ResponsiveBannerComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ ResponsiveBannerComponent ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), I18nTestingModule],\n      providers: [\n        {\n          provide: CmsComponentData,\n          useClass: MockCmsComponentData,\n        },\n        { provide: CmsService, useClass: MockCmsService },\n        { provide: SemanticPathService, useClass: MockSemanticPathService },\n        {\n          provide: FeaturesConfig,\n          useValue: {\n            features: { level: '6.3' },\n          },\n        },\n      ],\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(ResponsiveBannerComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/homepage/tile-banner/tile-banner.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1142,
                1145
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1142,
                1145
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { TileBannerComponent } from './tile-banner.component';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { SemanticPathService, CmsService, UrlCommand, FeaturesConfig, CmsBannerComponent} from '@spartacus/core';\nimport { StoreModule } from '@ngrx/store';\nimport { BehaviorSubject, EMPTY } from 'rxjs';\nimport { I18nTestingModule } from '@spartacus/core';\n\nconst mockBannerData: CmsBannerComponent = {\n  uid: 'SiteLogoComponent',\n  typeCode: 'SimpleBannerComponent',\n  name: 'Site Logo Component',\n  container: 'false',\n  external: 'false',\n  media: {\n    code: '/images/theme/logo_hybris.jpg',\n    mime: 'image/svg+xml',\n    altText: 'hybris Accelerator',\n    url: '/medias/logo-hybris.jpg',\n  },\n  urlLink: 'https://testing.com/logo',\n};\n\nconst data$: BehaviorSubject<CmsBannerComponent> = new BehaviorSubject(\n  mockBannerData\n);\nclass MockCmsComponentData {\n  get data$() {\n    return data$.asObservable();\n  }\n}\n\nclass MockCmsService {\n  getComponentData() {\n    return EMPTY;\n  }\n}\n\nclass MockSemanticPathService {\n  transform(test: UrlCommand): any[] {\n    return test.params.code ?? test.cxRoute;\n  }\n}\n\nconst mockCmsBannerData: CmsBannerComponent = {\n  urlLink: 'https://testing.com/logo',\n};\n\n\ndescribe('TileBannerComponent', () => {\n  let component: TileBannerComponent;\n  let fixture: ComponentFixture<TileBannerComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ TileBannerComponent ],\n      imports: [StoreModule.forRoot({}), I18nTestingModule],\n      providers: [\n        {\n          provide: CmsComponentData,\n          useClass : MockCmsComponentData,\n        },\n        { provide: CmsService, useClass: MockCmsService },\n        { provide: SemanticPathService, useClass: MockSemanticPathService },\n        {\n          provide: FeaturesConfig,\n          useValue: {\n            features: { level: '6.3' },\n          },\n        },\n      ],\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(TileBannerComponent);\n    component = fixture.componentInstance;\n    component.items = mockCmsBannerData;\n    fixture.detectChanges();\n  });\n  afterEach(() => {   TestBed.resetTestingModule(); });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/navigation/custom-navigation/custom-navigation.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                480,
                483
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                480,
                483
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomNavigationComponent } from './custom-navigation.component';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { CmsService, CmsNavigationComponent } from '@spartacus/core';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\n\nconst mockCmsComponentData = <CmsNavigationComponent>{\n  styleClass: 'footer-styling',\n};\n\nconst MockCmsNavigationComponent = <CmsComponentData<any>>{\n  data$: of(mockCmsComponentData),\n};\n\ndescribe('CustomNavigationComponent', () => {\n  let component: CustomNavigationComponent;\n  let fixture: ComponentFixture<CustomNavigationComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomNavigationComponent ],\n      providers: [\n        { provide: CmsComponentData, useValue: MockCmsNavigationComponent },\n        { provide: CmsService, useValue: {} },\n        { provide: Store, useValue: {} }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomNavigationComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/order-confirmation/custom-order-confirmation-thank-you-message/custom-order-confirmation-thank-you-message.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 92,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 92,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2483,
                2486
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2483,
                2486
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomOrderConfirmationThankYouMessageComponent } from './custom-order-confirmation-thank-you-message.component';\nimport { I18nTestingModule, RoutingService, GlobalMessageService, TranslationService } from '@spartacus/core';\nimport { UserAuthService } from 'src/app/features/user/services/user-auth.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrderDetailsService } from '@spartacus/order/components';\nimport { Order, OrderFacade, OrderHistoryFacade } from '@spartacus/order/root';\nimport createSpy = jasmine.createSpy;\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nconst mockOrderData: Order = {\n  code: '1',\n  statusDisplay: 'Shipped',\n  deliveryAddress: {\n    firstName: 'John',\n    lastName: 'Smith',\n    line1: 'Buckingham Street 5',\n    line2: '1A',\n    phone: '(+11) 111 111 111',\n    postalCode: 'MA8902',\n    town: 'London',\n    country: {\n      isocode: 'UK',\n    },\n  },\n  deliveryMode: {\n    name: 'Standard order-detail-shipping',\n    description: '3-5 days',\n    isApplicableForCart: false\n  },\n  paymentInfo: {\n    accountHolderName: 'John Smith',\n    cardNumber: '************6206',\n    expiryMonth: '12',\n    expiryYear: '2026',\n    cardType: {\n      name: 'Visa',\n    },\n    billingAddress: {\n      firstName: 'John',\n      lastName: 'Smith',\n      line1: 'Buckingham Street 5',\n      line2: '1A',\n      phone: '(+11) 111 111 111',\n      postalCode: 'MA8902',\n      town: 'London',\n      country: {\n        isocode: 'UK',\n      },\n    },\n  },\n};\n\nconst mockOrder = {\n  code: 'test-code-412',\n  guid: 'guid',\n  guestCustomer: true,\n  paymentInfo: { billingAddress: { email: 'test@test.com' } },\n};\n\nclass MockOrderFacade implements Partial<OrderFacade> {\n  getOrderDetails = createSpy().and.returnValue(of(mockOrder));\n}\n\nclass MockOrderHistoryFacade implements Partial<OrderHistoryFacade> {\n  getOrderDetails(): Observable<Order> {\n    return of(mockOrderData);\n  }\n  loadOrderDetails(): void { return }\n  clearOrderDetails(): void { return }\n}\n\nclass MockTranslationService {\n  translate = createSpy().and.returnValue(of('testMessage'));\n}\n\nconst mockRouter = {\n  state: {\n    url: '/',\n    queryParams: {},\n    params: {\n      orderCode: '1',\n    },\n    cmsRequired: false,\n  },\n};\n\nconst routerSubject = new BehaviorSubject<{ state: object }>(mockRouter);\n\nclass MockRoutingService implements Partial<RoutingService> {\n  getRouterState(): Observable<any> {\n    return routerSubject.asObservable();\n  }\n}\n\ndescribe('CustomOrderConfirmationThankYouMessageComponent', () => {\n  let component: CustomOrderConfirmationThankYouMessageComponent;\n  let fixture: ComponentFixture<CustomOrderConfirmationThankYouMessageComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomOrderConfirmationThankYouMessageComponent ],\n      imports:[I18nTestingModule],\n      providers: [\n        { provide: GlobalMessageService, useValue: {} },\n        { provide: TranslationService, useValue: {}},\n        { provide: UserAuthService, useValue: {}},\n        { provide: ActivatedRoute, useValue: {}},\n        OrderDetailsService,\n        { provide: OrderFacade, useClass: MockOrderFacade },\n        {\n          provide: OrderHistoryFacade,\n          useClass: MockOrderHistoryFacade,\n        },\n        { provide: TranslationService, useClass: MockTranslationService },\n        {\n          provide: RoutingService,\n          useClass: MockRoutingService,\n        },\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomOrderConfirmationThankYouMessageComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/order-details/custom-order-details-actions/custom-order-details-actions.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 85,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 85,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2191,
                2194
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2191,
                2194
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomOrderDetailsActionsComponent } from './custom-order-details-actions.component';\nimport { RoutingService, UrlModule, I18nTestingModule } from '@spartacus/core';\nimport { OrderDetailsService } from '@spartacus/order/components';\nimport { Order, OrderFacade, OrderHistoryFacade } from '@spartacus/order/root';\nimport createSpy = jasmine.createSpy;\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nconst mockOrderData: Order = {\n  code: '1',\n  statusDisplay: 'Shipped',\n  deliveryAddress: {\n    firstName: 'John',\n    lastName: 'Smith',\n    line1: 'Buckingham Street 5',\n    line2: '1A',\n    phone: '(+11) 111 111 111',\n    postalCode: 'MA8902',\n    town: 'London',\n    country: {\n      isocode: 'UK',\n    },\n  },\n  deliveryMode: {\n    name: 'Standard order-detail-shipping',\n    description: '3-5 days',\n    isApplicableForCart: false\n  },\n  paymentInfo: {\n    accountHolderName: 'John Smith',\n    cardNumber: '************6206',\n    expiryMonth: '12',\n    expiryYear: '2026',\n    cardType: {\n      name: 'Visa',\n    },\n    billingAddress: {\n      firstName: 'John',\n      lastName: 'Smith',\n      line1: 'Buckingham Street 5',\n      line2: '1A',\n      phone: '(+11) 111 111 111',\n      postalCode: 'MA8902',\n      town: 'London',\n      country: {\n        isocode: 'UK',\n      },\n    },\n  },\n};\n\nconst mockOrder = {\n  code: 'test-code-412',\n  guid: 'guid',\n  guestCustomer: true,\n  paymentInfo: { billingAddress: { email: 'test@test.com' } },\n};\nclass MockOrderFacade implements Partial<OrderFacade> {\n  getOrderDetails = createSpy().and.returnValue(of(mockOrder));\n}\n\nclass MockOrderHistoryFacade implements Partial<OrderHistoryFacade> {\n  getOrderDetails(): Observable<Order> {\n    return of(mockOrderData);\n  }\n  loadOrderDetails(): void { return}\n  clearOrderDetails(): void { return}\n}\n\nconst mockRouter = {\n  state: {\n    url: '/',\n    queryParams: {},\n    params: {\n      orderCode: '1',\n    },\n    cmsRequired: false,\n  },\n};\n\nconst routerSubject = new BehaviorSubject<{ state: object }>(mockRouter);\n\nclass MockRoutingService implements Partial<RoutingService> {\n  getRouterState(): Observable<any> {\n    return routerSubject.asObservable();\n  }\n}\n\ndescribe('CustomOrderDetailsActionsComponent', () => {\n  let component: CustomOrderDetailsActionsComponent;\n  let fixture: ComponentFixture<CustomOrderDetailsActionsComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomOrderDetailsActionsComponent ],\n      imports:[I18nTestingModule, UrlModule],\n      providers: [\n        {\n          provide: RoutingService,\n          useClass: MockRoutingService,\n        },\n        OrderDetailsService,\n        { provide: OrderFacade, useClass: MockOrderFacade },\n        {\n          provide: OrderHistoryFacade,\n          useClass: MockOrderHistoryFacade,\n        },\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomOrderDetailsActionsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/order-details/custom-order-overview/custom-order-overview.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 2,
        "column": 24,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 2,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                86,
                112
              ],
              "text": "(isOrderLoading$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                86,
                112
              ],
              "text": "(isOrderLoading$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                86,
                112
              ],
              "text": "(isOrderLoading$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      },
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 3,
        "column": 17,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 3,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                131,
                149
              ],
              "text": "(simple$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                131,
                149
              ],
              "text": "(simple$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                131,
                149
              ],
              "text": "(simple$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<div class=\"cx-order-summary\" *ngIf=\"order$ | async as order\">\n  <ng-container *ngIf=\"!(isOrderLoading$ | async)\">\n    <div *ngIf=\"!(simple$ | async)\" class=\"container\">\n      <ng-container *ngIf=\"order.replenishmentOrderCode; else otherOrder\">\n        <div class=\"cx-summary-card\">\n          <cx-card\n            [content]=\"\n              getReplenishmentCodeCardContent(order?.replenishmentOrderCode)\n                | async\n            \"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"getReplenishmentActiveCardContent(order?.active) | async\"\n          ></cx-card>\n        </div>\n\n        <div class=\"cx-summary-card\">\n          <cx-card\n            [content]=\"\n              getReplenishmentStartOnCardContent(order?.firstDate | cxDate)\n                | async\n            \"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"\n              getReplenishmentFrequencyCardContent(\n                order?.trigger?.displayTimeTable\n              ) | async\n            \"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"\n              getReplenishmentNextDateCardContent(\n                order?.trigger?.activationTime | cxDate\n              ) | async\n            \"\n          ></cx-card>\n        </div>\n      </ng-container>\n\n      <ng-template #otherOrder>\n        <div class=\"cx-summary-card\">\n          <cx-card\n            [content]=\"getOrderCodeCardContent(order?.code) | async\"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"\n              getOrderCurrentDateCardContent(order?.created | cxDate) | async\n            \"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"getOrderStatusCardContent(order.statusDisplay) | async\"\n          ></cx-card>\n        </div>\n      </ng-template>\n\n      <ng-container\n        *ngIf=\"order.purchaseOrderNumber || order.purchaseOrderNumber === ''\"\n      >\n        <div class=\"cx-summary-card\">\n          <cx-card\n            [content]=\"\n              getPurchaseOrderNumber(order?.purchaseOrderNumber) | async\n            \"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"getMethodOfPaymentCardContent(order.paymentInfo) | async\"\n          ></cx-card>\n\n          <ng-container *ngIf=\"order.costCenter\">\n            <cx-card\n              [content]=\"getCostCenterCardContent(order?.costCenter) | async\"\n            ></cx-card>\n          </ng-container>\n        </div>\n      </ng-container>\n\n      <div class=\"cx-summary-card\">\n        <ng-container *ngIf=\"order.deliveryAddress\">\n          <cx-card\n            [content]=\"getAddressCardContent(order?.deliveryAddress) | async\"\n          ></cx-card>\n        </ng-container>\n\n        <ng-container *ngIf=\"order.deliveryMode\">\n          <cx-card\n            [content]=\"getDeliveryModeCardContent(order?.deliveryMode) | async\"\n          ></cx-card>\n        </ng-container>\n      </div>\n\n      <ng-container *ngIf=\"order.paymentInfo\">\n        <div class=\"cx-summary-card\">\n          <cx-card\n            [content]=\"getPaymentInfoCardContent(order?.paymentInfo) | async\"\n          ></cx-card>\n\n          <cx-card\n            [content]=\"\n              getBillingAddressCardContent(order?.paymentInfo?.billingAddress)\n                | async\n            \"\n          ></cx-card>\n        </div>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"simple$ | async\" class=\"container\">\n      <div class=\"cx-order-details-cards\">\n        <cx-card\n          [content]=\"getOrderCodeCardContent(order?.code) | async\"\n        ></cx-card>\n\n        <cx-card\n          [content]=\"\n            getOrderCurrentDateCardContent(order?.created | cxDate) | async\n          \"\n        ></cx-card>\n\n        <cx-card\n          [content]=\"getOrderStatusCardContent(order.statusDisplay) | async\"\n        ></cx-card>\n      </div>\n      <cx-order-detail-billing></cx-order-detail-billing>\n    </div>\n  </ng-container>\n</div>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/order-details/custom-order-overview/custom-order-overview.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                834,
                837
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                834,
                837
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1452,
                1455
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1452,
                1455
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomOrderOverviewComponent } from './custom-order-overview.component';\nimport { SiteContextParamsService, CmsOrderDetailOverviewComponent, TranslationService, RoutingService } from '@spartacus/core';\nimport { OrderDetailsService } from '@spartacus/order/components';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { CustomCheckoutService } from 'src/app/features/checkout/services/custom-checkout.service';\nimport { OrderFacade } from '@spartacus/order/root';\nimport createSpy = jasmine.createSpy;\n\nconst mockData: CmsOrderDetailOverviewComponent = {\n  simple: false,\n};\n\nconst MockCmsComponentData = <CmsComponentData<any>>{\n  data$: of(mockData),\n};\n\nconst mockOrder = {\n  code: 'test-code-412',\n  guid: 'guid',\n  guestCustomer: true,\n  paymentInfo: { billingAddress: { email: 'test@test.com' } },\n};\nclass MockOrderFacade implements Partial<OrderFacade> {\n  getOrderDetails = createSpy().and.returnValue(of(mockOrder));\n}\n\nconst mockRouter = {\n  state: {\n    url: '/',\n    queryParams: {},\n    params: {\n      orderCode: '1',\n    },\n    cmsRequired: false,\n  },\n};\n\nconst routerSubject = new BehaviorSubject<{ state: object }>(mockRouter);\n\nclass MockRoutingService implements Partial<RoutingService> {\n  getRouterState(): Observable<any> {\n    return routerSubject.asObservable();\n  }\n}\n\ndescribe('CustomOrderOverviewComponent', () => {\n  let component: CustomOrderOverviewComponent;\n  let fixture: ComponentFixture<CustomOrderOverviewComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomOrderOverviewComponent ],\n      providers: [\n        { provide: TranslationService, useValue: {} },\n        OrderDetailsService,\n        { provide: OrderFacade, useClass: MockOrderFacade },\n        {\n          provide: RoutingService,\n          useClass: MockRoutingService,\n        },\n        { provide: CmsComponentData, useValue: MockCmsComponentData },\n        UtilService,\n        { provide: SiteContextParamsService, useValue: {} },\n        { provide: CustomCheckoutService, useValue: ''}\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomOrderOverviewComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/returns/custom-auth-guard/custom-auth-guard.guard.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1085,
                1088
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1085,
                1088
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { TestBed } from '@angular/core/testing';\n\nimport { CustomAuthGuardGuard } from './custom-auth-guard.guard';\nimport { AuthService } from '@spartacus/core';\nimport { Observable, EMPTY, BehaviorSubject } from 'rxjs';\nimport { AuthRedirectService } from '@spartacus/core';\nimport { RoutingService } from '@spartacus/core';\nimport { CustomOrderReturnService } from '../../../services/custom-order-return.service';\nimport { UserAuthService } from 'src/app/features/user/services/user-auth.service';\n\nclass AuthServiceStub implements Partial<AuthService> {\n  isUserLoggedIn(): Observable<boolean> {\n    return EMPTY;\n  }\n}\n\nconst mockRouter = {\n  state: {\n    url: '/',\n    queryParams: {},\n    params: {\n      orderCode: '1',\n    },\n    cmsRequired: false,\n  },\n};\nclass MockAuthRedirectService implements Partial<AuthRedirectService> {\n  saveCurrentNavigationUrl = jasmine.createSpy('saveCurrentNavigationUrl');\n}\n\nconst routerSubject = new BehaviorSubject<{ state: object }>(mockRouter);\nclass MockRoutingService implements Partial<RoutingService> {\n  getRouterState(): Observable<any> {\n    return routerSubject.asObservable();\n  }\n}\n\ndescribe('CustomAuthGuardGuard', () => {\n  let guard: CustomAuthGuardGuard;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers:[\n        {\n          provide: AuthService,\n          useClass: AuthServiceStub,\n        },\n        {\n          provide: AuthRedirectService,\n          useClass: MockAuthRedirectService,\n        },\n        {\n          provide: RoutingService,\n          useClass: MockRoutingService,\n        },\n        {\n          provide: CustomOrderReturnService,\n          useValue: ''\n        },\n        { provide: UserAuthService, useValue:''}\n      ]\n    });\n    guard = TestBed.inject(CustomAuthGuardGuard);\n  });\n\n  it('should be created', () => {\n    expect(guard).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/returns/custom-guest-return/custom-guest-return.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                808,
                811
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                808,
                811
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomGuestReturnComponent } from './custom-guest-return.component';\nimport { RoutingService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CustomOrderReturnService } from '../../../services/custom-order-return.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { I18nTestingModule } from '@spartacus/core';\nimport { GlobalMessageService } from '@spartacus/core';\n\nconst mockRouter = {\n  state: {\n    url: '/',\n    queryParams: {},\n    params: {\n      orderCode: '1',\n    },\n    cmsRequired: false,\n  },\n};\n\nconst routerSubject = new BehaviorSubject<{ state: object }>(mockRouter);\nclass MockRoutingService implements Partial<RoutingService> {\n  getRouterState(): Observable<any> {\n    return routerSubject.asObservable();\n  }\n}\n\nclass MockActivatedRoute {\n  getSnapshot = jasmine.createSpy('getSnapshot');\n  get snapshot() {\n    return this.getSnapshot();\n  }\n}\n\ndescribe('CustomGuestReturnComponent', () => {\n  let component: CustomGuestReturnComponent;\n  let fixture: ComponentFixture<CustomGuestReturnComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomGuestReturnComponent ],\n      imports:[I18nTestingModule],\n      providers:[\n        {\n          provide: RoutingService,\n          useClass: MockRoutingService,\n        },\n        {\n          provide: CustomOrderReturnService,\n          useValue: ''\n        },\n        {provide: ActivatedRoute, useClass: MockActivatedRoute},\n        {provide: GlobalMessageService, useValue:''}\n      ],\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomGuestReturnComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/returns/custom-guest-return/custom-guest-return.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1742,
                1745
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1742,
                1745
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport {\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, GlobalMessageService, GlobalMessageType } from '@spartacus/core';\nimport { CustomOrderReturnService } from '../../../services/custom-order-return.service';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'atcpps-custom-guest-return',\n  templateUrl: './custom-guest-return.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomGuestReturnComponent implements OnInit {\n  email: string;\n  orderId: string;\n  isGuest = false;\n  apiSuccess = false;\n  errorType = '';\n  guestOrderReturnForm: UntypedFormGroup;\n\n  constructor(\n    protected formBuilder: UntypedFormBuilder,\n    private _routing: RoutingService,\n    private _customOrderReturnService: CustomOrderReturnService,\n    private cdr: ChangeDetectorRef,\n    private route: ActivatedRoute,\n    private globalMessageService: GlobalMessageService,\n  ) { \n  }\n  ngOnInit() {\n    this.orderId = this.route.snapshot?.queryParams['orderCode'];\n    this.email = this.route.snapshot?.queryParams['email'];\n    this.guestOrderReturnForm = this.formBuilder.group({\n      orderId: [this.orderId, [Validators.required]],\n      email: [this.email, [Validators.required, Validators.email]],\n    });\n    if(this.orderId && this.email) {\n      this.validateOrder(this.orderId, this.email);\n    }\n  }\n\nvalidateOrder(orderId:string, email:string) {\n this._customOrderReturnService.verifyReturnOrder(orderId, email).pipe(\n    tap((verificationResult: any) => {\n      \n      if (verificationResult.guid) {\n        this._customOrderReturnService.isGuest = true;\n        this._customOrderReturnService.setIncludeCustomAuthGuard(this._customOrderReturnService.isGuest);\n        this._customOrderReturnService.storeGuid(\n          verificationResult.user,\n          verificationResult.guid\n        );\n        this._customOrderReturnService.setIncludeGuestReturnOrder(orderId, email);\n        this.apiSuccess = !this.apiSuccess;\n        this.cdr.detectChanges();\n      }\n      \n    }),\n    catchError((error) => {\n      if (error) {\n        this.errorType = error?.error?.errors[0]?.subject;\n        this.cdr.detectChanges();\n        this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      }\n     return throwError(error);\n    })\n  ).subscribe();\n}\n\n  onSubmit() {\n    if (this.guestOrderReturnForm.valid) {\n    const orderId =  this.guestOrderReturnForm.get('orderId')?.value;\n     const email = this.guestOrderReturnForm.get('email')?.value;\n    \n    if(this.orderId === undefined && this.email === undefined) {\n        this.validateOrder(orderId, email);\n      }\n    if(this.apiSuccess){\n      const code = orderId;\n      this._routing.go({\n        cxRoute: 'guestReturnOrder',\n        params: { code },\n      });\n    }\n    \n      if(this.errorType === 'REGISTERED_USER_ORDER') {\n        const code = orderId;\n        this._routing.go({\n          cxRoute: 'orderReturn',\n         params: { code },\n        });\n      }\n    }\n}\nclearErrors() {\n  this.errorType = '';\n}\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/components/returns/custom-return-order-confirmation/custom-return-order-confirmation.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                469,
                472
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                469,
                472
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@angular-eslint/use-lifecycle-interface",
        "severity": 1,
        "message": "Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)",
        "line": 27,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "useLifecycleInterface",
        "endLine": 27,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                990,
                993
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                990,
                993
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1167,
                1170
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1167,
                1170
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { DatePipe } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { OrderReturnRequestFacade } from '@spartacus/order/root';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '@spartacus/core';\n\n@Component({\n  selector: 'atcpps-custom-return-order-confirmation',\n  templateUrl: './custom-return-order-confirmation.component.html',\n  providers: [DatePipe]\n})\nexport class CustomReturnOrderConfirmationComponent {\n  return$:any\n  currentDate: Date = new Date();\n  returnStatus: string;\n\n  constructor(protected returnRequestService: OrderReturnRequestFacade,\n    private datePipe: DatePipe,\n    protected routingService: RoutingService,) {\n      this.currentDate = new Date();\n    }\n\n    capitalizeWords(text: string): string {\n      return text.toLowerCase().replace(/(^|\\s)\\S/g, (match) => match.toUpperCase());\n    }\n  \n  ngOnInit() {\n  this.return$ = this.returnRequestService\n      .getOrderReturnRequest().pipe(\n        map((returnRequest:any) => {\n          this.returnStatus = this.capitalizeWords(returnRequest.status.replace(/_/g, ' '))\n          return returnRequest;\n        })\n      )\n  }\n\n  formattedDate(): any {\n    return this.datePipe.transform(this.currentDate, 'MMMM dd, yyyy');\n  }\n\n  back(): void {\n    this.routingService.go(\n      { cxRoute: 'orders' },\n      {\n        state: {\n          activeTab: 1,\n        },\n      }\n    );\n  }\n}\n\n\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/order/services/custom-order-return.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                984,
                987
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                984,
                987
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2390,
                2393
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2390,
                2393
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3540,
                3543
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3540,
                3543
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Store } from '@ngrx/store';\nimport { RoutingService, GlobalMessageService } from '@spartacus/core';\nimport { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '@spartacus/core';\nimport { OrderDetailsService, OrderReturnService } from '@spartacus/order/components';\nimport { OrderActions, StateWithOrder } from '@spartacus/order/core';\nimport { CancelOrReturnRequestEntryInput, OrderReturnRequestFacade, ReturnRequestEntryInputList } from '@spartacus/order/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { OccGuestReturnOrderAdapter } from '../occ/adapter/occ-guest-order-return-adapter';\nimport { GuestOrderReturn, userData } from '../../product/models/mb.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomOrderReturnService extends OrderReturnService {\n\n  isGuest = false;\n  guestOrderCode:GuestOrderReturn;\n  guestGuid: string;\n\n  private dataSubject = new BehaviorSubject<any>({ data: '', guid: '' });\n  public data$: Observable<userData> = this.dataSubject.asObservable();\n  \n\n  storeGuid(data: userData, guid:string) {\n    this.dataSubject?.next({data, guid});\n  }\n\n  private includeGuestReturnOrder = new BehaviorSubject<GuestOrderReturn> ({orderId: '', email: ''})\n  public includeGuestReturnOrder$: Observable<GuestOrderReturn> = this.includeGuestReturnOrder.asObservable();\n\n  setIncludeGuestReturnOrder(orderId: string, email: string):void {\n    this.includeGuestReturnOrder?.next({orderId, email});\n  }\n\n  private _includeCustomAuthGuard = new BehaviorSubject<boolean>(false);\n  includePocCustomGuard$ = this._includeCustomAuthGuard.asObservable();\n\n  setIncludeCustomAuthGuard(value: boolean): void {\n    this._includeCustomAuthGuard?.next(value);\n  }\n\n  constructor(\n    private _occGuestReturnOrderAdapter: OccGuestReturnOrderAdapter,\n    protected override orderDetailsService: OrderDetailsService,\n    protected override returnRequestService: OrderReturnRequestFacade,\n    protected override routing: RoutingService,\n    protected override globalMessageService: GlobalMessageService,\n    protected store: Store<StateWithOrder>,\n  ) {\n    super(orderDetailsService, returnRequestService, routing, globalMessageService);\n  }\n\n  override save(): void {\nthis.includeGuestReturnOrder$\n.pipe(\n  map((orderId: GuestOrderReturn) => orderId?.orderId)\n)\n.subscribe((orderId: any) => {\n  this.guestOrderCode = orderId;\n});\n    const orderCode = this.isGuest ? this.guestOrderCode : this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    if(this.isGuest) {\n      this.createGuestOrderReturnRequest({\n        orderCode,\n        returnRequestEntryInputs: inputs,\n      });\n    } else {\n      this.returnRequestService.createOrderReturnRequest({\n        orderCode,\n        returnRequestEntryInputs: inputs,\n      })\n    }\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSaves());\n  }\n\n  createGuestOrderReturnRequest(returnRequestInput: ReturnRequestEntryInputList) {\n    this.data$\n  .pipe(\n    map((uid: userData) => uid?.data?.uid)\n  )\n  .subscribe((id: any) => {\n    this.guestGuid = id.replace(/\\|/g, '%7c');\n  });\n       const userId = this.guestGuid;\n        this.store.dispatch(\n          new OrderActions.CreateOrderReturnRequest({\n            userId,\n            returnRequestInput,\n          })\n        );\n      }\n\n  afterSaves() {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnsubmitted',\n          params: { rma },\n        });\n      });\n  }\n\n  verifyReturnOrder(orderId:string, emailId:string) {\n    return this._occGuestReturnOrderAdapter.verifyGuestReturnOrder(orderId, emailId);\n  }\n\n  guestOrderDetails(userId: string, orderCode: string) {\n    return this._occGuestReturnOrderAdapter.guestOrderDetails(userId, orderCode)\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/pages/services/custom-occ-cms-page-adapter.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                701,
                704
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                701,
                704
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2608,
                2611
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2608,
                2611
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { OccCmsPageAdapter, PageContext, CmsStructureModel, CMS_PAGE_NORMALIZER, OccEndpointsService, ConverterService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { ActiveCartService } from '@spartacus/cart/base/core';\nimport { switchMap, take } from 'rxjs/operators';\nimport { PageParamsConfig } from '../config/page-params-config';\nimport { BrowserStorageService } from 'src/app/store/browser-storage.service';\nimport { StoreKeys } from 'src/app/store/store-keys';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomOccCmsPageAdapter extends OccCmsPageAdapter {\n  endpoint:any ='';\n  constructor(http: HttpClient,\n    occEndpoints: OccEndpointsService,\n    converter: ConverterService,\n    protected activeCartService: ActiveCartService,\n    private _browserStorageService: BrowserStorageService,) {\n    super(http, occEndpoints, converter);\n  }\n\n  override load(pageContext: PageContext): Observable<CmsStructureModel> {\n    const params = this.getPagesRequestParams(pageContext);\n    if (PageParamsConfig.cart.includes(params.pageLabelOrId as string)) {\n      return this.activeCartService.getActiveCartId().pipe(\n        take(1),\n        switchMap(cartId => {\n          if (cartId) {\n            this._browserStorageService.storeItem(StoreKeys.cartId, cartId)\n            this.endpoint = this._addContextToEndpoint(pageContext, params, cartId);\n          } else {\n            this.endpoint = this._addContextToEndpoint(pageContext, params, this._browserStorageService.readItem(StoreKeys.cartId) as string);\n            this._browserStorageService.deleteItem(StoreKeys.cartId);\n          }\n          return this.http\n            .get(this.endpoint, { headers: this.headers })\n            .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n        })\n      );\n    }\n    else if (PageParamsConfig.order.includes(params.pageLabelOrId as string)) {\n      const orderId: string = sessionStorage.getItem('orderId') as string;\n      sessionStorage.removeItem('orderId');\n      const endpoint = this._addContextToEndpoint(pageContext, params, orderId);\n      return this.http\n        .get(endpoint, { headers: this.headers })\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    } else {\n      const endpoint = this._addContextToEndpoint(pageContext, params);\n      return this.http\n        .get(endpoint, { headers: this.headers })\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n  }\n\n\n  private _addContextToEndpoint(pageContext: PageContext, params: any, contextId?: string): string {\n    if (contextId) params.code = contextId;\n    const endpoint = !pageContext.type\n      ? this.occEndpoints.buildUrl('page', {\n        urlParams: { id: pageContext.id },\n      })\n      : this.occEndpoints.buildUrl('pages', { queryParams: params });\n\n    return endpoint;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/converters/custom-occ-product-search-page-normalizer.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                793,
                796
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                793,
                796
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from \"@angular/core\";\nimport { ConverterService } from \"@spartacus/core\";\nimport { PRODUCT_NORMALIZER } from \"@spartacus/core\";\nimport { OccProductSearchPageNormalizer } from \"@spartacus/core\";\nimport { Converter, Occ, ProductSearchPage } from \"@spartacus/core\";\n\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class CustomOccProductSearchPageNormalizer extends OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage>{\n\n  constructor(\n    converterService: ConverterService,\n    public _converterService: ConverterService ) {\n      super(converterService)\n  }\n\n  override convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n    \n    this.normalizeFacet(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this._converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacet(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/custom-product-details-tab/custom-product-details-tab.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1460,
                1463
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1460,
                1463
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\n\nimport { CustomProductDetailsTabComponent } from './custom-product-details-tab.component';\nimport { CurrentProductService, CmsComponentData } from '@spartacus/storefront';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { CmsService, CmsComponentWithChildren } from '@spartacus/core';\n\nconst mockProduct = {\n  name: 'mockProduct'\n};\nconst mockCmsComponentWithChildren: CmsComponentWithChildren = {\n  name: 'Product Details Tab',\n  typeCode: 'CMSFlexComponent',\n  uid: 'testUid',\n  children: 'TestPDFComponent',\n};\n\nconst data$: BehaviorSubject<CmsComponentWithChildren> = new BehaviorSubject(\n  mockCmsComponentWithChildren\n);\n\nclass MockCmsComponentData {\n  get data$(): Observable<CmsComponentWithChildren> {\n    return data$.asObservable();\n  }\n}\n\nconst mockPDFComponent = {\n  ui: 'TestPDFComponent',\n  uuid: 'PDFComponent',\n  typeCode: 'PDFDocumentComponent',\n  name: 'TestPDFName',\n  container: false,\n  pdfFile: {\n    code: 'test-pdf',\n    mime: 'application/pdf',\n    url: '/medias/test.pdf?context=bWFzdGVyfGl',\n  },\n  synchronizationBlocked: false,\n  title: 'ProductDetails',\n  parents: 'ProductDetailsTabComponent',\n  height: '200',\n  modifiedTime: '2022-05-20T13:07:22.277Z',\n};\n\nclass MockCmsService {\n  getComponentData(component: string): Observable<any | null> {\n    if (component === 'TestPDFComponent') {\n      return of(mockPDFComponent);\n    }\n    return of(null);\n  }\n}\n\n\n\nclass MockCurrentProductService {\n  getProduct() {\n    return of(mockProduct);\n  }\n}\n\ndescribe('CustomProductDetailsTabComponent', () => {\n  let component: CustomProductDetailsTabComponent;\n  let fixture: ComponentFixture<CustomProductDetailsTabComponent>;\n\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [CustomProductDetailsTabComponent],\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\n        imports: [StoreModule.forRoot({})],\n        providers: [\n          {\n            provide: CurrentProductService,\n            useClass: MockCurrentProductService,\n          },\n          {\n            provide: CmsComponentData,\n            useClass: MockCmsComponentData,\n          },\n          {\n            provide: CmsService,\n            useClass: MockCmsService,\n          },\n        ],\n      }).compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CustomProductDetailsTabComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/models/mb.product.model.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 90,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 90,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2067,
                2070
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2067,
                2070
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  BaseOption,\n  Category,\n  Classification,\n  FutureStock,\n  Images,\n  Promotion,\n  Price,\n  PriceRange,\n  ProductReferences,\n  Review,\n  Stock,\n  VariantMatrixElement,\n  VariantOption,\n  VariantType,\n} from '@spartacus/core/src/model';\nimport { DSDAppointment } from '../../appointment-booking/models/appointment-booking.models';\n\n\nexport interface TrackingDetails {\n  id?: string;\n  name?: string;\n  type?: string;\n  brand?: string;\n  category?: string;\n  variantId?: string;\n  variantName?: string;\n  size?: string;\n  color?: string;\n}\n\nexport enum AddressType {\n  CHECKOUT = 'CHECKOUT',\n  ORDER = 'ORDER',\n}\n\nexport enum VariantQualifier {\n  TIREDIMENSION = 'tireDimension',\n}\n\nexport interface VariantOptionQualifier {\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\ndeclare module '@spartacus/core' {\n  interface Product {\n    availableForPickup?: boolean;\n    averageRating?: number;\n    baseOptions?: BaseOption[];\n    baseProduct?: string;\n    categories?: Category[];\n    classifications?: Classification[];\n    code?: string;\n    description?: string;\n    additionalDescription?: string;\n    futureStocks?: FutureStock[];\n    images?: Images;\n    manufacturer?: string;\n    multidimensional?: boolean;\n    name?: string;\n    /**\n     * The product slug is used to create pretty URL for links to product detail pages.\n     *\n     * The slug typically avoid spaces (`%20`) or other characters that are encoded in the URL.\n     */\n    slug?: string;\n    nameHtml?: string;\n\n    basePrice?: string;\n    subHeadline?: string;\n\n    materialSafetySheetUrl?: string;\n    numberOfReviews?: number;\n    potentialPromotions?: Promotion[];\n    price?: Price;\n    priceRange?: PriceRange;\n    productReferences?: ProductReferences;\n    purchasable?: boolean;\n    reviews?: Review[];\n    stock?: Stock;\n    summary?: string;\n    url?: string;\n    variantMatrix?: VariantMatrixElement[];\n    variantOptions?: VariantOption[];\n    variantType?: VariantType;\n    volumePrices?: Price[];\n    volumePricesFlag?: boolean;\n    careInstructions?: any[];\n    maxOrderQuantity?: number;\n    userManual?: object;\n    trackingDetails: TrackingDetails;\n    compatibilityCheck?: string;\n    sizeChartUrl: string;\n  }\n\n  interface OccEndpoints {\n    storeAppointmentOnCart?: string;\n    getAvailableDates?: string;\n    dealersList?: string;\n    getVehicleData?: string;\n    productCompatibilityCheck?: string;\n    compatibileProductSKU?: string;\n    updateEmail?: string;\n  }\n}\n\ndeclare module '@spartacus/cart/base/root' {\n  interface Cart {\n    appointment?: DSDAppointment;\n    emailAvailable?: boolean;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-asset-download/product-asset-download.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                643,
                646
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                643,
                646
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                743,
                746
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                743,
                746
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { ProductScope } from '@spartacus/core';\nimport { CmsComponentData, CurrentProductService } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'atcpps-product-asset-download',\n  templateUrl: './product-asset-download.component.html',\n  styleUrls: ['./product-asset-download.component.scss'],\n})\nexport class ProductAssetDownloadComponent {\n  product$: Observable<Product | null> = this.currentProductService.getProduct([\n    ProductScope.DETAILS,\n  ]);\n  constructor(\n    protected component: CmsComponentData<any>,\n    private currentProductService: CurrentProductService\n  ) {}\n\n  componentData$: Observable<any> = this.component.data$;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-carousel/carousel/carousel.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                895,
                898
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                895,
                898
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1400,
                1403
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1400,
                1403
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 62,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 62,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1895,
                1898
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1895,
                1898
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1994,
                1997
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1994,
                1997
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Product } from '@spartacus/core';\nimport { CarouselService } from '@spartacus/storefront';\nimport { CarouselComponent } from '@spartacus/storefront';\nimport { InViewportAction } from 'ng-in-viewport';\nimport { Subscription, zip } from 'rxjs';\nimport { CustomViewCarouselListService } from 'src/app/tracking/events/services/custom-view-carousel-list-event.service';\nimport { UtilService } from 'src/app/utilities/util.service';\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomCarouselComponent\n  extends CarouselComponent\n  implements OnInit, OnDestroy\n{\n  private subscription = new Subscription();\n  private loadedItems: any[] = [];\n  private seenProducts: { [productCode: string]: boolean } = {};\n  private visited = false;\n  private position: number;\n\n  constructor(\n    _el: ElementRef,\n    _service: CarouselService,\n    private utilService: UtilService,\n    private _winRef: WindowRef,\n    private _customViewCarouselListService: CustomViewCarouselListService\n  ) {\n    super(_el, _service);\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n    this.subscription.add(\n      zip(...this.items).subscribe((results: any) => {\n        this.loadedItems = results;\n      })\n    );\n    this.position =\n      this._winRef.document.getElementsByTagName('cx-carousel')?.length;\n  }\n\n  onIntersection(event: InViewportAction, size: number) {\n    if (event.visible && !this.visited) {\n      this.visited = true;\n      this.dispatchViewItemListEvent(\n        this.loadedItems.slice(this.activeSlide, this.activeSlide + size)\n      );\n    }\n  }\n\n  showNextSlide(activeSlide: number, size: number) {\n    const newProducts: any = [];\n    this.loadedItems\n      .slice(activeSlide, activeSlide + size)\n      .forEach((item: any) => {\n        const productCode = item.code;\n        if (!this.seenProducts[productCode]) {\n          this.seenProducts[productCode] = true;\n          newProducts.push(item);\n        }\n      });\n\n    if (newProducts.length) this.dispatchViewItemListEvent(newProducts);\n  }\n\n  private dispatchViewItemListEvent(products: Product[]) {\n    const title = this.utilService.toSnakeCase(this.title ? this.title : '');\n    this._customViewCarouselListService.dispatchCustomViewItemListEvent(\n      products,\n      title,\n      this.position,\n      this.loadedItems\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription?.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-carousel/carousel/carousel.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1723,
                1726
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1723,
                1726
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1918,
                1921
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1918,
                1921
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-carousel/custom-product-carousel-item/custom-product-carousel-item.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'componentInjector' is assigned a value but never used.",
        "line": 19,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\n\nimport { CustomProductCarouselItemComponent } from './custom-product-carousel-item.component';\nimport { CustomProductClickEventService } from '../../services/custom-product-click-event.service';\nimport { ProductListItemContextSource } from '@spartacus/storefront';\nimport { ProductService, I18nTestingModule, UrlModule } from '@spartacus/core';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { CUSTOM_ELEMENTS_SCHEMA, Injector } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nclass MockProductService {}\n\n\n\n\ndescribe('CustomProductCarouselItemComponent', () => {\n  let component: CustomProductCarouselItemComponent;\n  let fixture: ComponentFixture<CustomProductCarouselItemComponent>;\n  let componentInjector: Injector;\n  \n  \n\n  beforeEach(\n    waitForAsync (() => {\n    TestBed.configureTestingModule({\n      declarations: [ CustomProductCarouselItemComponent ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), I18nTestingModule,UrlModule],\n      providers: [\n        \n        { provide: CustomProductClickEventService, useValue: '' },\n        \n        { provide: ProductListItemContextSource, useValue: {} },\n        \n        {\n          provide: ProductService,\n          useClass: MockProductService,\n        },\n        \n        { provide: UtilService, useValue: {} }\n      ]\n    })\n    .compileComponents();\n\n})\n);\nconst mockProduct = {\n  name: 'Test product',\n  nameHtml: 'Test product',\n  summary: 'Test summary',\n  code: '1',\n  averageRating: 4.5,\n  stock: {\n    stockLevelStatus: 'inStock',\n  },\n  price: {\n    formattedValue: '$100,00',\n  },\n  images: {\n    PRIMARY: {},\n  },\n  trackingDetails:{},\n  sizeChartUrl:''\n  \n};\n\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CustomProductCarouselItemComponent);\n    component = fixture.componentInstance;\n    componentInjector = fixture.debugElement.injector;\n    component.item = mockProduct;\n    \n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-carousel/custom-product-carousel/custom-product-carousel.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                859,
                862
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                859,
                862
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { CustomProductCarouselComponent } from './custom-product-carousel.component';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { CmsProductCarouselComponent, I18nTestingModule } from '@spartacus/core';\nimport { of } from 'rxjs';\n\nconst productCodeArray: string[] = ['1', '2'];\nconst mockComponentData: CmsProductCarouselComponent = {\n  uid: '001',\n  typeCode: 'ProductCarouselComponent',\n  modifiedTime: new Date('2017-12-21T18:15:15+0000'),\n  popup: 'false',\n  productCodes: productCodeArray.join(' '),\n  scroll: 'ALLVISIBLE',\n  title: 'Mock Title',\n  name: 'Mock Product Carousel',\n  container: 'false',\n};\n\nconst MockCmsProductCarouselComponent = <CmsComponentData<any>>{\n  data$: of(mockComponentData),\n};\n\ndescribe('CustomProductCarouselComponent', () => {\n  let component: CustomProductCarouselComponent;\n  let fixture: ComponentFixture<CustomProductCarouselComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CustomProductCarouselComponent ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({}), I18nTestingModule],\n      providers: [\n        CmsComponentData,\n        { provide: CmsComponentData, useValue: MockCmsProductCarouselComponent },\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(CustomProductCarouselComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-list/container/product-scroll/custom-product-scroll.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 5,
        "column": 15,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 5,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                187,
                237
              ],
              "text": "(_productListComponentService.isLoading$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                187,
                237
              ],
              "text": "(_productListComponentService.isLoading$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                187,
                237
              ],
              "text": "(_productListComponentService.isLoading$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<ng-container *ngIf=\"viewMode === ViewModes.Grid\">\n  <div *ngIf=\"_productListComponentService.isLoading$ | async\" class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n  <div *ngIf=\"!(_productListComponentService.isLoading$ | async)\"\n    infiniteScroll\n    [infiniteScrollDistance]=\"5\"\n    [infiniteScrollThrottle]=\"50\"\n    [infiniteScrollDisabled]=\"isMaxProducts || isLastPage || isEmpty\"\n    (scrolled)=\"scrollPage((_productListComponentService.getCurrentPage() ?? 0) + 1)\"\n  >\n    <div class=\"row\">\n      <atcpps-product-grid-item\n          *ngFor=\"let product of model?.products; let i = index\"\n          [product]=\"product\"\n          [index]=\"i\"\n          class=\"col-12 col-sm-6 col-md-4\"\n        ></atcpps-product-grid-item>\n    </div>\n    <div\n      [className]=\"\n        !isLastPage && (_productListComponentService.getCurrentPage() ?? 0) > 0\n          ? 'cx-double-btn-container grid-btn-padding'\n          : 'cx-single-btn-container grid-btn-padding'\n      \"\n    >\n      <div\n        *ngIf=\"\n          (isMaxProducts || isLastPage) &&\n          (_productListComponentService.getCurrentPage() ?? 0) > 0\n        \"\n        (click)=\"scrollToTop()\"\n        class=\"btn btn-block btn-secondary\"\n      >\n        {{ 'productList.backToTopBtn' | cxTranslate }}\n      </div>\n      <div\n        *ngIf=\"isMaxProducts && !isLastPage\"\n        (click)=\"loadNextPage((_productListComponentService.getCurrentPage() ?? 0) + 1)\"\n        class=\"btn btn-block btn-secondary align-btn\"\n      >\n        {{ 'productList.showMoreBtn' | cxTranslate }}\n      </div>\n    </div>\n    <div *ngIf=\"appendProducts\" class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"viewMode === ViewModes.List\">\n  <div\n    infiniteScroll\n    [infiniteScrollDistance]=\"3\"\n    [infiniteScrollThrottle]=\"50\"\n    [infiniteScrollDisabled]=\"isMaxProducts || isLastPage || isEmpty\"\n    (scrolled)=\"scrollPage((_productListComponentService.getCurrentPage() ?? 0) + 1)\"\n  >\n    <cx-product-list-item\n      *ngFor=\"let product of model?.products\"\n      [product]=\"product\"\n      class=\"cx-product-search-list\"\n    ></cx-product-list-item>\n    <div\n      [className]=\"\n        !isLastPage && (_productListComponentService.getCurrentPage() ?? 0) > 0\n          ? 'cx-double-btn-container'\n          : 'cx-single-btn-container'\n      \"\n    >\n      <div\n        *ngIf=\"\n          (isMaxProducts || isLastPage) &&\n          (_productListComponentService.getCurrentPage() ?? 0) > 0\n        \"\n        (click)=\"scrollToTop()\"\n        class=\"btn btn-block btn-secondary\"\n      >\n        {{ 'productList.backToTopBtn' | cxTranslate }}\n      </div>\n      <div\n        *ngIf=\"isMaxProducts && !isLastPage\"\n        (click)=\"loadNextPage((_productListComponentService.getCurrentPage() ?? 0) + 1)\"\n        class=\"btn btn-block btn-secondary align-btn\"\n      >\n        {{ 'productList.showMoreBtn' | cxTranslate }}\n      </div>\n    </div>\n    <div *ngIf=\"appendProducts\" class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n</ng-container>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-list/custom-product-facet-navigation/custom-facet/custom-facet.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2041,
                2044
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2041,
                2044
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ChangeDetectorRef, Component, ElementRef, OnInit } from '@angular/core';\nimport { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FacetService, FacetComponent } from '@spartacus/storefront';\nimport { Facet } from '@spartacus/core';\nimport '../../../models/mb.facet.model';\n\n\n@Component({\n  selector: 'atcpps-custom-facet',\n  templateUrl: './custom-facet.component.html',\n  styleUrls: ['./custom-facet.component.scss']\n})\nexport class CustomFacetComponent extends FacetComponent implements OnInit {\n\n override _facet: Facet;\n protected readonly codec = new HttpUrlEncodingCodec();\n\n  initMin: number;\n  initMax: number;\n  from: number;\n  to: number;\n  queryValue: string;\n  activeCurrencySymbol?: string;\n\n  constructor(\n    facetService: FacetService,\n    elementRef: ElementRef<HTMLElement>,\n    cd: ChangeDetectorRef,\n    private _route: ActivatedRoute,\n    private _router: Router,\n    \n  ) {\n    super(facetService, elementRef, cd)\n  }\n\n\n  ngOnInit(): void {\n    if (this._facet && this._facet?.range) {\n      this.initMin = this._facet?.range?.min;\n      this.initMax = this._facet?.range?.max;\n      this.from = this._facet?.range?.from ? this._facet?.range?.from : this._facet?.range.min;\n      this.to = this._facet?.range?.to ? this._facet?.range?.to : this._facet?.range.max;\n      this.getQueryValue(this._facet);\n    }\n  }\n\n  protected decodeUriComponentSafe(query: string): string {\n   return query?.replace(/%(?![0-9a-fA-F]{2})/g, '%25');\n  }\n\n  private getLinkParam(query: string): string {\n      return this.codec.decodeValue(this.decodeUriComponentSafe(query)).replace(/\\+/g, ' ');\n  }\n  private constructUrl(query: string, min: number, max: number){\n    return query.replace('{from}',min.toString()).replace('{to}', max.toString());\n  }\n\n  private getQueryValue(facet: Facet){\n    if(facet?.range?.query?.query?.value){\n      this.queryValue = this.getLinkParam(facet?.range?.query?.query?.value);\n    }\n  }\n\n  public rangeFilterChange(event: any) {\n    const [min, max] = event.detail;\n    const queryUrl = this.constructUrl(this.queryValue, min, max)\n    this._router.navigate([], {\n      relativeTo: this._route,\n      queryParams: {\n        query: `${queryUrl}`\n      },\n      queryParamsHandling: 'merge',\n    });\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-list/custom-product-facet-navigation/custom-tire-dimension/custom-tire-dimension.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                939,
                942
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                939,
                942
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProductFacetService, FacetList } from '@spartacus/storefront';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'atcpps-custom-tire-dimension',\n  templateUrl: './custom-tire-dimension.component.html',\n})\nexport class CustomTireDimensionComponent {\n  isAccordian = true;\n  protected readonly codec = new HttpUrlEncodingCodec();\n\n  constructor(\n    private _router: Router,\n    private _route: ActivatedRoute,\n    protected productFacetService: ProductFacetService\n  ) {}\n\n  tiredimension$ = this.productFacetService.facetList$.pipe(\n    map((facetList: FacetList) =>\n      facetList.facets.filter(\n        (facet: { isTireDimension: boolean }) => facet.isTireDimension === true )\n    )\n  );\n\n  onChangeDimension({ target: { value } }: { target: { value: any } }) {\n    this._router.navigate([], {\n      relativeTo: this._route,\n      queryParams: {\n        query: `${value}`,\n      },\n      queryParamsHandling: 'merge',\n    });\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-list/services/custom-product-list-component.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_context' is defined but never used.",
        "line": 78,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 43
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'newCriteria' is never reassigned. Use 'const' instead.",
        "line": 115,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 115,
        "endColumn": 20,
        "fix": {
          "range": [
            3456,
            3489
          ],
          "text": "const newCriteria = searchCriteria;"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Params, Router, UrlSerializer } from '@angular/router';\nimport {\n  CurrencyService,\n  LanguageService,\n  RouterState,\n  RoutingService,\n  ProductSearchService,\n  ActivatedRouterStateSnapshot,\n} from '@spartacus/core';\nimport {\n  ViewConfig,\n  SearchCriteria,\n  ProductListComponentService,\n} from '@spartacus/storefront';\nimport { Location } from '@angular/common';\nimport { BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { configPageSize } from 'src/app/spartacus/spartacus-configuration.module';\nimport { SHOP_FOR_YOUR_CAR_QUERY } from '../../core/constants';\nimport { CmsService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomProductListComponentService extends ProductListComponentService {\n  private currentPage = 0;\n  vinfilterComponentEnabled = false;\n  private initPageLoadSize: number | undefined;\n  private isLoadingSubject = new BehaviorSubject<boolean>(false);\n\n  get isLoading$() {\n    return this.isLoadingSubject.asObservable();\n  }\n\n  constructor(\n    protected _productSearchService: ProductSearchService,\n    protected _routing: RoutingService,\n    protected _activatedRoute: ActivatedRoute,\n    protected _currencyService: CurrencyService,\n    protected _languageService: LanguageService,\n    protected _router: Router,\n    protected _config: ViewConfig,\n    private urlSerializer: UrlSerializer,\n    private location: Location,\n    private _cmsService: CmsService\n  ) {\n    super(\n      _productSearchService,\n      _routing,\n      _activatedRoute,\n      _currencyService,\n      _languageService,\n      _router,\n      _config\n    );\n  }\n\n  override searchByRouting$: Observable<ActivatedRouterStateSnapshot> =\n    combineLatest([\n      this._routing.getRouterState().pipe(\n        distinctUntilChanged((x, y) => {\n          // router emits new value also when the anticipated `nextState` changes\n          // but we want to perform search only when current url changes\n          return x.state.url === y.state.url;\n        }),\n      ),\n      ...[this._languageService.getActive(), this._currencyService.getActive()],\n    ]).pipe(\n      debounceTime(0),\n      switchMap(([routerState, ..._context]) => {\n        return this._cmsService\n          .getComponentData(\n            'AtcppsVinFilterComponent',\n            (routerState as RouterState).state.context\n          )\n          .pipe(\n            take(1),\n            tap((componebtData) => {\n              this.vinfilterComponentEnabled = !!componebtData;\n            }),\n            map(() => {\n              return (routerState as RouterState).state;\n            })\n          );\n      }),\n      tap((state: ActivatedRouterStateSnapshot) => {\n        const criteria = this.getCriteriaFromRoute(\n          state.params,\n          state.queryParams\n        );\n\n        this.setPageDataFromParams(state.queryParams);\n        this.isLoadingSubject.next(true);\n        this.search(criteria);\n      })\n    );\n\n  protected readonly SHOP_FOR_YOUR_CAR = SHOP_FOR_YOUR_CAR_QUERY;\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  override search(criteria: SearchCriteria): void {\n    const searchCriteria =\n      this.getSearchCriteriaForInitialPageLoad(criteria);\n    let newCriteria = searchCriteria;\n    if (searchCriteria.query === undefined) {\n      newCriteria.query = this.SHOP_FOR_YOUR_CAR;\n    }\n    super.search(newCriteria);\n    this.isLoadingSubject.next(false);\n  }\n\n  private getSearchCriteriaForInitialPageLoad(\n    criteria: SearchCriteria\n  ): SearchCriteria {\n    const defaultPageSize =\n      this._config.view?.defaultPageSize || configPageSize;\n    const page = this.initPageLoadSize ? 0 : this.getCurrentPage();\n    const pageSize = this.initPageLoadSize\n      ? this.initPageLoadSize\n      : defaultPageSize;\n    const searchCriteria = {\n      ...criteria,\n      currentPage: page,\n      pageSize: pageSize,\n    };\n    this.initPageLoadSize = undefined;\n    return searchCriteria;\n  }\n\n  public getVinFilterPageItems(page: number) {\n    this.setCurrentPage(page);\n    this.getPageItems(page);\n  }\n\n  public setCurrentPage(page: number) {\n    this.currentPage = page;\n  }\n\n  public getCurrentPage(): number {\n    return this.currentPage;\n  }\n\n  public setPageQueryParam(currentPage: number | undefined): void {\n    const urlTree = this._router.createUrlTree([], {\n      queryParams: { currentPage: currentPage },\n      queryParamsHandling: 'merge',\n      relativeTo: this._activatedRoute,\n    });\n    this.location.go(this.urlSerializer.serialize(urlTree));\n  }\n\n  private setPageDataFromParams(params: Params): void {\n    this.setCurrentPage(parseInt(params['currentPage'] || '0', 10));\n    this.initPageLoadSize =\n      (this._config.view?.defaultPageSize || configPageSize) *\n      (this.getCurrentPage() + 1);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-list/services/custom-search-page-meta-resolver.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 6,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                870,
                873
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                870,
                873
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { TestBed } from '@angular/core/testing';\n\nimport { CustomSearchPageMetaResolver } from './custom-search-page-meta-resolver';\nimport { CmsService, I18nTestingModule, PageType, Page, BasePageMetaResolver, RoutingService, ProductSearchService, SearchPageMetaResolver } from '@spartacus/core';\nimport { BehaviorSubject, EMPTY, Observable, of } from 'rxjs';\nimport { RouterState } from '@angular/router';\n\n\nconst mockSearchPage: Page = {\n  type: PageType.CONTENT_PAGE,\n  template: 'SearchResultsListPageTemplate',\n  slots: {},\n};\n\nclass MockCmsService {\n  getCurrentPage(): Observable<Page> {\n    return of(mockSearchPage);\n  }\n}\n\nclass MockProductSearchService {\n  getResults() {\n    return of({\n      pagination: {\n        totalResults: 3,\n      },\n    });\n  }\n}\n\nconst mockRouteData: RouterState = {\n  state: {\n    params: {\n      query: 'Canon',\n    },\n  },\n} as any;\n\nconst mockRoute = new BehaviorSubject<RouterState>(mockRouteData);\n\nclass MockRoutingService {\n  getRouterState() {\n    return mockRoute.asObservable();\n  }\n}\n\nclass MockBasePageMetaResolver {\n  resolveRobots() {\n    return of([]);\n  }\n  resolveCanonicalUrl(): Observable<string> {\n    return EMPTY;\n  }\n}\n\ndescribe('CustomPageMetaResolverService', () => {\n  let service: CustomSearchPageMetaResolver;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports:[I18nTestingModule],\n      providers: [\n        SearchPageMetaResolver,\n        { provide: CmsService, useClass: MockCmsService },\n        { provide: ProductSearchService, useClass: MockProductSearchService },\n        { provide: RoutingService, useClass: MockRoutingService },\n        {\n          provide: BasePageMetaResolver,\n          useClass: MockBasePageMetaResolver,\n        },\n      ],\n    });\n    service = TestBed.inject(CustomSearchPageMetaResolver);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-material-safety-sheet/product-material-safety-sheet.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                505,
                508
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                505,
                508
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, Input } from '@angular/core';\nimport { Product } from '@spartacus/core';\n\n//FIX ME\nexport interface MBProduct extends Product {\n  materialSafetySheetUrl?: string;\n}\n@Component({\n  selector: 'atcpps-product-material-safety-sheet',\n  templateUrl: './product-material-safety-sheet.component.html',\n  styleUrls: ['./product-material-safety-sheet.component.scss']\n})\nexport class ProductMaterialSafetySheetComponent {\n   @Input() product: MBProduct | undefined; \n   @Input() componentData: any;\n\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/product-recommendations/product-recommendations.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                617,
                620
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                617,
                620
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { ProductRecommendationsComponent } from './product-recommendations.component';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { CmsProductReferencesComponent } from '@spartacus/core';\nimport { of } from 'rxjs';\n\nconst mockComponentData: CmsProductReferencesComponent = {\n  uid: '001',\n  typeCode: 'ProductReferenceComponent',\n  productReferenceTypes: 'SIMILAR',\n};\n\nconst MockCmsProductCarouselComponent = <CmsComponentData<any>>{\n  data$: of(mockComponentData),\n};\n\ndescribe('ProductRecommendationsComponent', () => {\n  let component: ProductRecommendationsComponent;\n  let fixture: ComponentFixture<ProductRecommendationsComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ ProductRecommendationsComponent ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\n      imports: [StoreModule.forRoot({})],\n      providers: [\n        CmsComponentData,\n        { provide: CmsComponentData, useValue: MockCmsProductCarouselComponent },\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(ProductRecommendationsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/services/custom-product-click-event.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3847,
                3850
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3847,
                3850
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4666,
                4669
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4666,
                4669
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable, OnDestroy } from \"@angular/core\";\nimport { Product, ProductSearchPage, ProductSearchService, ProductService, isNotNullable, createFrom, EventService } from \"@spartacus/core\";\nimport { SearchResults } from \"@spartacus/storefront\";\nimport { Subscription } from \"rxjs\";\nimport { filter, withLatestFrom } from \"rxjs/operators\";\nimport { CustomProductClickEvent, CustomSearchProductClickEvent } from \"src/app/tracking/events/event.models\";\nimport { searchDetails } from \"src/app/tracking/gtm/models/gtm.models\";\nimport { GtmDataService } from \"src/app/tracking/gtm/services/gtm-data.service\";\nimport { TRACKING_CONSTS } from \"src/app/tracking/tracking.constants\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomProductClickEventService implements OnDestroy {\n  private productClickPLPSubscription: Subscription;\n  private productClickSearchBoxSubscription: Subscription;\n\n  constructor(\n    private _eventService: EventService,\n    private _gtmDataService: GtmDataService,\n    private productService: ProductService,\n    private productSearchService: ProductSearchService,\n  ) { }\n\n  public dispatchProductClickEvent(productCode: string, index: number, position?: number, title?: string) {\n    if (productCode) {\n      this.productClickPLPSubscription = this.productService.get(productCode)\n        .pipe(\n          filter(isNotNullable),\n          withLatestFrom(this.productSearchService.getResults())\n        )\n        .subscribe(([product, productSearchPage]: [Product, ProductSearchPage]) => {\n          const productListName: string = this._gtmDataService.getPageCategoryFromTrackingDetails(product?.trackingDetails);\n\n          if (position && title) {\n            // Dispatch a CustomProductClickEvent with the transformed event details For Carousel\n\n            this._eventService.dispatch(\n              createFrom(\n                CustomProductClickEvent, this.transformEventDetails(\n                  product,\n                  TRACKING_CONSTS.eventActions.sliderProductList + title,\n                  TRACKING_CONSTS.listName.carouselPosition + position,\n                  index\n                )\n              )\n            )\n\n          } else\n            if (productSearchPage.freeTextSearch) {\n              // Dispatch a CustomSearchProductClickEvent with the transformed event details For Search Result Page Products\n\n              const search = {\n                term: productSearchPage.freeTextSearch,\n                autocomplete: productSearchPage.freeTextSearch,\n                results: productSearchPage.pagination?.totalResults\n              }\n              this._eventService.dispatch(\n                createFrom(\n                  CustomSearchProductClickEvent, this.transformEventDetails(\n                    product,\n                    TRACKING_CONSTS.eventActions.pageList,\n                    TRACKING_CONSTS.listName.productSearch,\n                    index,\n                    search)\n                )\n              )\n            } else {\n              // Dispatch a CustomProductClickEvent with the transformed event details For Product Listing page Products\n\n              this._eventService.dispatch(\n                createFrom(\n                  CustomProductClickEvent, this.transformEventDetails(\n                    product,\n                    TRACKING_CONSTS.eventActions.pageList,\n                    productListName,\n                    index\n                  )\n                )\n              )\n\n            }\n        });\n    }\n  }\n\n  public dispatchProductClickEventFromSearchSuggestions(productCode: string, freeText: string, results: SearchResults) {\n    this.productClickSearchBoxSubscription = this.productService.get(productCode)\n      .pipe(filter(isNotNullable))\n      .subscribe((product: Product) => {\n        const index = results.products?.findIndex((item: any) => item.code === productCode);\n        const indexation = (index && index > -1) ? index : TRACKING_CONSTS.EMPTY_VALUE;\n        const search = {\n          term: freeText\n        }\n        // Dispatch a CustomSearchProductClickEvent with the transformed event details for searchbox suggested products\n\n        this._eventService.dispatch(\n          createFrom(\n            CustomSearchProductClickEvent, this.transformEventDetails(\n              product,\n              TRACKING_CONSTS.eventActions.pageList,\n              TRACKING_CONSTS.listName.productSearchSuggestion,\n              indexation,\n              search)\n          )\n        )\n      });\n  }\n\n  private transformEventDetails(product: Product, eventAction: string, listName?: string, index?: number, search?: searchDetails) {\n    const baseEventDetail: any = {\n      event: TRACKING_CONSTS.interactionLabel,\n      eventDetail: {\n        name: TRACKING_CONSTS.eventNames.selectItem,\n        category: TRACKING_CONSTS.eventCategories.link,\n        action: eventAction,\n        label: TRACKING_CONSTS.eventLabels.viewDetails,\n        listName: listName,\n        products: [{\n          ...this._gtmDataService.transformCoreProduct(product),\n          index: index,\n          listName: listName,\n          qty: TRACKING_CONSTS.defaultQty,\n        }],\n      },\n      application: this._gtmDataService.getPageApplication(),\n    };\n\n    if (search) {\n      baseEventDetail.eventDetail.search = search;\n    }\n\n    return baseEventDetail;\n  }\n\n\n  ngOnDestroy(): void {\n    this.productClickPLPSubscription?.unsubscribe();\n    this.productClickSearchBoxSubscription?.unsubscribe();\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/variants/components/custom-variant-color-size-selector/custom-variant-color-size-selector.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                667,
                670
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                667,
                670
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1719,
                1722
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1719,
                1722
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1795,
                1798
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1795,
                1798
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2007,
                2010
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2007,
                2010
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 72,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 72,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2613,
                2616
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2613,
                2616
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, Input, OnInit } from '@angular/core';\nimport { VariantOption } from '@spartacus/core';\nimport { BaseOption, OccConfig, isNotUndefined, Product, ProductScope, ProductService, RoutingService, VariantOptionQualifier, VariantQualifier } from '@spartacus/core';\n\nimport { filter, take } from 'rxjs/operators';\n@Component({\n  selector: 'atcpps-custom-variant-color-size-selector',\n  templateUrl: './custom-variant-color-size-selector.component.html',\n  styleUrls: ['./custom-variant-color-size-selector.component.scss']\n})\nexport class CustomVariantColorSizeSelectorComponent implements OnInit {\n\n  private baseUrl = '';\n  private color2SizeOptionsMap: any = {};\n\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService,\n  ) { \n    this.baseUrl = this.getBaseUrl();\n  }\n  \n  @Input()\n  product: Product | undefined;\n\n  @Input()\n  variants: BaseOption | undefined;\n\n  ngOnInit(): void {\n    const variantOptions = this.product?.baseOptions?.length ? this.product?.baseOptions[0]?.options : undefined;\n    this.generateColor2SizeOptionsMap(variantOptions);\n  }\n\n  private generateColor2SizeOptionsMap(variantOptions: VariantOption[] | undefined) {\n    variantOptions?.map((item: VariantOption) => {\n      if(item.variantOptionQualifiers){\n        const color: string = this.getColorVariantOptionValue(item.variantOptionQualifiers);\n        if(this.color2SizeOptionsMap[color]){\n          this.color2SizeOptionsMap[color].push(this.getColorMapObj(item));\n        }\n        else{\n          this.color2SizeOptionsMap[color] = [this.getColorMapObj(item)];\n        }\n      }\n    });\n  }\n\n  private getColorMapObj(item: VariantOption): any {\n    const sizeVariantOption = item?.variantOptionQualifiers?.find((q: any) => q.qualifier === VariantQualifier.SIZE);\n    return {\n      ...item, \n      ...sizeVariantOption\n    };\n  }\n  \n  protected getUniqueColorVariants(variants: VariantOption[]){\n    const uniqueColorVariants: any[] = [];\n    for(const key in this.color2SizeOptionsMap){\n      if(Object.prototype.hasOwnProperty.call(this.color2SizeOptionsMap, key) && this.color2SizeOptionsMap[key][0]){\n        uniqueColorVariants.push({\n          code: this.color2SizeOptionsMap[key][0].code,\n          variantOptionQualifiers: this.color2SizeOptionsMap[key][0].variantOptionQualifiers,\n          sizeVariants: this.color2SizeOptionsMap[key]\n        });\n      }\n    }\n    return uniqueColorVariants.length ? uniqueColorVariants : variants;\n  }\n\n  protected getUniqueSizeVariants(variants: VariantOption[]) {\n    let uniqueColors: any[] = [];\n    if(this.variants?.selected?.variantOptionQualifiers){\n      const selectedColor = this.getColorVariantOptionValue(this.variants?.selected?.variantOptionQualifiers);\n      uniqueColors = variants.filter((item) => {\n        if(item?.variantOptionQualifiers){\n          const sizeColor = this.getColorVariantOptionValue(item?.variantOptionQualifiers);\n          return sizeColor === selectedColor;\n        }\n        return false;\n      });\n    }\n    return uniqueColors.length ? uniqueColors : variants;\n  }\n\n  protected changeSize(code: string): null {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(isNotUndefined),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n\n  protected changeColor(code: string): null {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(isNotUndefined),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n// FIX ME, we need to find way to mock data when function has protected\n getSizeVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n\n  protected getColorVariantOptionValue(qualifiers: VariantOptionQualifier[]): string {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj?.value || '';\n  }\n\n  protected getBaseUrl(): string {\n    return (\n      this.config.backend?.media?.baseUrl ??\n      this.config.backend?.occ?.baseUrl ??\n      ''\n    );\n  }\n\n  protected getColorVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    const imageUrl = qualifier ? `${qualifier.image?.url}` : '';\n\n    return imageUrl && imageUrl.startsWith('http') \n      ? `${imageUrl}`\n      : `${this.baseUrl}${imageUrl}`;\n  }\n\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/variants/components/custom-variant-container/custom-variant-container.component.ts",
    "messages": [
      {
        "ruleId": "@angular-eslint/use-lifecycle-interface",
        "severity": 1,
        "message": "Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)",
        "line": 21,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "useLifecycleInterface",
        "endLine": 21,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component } from '@angular/core';\nimport { RequiredPick } from '@spartacus/core';\nimport { Product } from '@spartacus/core';\nimport { BaseOption } from '@spartacus/core';\nimport { isNotNullable } from '@spartacus/core';\nimport { ProductVariantsContainerComponent } from '@spartacus/product/variants/components';\nimport { CurrentProductService } from '@spartacus/storefront';\nimport { distinctUntilChanged, filter, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'atcpps-custom-variant-container',\n  templateUrl: './custom-variant-container.component.html',\n  styleUrls: ['./custom-variant-container.component.scss']\n})\nexport class CustomVariantContainerComponent extends ProductVariantsContainerComponent {\n\n  constructor(private _currentProductService: CurrentProductService) {\n    super(_currentProductService);\n  }\n\n  override ngOnInit(): void {\n    this.product$ = this._currentProductService.getProduct().pipe(\n      filter(isNotNullable),\n      filter(\n        (product): product is RequiredPick<Product, 'baseOptions'> => !!product.baseOptions\n      ),\n      distinctUntilChanged(),\n      tap((product) => {\n        this.variants = {};\n        product.baseOptions.forEach((option: BaseOption) => {\n          if (option?.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n\n\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/variants/components/custom-variant-tire-dimension-selector/custom-variant-tire-dimension-selector.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1516,
                1519
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1516,
                1519
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, Input, OnInit } from '@angular/core';\nimport {\n  ProductScope,\n  VariantOption,\n  Product,\n  ProductService,\n  BaseOption,\n  isNotUndefined,\n  RoutingService,\n  isNotNullable,\n  RequiredPick,\n} from '@spartacus/core';\nimport { CurrentProductService } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, take, tap } from 'rxjs/operators';\nimport { VariantOptionQualifier, VariantQualifier } from '../../../models/mb.product.model';\n\n@Component({\n  selector: 'atcpps-tire-dimension-variant-selector',\n  templateUrl: './custom-variant-tire-dimension-selector.component.html',\n})\nexport class CustomVariantTireDimensionSelectorComponent implements OnInit {\n  product$: Observable<Product | null>;\n  variantName?: string = '';\n  constructor(\n    private currentProductService: CurrentProductService,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(isNotNullable),\n      filter(\n        (product): product is RequiredPick<Product, 'baseOptions'> =>\n          !!product.baseOptions\n      ),\n      distinctUntilChanged(),\n      tap((product) => {\n        product?.baseOptions?.forEach((option: BaseOption | null) => {\n          option?.options?.forEach((data: VariantOption) => {\n            data?.variantOptionQualifiers?.forEach((opt: any) => {\n              this.variantName = opt?.name;\n            });\n          });\n        });\n      })\n    );\n  }\n\n  protected changeDimension(code: string): null {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(isNotUndefined),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n\n  getTireDimensiontOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(\n      (q) => q.qualifier === VariantQualifier.TIREDIMENSION\n    );\n    return obj ? obj.value : '';\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/product/wallbox-user-manual/pdfcomponent.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                606,
                609
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                606,
                609
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, Input } from '@angular/core';\nimport { Config } from '@spartacus/core';\nexport interface userManual {\n  userManual: {\n    catalogId?: string;\n    catalogVersion?: string;\n    downloadUrl?: string;\n    mime?: string;\n    uuid?: string;\n  };\n}\n@Component({\n  selector: 'atcpps-product-wallbox-user-manual',\n  templateUrl: './pdfcomponent.component.html',\n  styleUrls: ['./pdfcomponent.component.scss'],\n})\nexport class CustomPDFComponent {\n  pdfBaseUrl$ = this.getBaseUrl();\n  constructor(protected config: Config) {}\n  @Input() product: userManual | undefined;\n  @Input() componentData: any;\n  \n  protected getBaseUrl(): string {\n    return (\n      this.config.backend?.media?.baseUrl ??\n      this.config.backend?.occ?.baseUrl ??\n      ''\n    );\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/user/services/custom-logout.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'target' is defined but never used.",
        "line": 20,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { AuthRedirectService } from '@spartacus/core';\nimport { AuthConfig } from 'src/app/config/AuthConfig';\nimport { EnvPickerService } from 'src/app/utilities/env-picker.service';\nimport { EnvironmentProperties } from '../../../common/environment-variables';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomLogoutService {\n  constructor(\n    private _envPicker: EnvPickerService,\n    protected authRedirectService: AuthRedirectService,\n    private _utilService: UtilService,\n    private _winRef: WindowRef\n  ) {}\n\n  private getLogoutUrl(target: string): string {\n    const locale = this._utilService.getSiteContext('language');\n    return `${\n      EnvironmentProperties[this._envPicker.getCurrentEnvironment()]\n        .ciasLoginUrl\n    }/${AuthConfig.platform}/${AuthConfig.version}/${\n      AuthConfig.logoutEndpoint\n    }?locale=${locale}&tenantId=${\n      EnvironmentProperties[this._envPicker.getCurrentEnvironment()]\n        .ciasTenantId\n    }&targetUrl=${this._utilService.getCurrentUrl()}`;\n  }\n\n  public initLogout(target: string): void {\n    this._winRef.location.href = this.getLogoutUrl(target);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/user/services/user-auth.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'appBaseHref' is assigned a value but never used.",
        "line": 53,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'value1' is defined but never used.",
        "line": 66,
        "column": 107,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 113
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'value1' is defined but never used.",
        "line": 79,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 45
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { AuthConfig } from '../../../config/AuthConfig';\nimport {\n  UserIdService,\n  AuthRedirectService,\n  StateWithClientAuth,\n  AuthService,\n} from '@spartacus/core';\nimport { Store } from '@ngrx/store';\nimport { EnvironmentProperties } from '../../../common/environment-variables';\nimport { EnvPickerService } from 'src/app/utilities/env-picker.service';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { RoutingService } from '@spartacus/core';\nimport { BrowserStorageService } from 'src/app/store/browser-storage.service';\nimport { StoreKeys } from 'src/app/store/store-keys';\nimport { Params } from '@angular/router';\nimport { AppState } from 'src/app/store/app-state';\nimport { combineLatest } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthRedirectStorageService } from '@spartacus/core';\nimport { WindowRef } from '@spartacus/core';\n\nexport enum CiasContext {\n  Login = 'login',\n  Register = 'register',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthService {\n  constructor(\n    private _appState: AppState,\n    private _envPicker: EnvPickerService,\n    protected userIdService: UserIdService,\n    private _authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    private authRedirectStorageService: AuthRedirectStorageService,\n    private _utilService: UtilService,\n    private _routingService: RoutingService,\n    private _browserStorageService: BrowserStorageService,\n    protected store: Store<StateWithClientAuth>,\n    private route: ActivatedRoute,\n    private _winRef: WindowRef\n  ) { }\n\n  private _constructAuthUrl(context: string, params?: string): string {\n    const endPoint =\n      context === CiasContext.Register\n        ? AuthConfig.registration\n        : AuthConfig.loginEndpoint;\n    const orderGuid = params === undefined ? `` : params;\n    const appBaseHref = this.getAppBaseHref();\n\n    const countryCode = this._appState.getCurrentCountry();\n    const locale = this._utilService.getSiteContext('language');\n    return `${EnvironmentProperties[this._envPicker.getCurrentEnvironment()]\n        .ciasLoginUrl\n      }/${AuthConfig.platform}/${AuthConfig.version}/${endPoint}?locale=${locale\n      }&country=${countryCode}&${AuthConfig.mode}&tenantId=${EnvironmentProperties[this._envPicker.getCurrentEnvironment()]\n        .ciasTenantId\n      }&redirectUrl=${this._utilService.getCurrentUrl()}${orderGuid}`;\n  }\n\n  public handleRegisterRedirect(): void {\n    combineLatest([this.route.queryParams, this.authRedirectStorageService.getRedirectUrl()]).subscribe(([value1, lastVisitedUrl]) => {\n      if (lastVisitedUrl !== undefined) {\n        this._browserStorageService.storeItem(\n          StoreKeys.LastVisitedUrl,\n          lastVisitedUrl\n        );\n      }\n      this.initRegister();\n    })\n  }\n\n  public handleLoginRedirect(): void {\n    combineLatest([this.route.queryParams, this.authRedirectStorageService\n      .getRedirectUrl()]).subscribe(([value1, lastVisitedUrl]) => {\n        if (lastVisitedUrl !== undefined) {\n          this._browserStorageService.storeItem(\n            StoreKeys.LastVisitedUrl,\n            lastVisitedUrl\n          );\n        }\n        this.initLogin();\n        this._browserStorageService.deleteItem(\n          StoreKeys.SameAsDeliveryAddress\n        );\n      })\n  }\n  public initLogin(): void {\n    this._invokeAuthRedirect(this._constructAuthUrl(CiasContext.Login));\n  }\n\n  public getAppBaseHref(): string | null {\n    return sessionStorage.getItem(StoreKeys.AppBaseHref);\n  }\n\n  public initRegister(): void {\n    this._invokeAuthRedirect(this._constructAuthUrl(CiasContext.Register));\n  }\n\n  public initRegisterWithOrderGuid(orderGuid?: string): void {\n    const params =\n      orderGuid === undefined\n        ? ``\n        : `${this.generateGuidQueryParam(orderGuid)}`;\n    this._invokeAuthRedirect(\n      this._constructAuthUrl(CiasContext.Register, params)\n    );\n  }\n\n  private _invokeAuthRedirect(authUrl: string): void {\n    this._winRef.location.href = authUrl;\n  }\n\n  public handleOneTimeToken(params: Params): void {\n    if (params['token']) {\n      this._browserStorageService.storeItem(\n        StoreKeys.OneTimeToken,\n        params['token']\n      );\n      if (params['guid']) {\n        this._browserStorageService.storeItem(\n          StoreKeys.OrderGuid,\n          params['guid']\n        );\n      }\n      this.initLoginSession();\n    }\n  }\n\n  public initLoginSession() {\n    this._authService\n      .loginWithCredentials(\n        '',\n        this._browserStorageService.readItem(StoreKeys.OneTimeToken) as string\n      )\n      .then(\n        () => {\n          this._redirectToLastVisitedPage();\n        },\n        () => {\n          //error\n        }\n      );\n  }\n\n  private _redirectToLastVisitedPage(): void {\n    if (this._browserStorageService.readItem(StoreKeys.OrderGuid)) {\n      this._browserStorageService.deleteItem(StoreKeys.OrderGuid);\n      this._routingService.goByUrl('/my-account/orders');\n    } else if (this._browserStorageService.readItem(StoreKeys.LastVisitedUrl)) {\n      this._routingService.goByUrl(\n        this._browserStorageService.readItem(StoreKeys.LastVisitedUrl) || '{}'\n      );\n      this._browserStorageService.deleteItem(StoreKeys.LastVisitedUrl);\n    }\n  }\n\n  private generateGuidQueryParam(guid: string): string {\n    return this._utilService.encodeUrlParams(`?guid=${guid}`);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vehicle-compatibility-wrapper/vehicle-compatibility-wrapper.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 13,
        "column": 26,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 13,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                515,
                541
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                515,
                541
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                515,
                541
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      },
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 58,
        "column": 17,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 58,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                2408,
                2434
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                2408,
                2434
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                2408,
                2434
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<ng-container *ngIf=\"product$ | async as product\">\n  <div class=\"vc-wrapper\" [className]=\"product.compatibilityCheck\" [ngClass]=\"{\n      compatible:\n        (vinVehicleData$ | async) &&\n        (compatibiltyCheckResult$ | async) === 'COMPATIBLE',\n      'not-compatible':\n        (vinVehicleData$ | async) &&\n        (compatibiltyCheckResult$ | async) === 'NOT_COMPATIBLE',\n      failure:\n        (vinVehicleData$ | async) &&\n        (compatibiltyCheckResult$ | async) === 'FAILURE'\n    }\">\n    <ng-container *ngIf=\"!(vinVehicleData$ | async); else vehicleSelector\">\n      <div class=\"vc-wrapper__title\">\n        <h4>{{ \"compatibilityCheck.title\" | cxTranslate }}</h4>\n        <span class=\"compatibility-indicator\"></span>\n      </div>\n      <div class=\"vc-wrapper__info\">\n        <p *ngIf=\"product.compatibilityCheck === 'recommended'\">\n          {{ \"compatibilityCheck.recommendedInfo\" | cxTranslate }}\n        </p>\n        <p *ngIf=\"product.compatibilityCheck === 'mandatory'\">\n          {{ \"compatibilityCheck.mandatoryInfo\" | cxTranslate }}\n        </p>\n      </div>\n    </ng-container>\n\n    <div class=\"vc-wrapper__vehicle-selector\">\n      <span class=\"compatibility-indicator\"></span>\n      <atcpps-vin-vehicle-selection [id]=\"selectedTab?.id\" [class.selected]=\"selectedVinVehileData\"\n        (changed)=\"onVehicleChanged($event, product.code)\"\n        [placeHolderText]=\"'compatibilityCheck.placeholder' | cxTranslate\">\n      </atcpps-vin-vehicle-selection>\n    </div>\n\n    <div *ngIf=\"\n        (vinVehicleData$ | async) &&\n        (compatibiltyCheckResult$ | async) === 'FAILURE'\n      \" class=\"vc-wrapper__cc-result-info\">\n      <p class=\"error-text\">\n        {{ \"compatibilityCheck.ccFailure\" | cxTranslate }}\n      </p>\n    </div>\n    <div *ngIf=\"\n        (vinVehicleData$ | async) &&\n        (compatibiltyCheckResult$ | async) === 'NOT_COMPATIBLE'\n      \" class=\"vc-wrapper__cc-result-info\">\n      <p *ngIf=\"product.compatibilityCheck === 'recommended'\" class=\"result-info-text\">\n        {{ \"compatibilityCheck.recommendedResultNote\" | cxTranslate }}\n      </p>\n      <p *ngIf=\"product.compatibilityCheck === 'mandatory'\" class=\"result-info-text\">\n        {{ \"compatibilityCheck.mandatoryResultNote\" | cxTranslate }}\n      </p>\n    </div>\n    <wb-control-error slot=\"message\" *ngIf=\"errorMessageType\">\n      {{\"compatibilityCheck.ccFailure\" | cxTranslate}}\n    </wb-control-error>\n    <div *ngIf=\"!(vinVehicleData$ | async)\">\n      <atcpps-vehicle-finder [infoText]=\"'compatibilityCheck.info' | cxTranslate\">\n      </atcpps-vehicle-finder>\n    </div>\n  </div>\n  <div *ngIf=\"\n      categoryLink &&\n      (vinVehicleData$ | async) &&\n      ['FAILURE', 'NOT_COMPATIBLE'].includes(compatibiltyCheckResult$ | async)\n    \" class=\"check-compatible\">\n      <a class=\"compatible-label\" [routerLink]=\"categoryLink\" (click)=\"updateToggleState(true)\">\n        {{ \"compatibilityCheck.browseAlternativecheck\" | cxTranslate }}</a>\n    </div>\n</ng-container>",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vehicle-compatibility-wrapper/vehicle-compatibility-wrapper.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                957,
                960
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                957,
                960
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                991,
                994
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                991,
                994
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1322,
                1325
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1322,
                1325
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2837,
                2840
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2837,
                2840
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 116,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 116,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3865,
                3868
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3865,
                3868
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3950,
                3953
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3950,
                3953
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  isNotNullable,\n  PageMetaService,\n  PageMeta,\n} from '@spartacus/core';\nimport { CurrentProductService } from '@spartacus/storefront';\nimport { Observable, Subscription } from 'rxjs';\nimport { ProductCompatibilityService } from '../../core/services/product-compatibility.service';\nimport {\n  COMPATIBILITY_MATRIX,\n  COMPATIBILITY_OUTPUTS,\n  VinVehicleData,\n} from '../../core/models/vehicle.models';\nimport { catchError, filter, map, switchMap } from 'rxjs/operators';\nimport { VehicleStateService } from '../../state/vehicle-state.service';\nimport { VinFilterService } from '../../core/services/vin-filter.service';\n\n@Component({\n  selector: 'atcpps-vehicle-compatibility-wrapper',\n  templateUrl: './vehicle-compatibility-wrapper.component.html',\n})\nexport class VehicleCompatibilityWrapperComponent implements OnDestroy, OnInit {\n  categoryLink: string | any;\n  errorMessageType: string | any;\n  product$: Observable<Product | null> = this._currentProductService.getProduct(\n    [ProductScope.DETAILS, ProductScope.PRICE]\n  );\n\n  compatibiltyCheckTypes: typeof COMPATIBILITY_MATRIX = COMPATIBILITY_MATRIX;\n  compatibiltyCheckOutputs: typeof COMPATIBILITY_OUTPUTS =\n    COMPATIBILITY_OUTPUTS;\n  compatibiltyCheckResult$: any;\n  vinVehicleData$: Observable<VinVehicleData | undefined> =\n    this._vinVehicleSelectionService.vinVehicleData$;\n\n  constructor(\n    private _currentProductService: CurrentProductService,\n    private _productCompatibilityService: ProductCompatibilityService,\n    private _vinVehicleSelectionService: VehicleStateService,\n    private _vehicleStateService: VehicleStateService,\n    private _pageMetaService: PageMetaService,\n    private _vinFilterService: VinFilterService\n  ) {}\n  protected subscription = new Subscription();\n\n  ngOnInit(): void {\n    this.categoryRoute();\n    this.triggerInitialCompatibilityCheck();\n  }\n\n  private categoryRoute() {\n    this.subscription.add(\n      this._pageMetaService.getMeta().subscribe((item: PageMeta | null) => {\n        if (item?.breadcrumbs && item?.breadcrumbs?.length >= 2) {\n          this.categoryLink = item.breadcrumbs[1].link;\n        }\n      })\n    );\n  }\n\n  public updateToggleState(toggleStatus: boolean) {\n    this._vinFilterService.updateToggleBtnState(toggleStatus);\n  }\n\n  private triggerInitialCompatibilityCheck(): void {\n    this.subscription.add(\n      this._vinVehicleSelectionService\n        .getSelectedVehicle()\n        .pipe(\n          switchMap((vinVehicleData: VinVehicleData | undefined) => {\n            return this.product$.pipe(\n              map((product: Product | null) => {\n                return { vinVehicleData: vinVehicleData, product: product };\n              })\n            );\n          })\n        )\n        .subscribe((data: any) => {\n          if (data?.vinVehicleData?.vin && data?.product?.code)\n            this._triggerCompatibilityCheck(\n              data.vinVehicleData,\n              data.product.code\n            );\n        })\n    );\n  }\n\n  private _clearLastCheck() {\n    this._vehicleStateService.setCompatilityCheckResult(undefined);\n  }\n\n  onVehicleChanged(\n    vehicleData: VinVehicleData | undefined,\n    productCode: string\n  ): void {\n    this.errorMessageType = undefined;\n    if (!vehicleData?.vin) this._clearLastCheck();\n    if (vehicleData?.vin && productCode)\n      this._triggerCompatibilityCheck(vehicleData, productCode);\n  }\n\n  private _triggerCompatibilityCheck(\n    vehicle: VinVehicleData,\n    productCode: string\n  ): void {\n    this.compatibiltyCheckResult$ = this._productCompatibilityService\n      .performCompatibilityCheck(vehicle.vin, productCode)\n      .pipe(\n        filter(isNotNullable),\n        map((data) => {\n          return data?.productCompatibilityList[0]?.status;\n        }),\n        catchError((error: any) => this.handleError(error, vehicle))\n      );\n  }\n\n  private handleError(error: any, vehicle: VinVehicleData) {\n    if (error) {\n      if (vehicle) this._clearLastCheck();\n      return (this.errorMessageType = error?.error?.errors[0]?.type);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._clearLastCheck();\n    this.subscription.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vehicle-finder/vehicle-finder-dialog/vehicle-finder-dialog.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                773,
                776
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                773,
                776
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1392,
                1395
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1392,
                1395
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { LaunchDialogService, ICON_TYPE, FocusConfig } from '@spartacus/storefront';\nimport { Subscription } from 'rxjs';\nimport { VehicleFinderService } from './vehicle-finder-dialog.service';\nimport { CmsService, Config } from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'atcpps-vehicle-finder-dialog',\n  templateUrl: './vehicle-finder-dialog.component.html',\n})\nexport class VehicleFinderDialogComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: true,\n    focusOnEscape: true,\n  };\n  isLoading = false;\n  dialogLoadingSub: Subscription;\n  dialogDataSub: Subscription;\n  data: any;\n  \n  constructor(\n    private launchDialogService: LaunchDialogService,\n    private dialogLoadingService: VehicleFinderService,\n    private cmsComponentData: CmsService,\n    protected config: Config,\n  ) { }\n\n  ngOnInit(): void {\n    this.dialogLoading();\n    this.dialogLoadingDataSub();\n  }\ndialogLoading() {\n  this.dialogLoadingSub = this.dialogLoadingService.loading$\n  .pipe(\n    tap((isLoading: boolean) => {\n      this.isLoading = isLoading;\n    })\n  ).subscribe();\n}\n\ndialogLoadingDataSub() {\n  this.dialogDataSub = this.cmsComponentData.getComponentData('AtcppsVinGuideComponent')\n  .pipe(\n    tap((item: any) => {\n      this.data = item;\n      this.isLoading = false;\n    })\n  ).subscribe();\n}\n  \n\n  dismissModal(reason = 'dismiss') {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  ngOnDestroy(): void {\n    this.dialogLoadingSub?.unsubscribe();\n    this.dialogDataSub?.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vehicle-selector/vehicle-selector.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 14,
        "column": 13,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 14,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                430,
                456
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                430,
                456
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                430,
                456
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      },
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 55,
        "column": 19,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 55,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                1893,
                1919
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                1893,
                1919
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                1893,
                1919
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      },
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 66,
        "column": 14,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 66,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                2227,
                2253
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                2227,
                2253
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                2227,
                2253
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<div class=\"vehicle-selection {{ theme }}\" \n  [ngClass]=\"{\n    'small-container': smallContainer, \n    'selected': (vinVehicleData$ | async)\n  }\"\n  [style.min-height.px]=\"siblingHeight - 16\"\n  >\n  <div class=\"vehicle-selection__headline\">\n    <div class=\"vehicle-selection__headline--icon\"></div>\n    <h3 class=\"vehicle-selection__headline--title\">\n      {{ \"vehicleSelector.title\" | cxTranslate }}\n    </h3>\n  </div>\n  <p *ngIf=\"!(vinVehicleData$ | async)\" class=\"vehicle-selection__desc\">\n    {{ \"vehicleSelector.description\" | cxTranslate }}\n  </p>\n\n  <wb-tabs selected=\"{{ selectedTabName }}\" theme=\"{{ theme }}\" fitted [class.selected]=\"(vinVehicleData$ | async)\">\n    <ng-container *ngFor=\"let tab of vehicleSelectorTabs\">\n      <wb-tab\n        id=\"{{ tab.id }}\"\n        name=\"{{ tab.name }}\"\n        aria-selected=\"{{ tab.id === selectedTab.id }}\"\n        selected=\"{{ tab.id === selectedTab.id }}\"\n        aria-controls=\"{{ tab.id }}\"\n      >\n        {{ tab.headline | cxTranslate }}\n      </wb-tab>\n      <wb-tab-content\n        id=\"{{ tab.id }}\"\n        name=\"{{ tab.name }}\"\n        aria-selected=\"{{ tab.id === selectedTab.id }}\"\n        selected=\"{{ tab.id === selectedTab.id }}\"\n        aria-labelledby=\"{{ tab.id }}\"\n        slot=\"content\"\n      >\n        <ng-container [ngTemplateOutlet]=\"tab.templateRef\"></ng-container>\n      </wb-tab-content>\n    </ng-container>\n  </wb-tabs>\n</div>\n\n<ng-template #atcppsVinVehicleSelect>\n  <div class=\"vehicle-selection__tab--content fade-in\">\n    <atcpps-vin-vehicle-selection\n      [id]=\"selectedTab?.id\"\n      [class.selected]=\"(vinVehicleData$ | async)\"\n      (validationInProgress)=\"onValidationInProgress($event)\"\n      [theme]=\"theme\"\n      [placeHolderText]=\"'vehicleSelector.placeholder' | cxTranslate\"\n    >\n    </atcpps-vin-vehicle-selection>\n    <cx-progress-button\n      [class]=\"'btn btn-primary btn-block'\"\n      [disabled]=\"!(vinVehicleData$ | async)\"\n      [loading]=\"validationInProgress\"\n      (click)=\"browseCTAClick()\"\n      tabindex=\"-1\"\n    >\n      <ng-container *ngIf=\"!validationInProgress\">\n        {{ \"vehicleSelector.buttonLabel\" | cxTranslate }}\n      </ng-container>\n    </cx-progress-button>\n    <br />\n    <atcpps-vehicle-finder\n      *ngIf=\"!(vinVehicleData$ | async)\"\n      [infoText]=\"'vehicleSelector.info' | cxTranslate\"\n    ></atcpps-vehicle-finder>\n  </div>\n</ng-template>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vehicle-selector/vehicle-selector.component.spec.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1012,
                1015
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1012,
                1015
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { VehicleSelectorComponent } from './vehicle-selector.component';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { VehicleStateService } from '../../state/vehicle-state.service';\nimport { FlyoutHeaderService } from 'src/app/features/flyoutheader/flyout-header.service';\nimport { VinFilterService } from '../../core/services/vin-filter.service';\nimport { RoutingService, I18nTestingModule } from '@spartacus/core';\nimport { of } from 'rxjs';\nimport { VinVehicleData } from '../../core/models/vehicle.models';\n\nconst  mockVinVehicleData: VinVehicleData = {\n  vin: 'W1K2053872G131322',\n  imageUrl: 'https://testing.com/vin',\n  model: \"C205 (2023)\",\n  vehicleClass: \"C-Klasse\",\n  bodyType: 'Coupé',\n  images: {\n    entry: []\n  }\n}\n\nclass MockVinVehicleService {\n  vinVehicleData$ = of(mockVinVehicleData);\n}\n\nconst mockComponentData = {\n  styleClasses: 'black'\n};\n\nconst MockCmsProductCarouselComponent = <CmsComponentData<any>>{\n  data$: of(mockComponentData),\n};\n\ndescribe('VehicleSelectorComponent', () => {\n  let component: VehicleSelectorComponent;\n  let fixture: ComponentFixture<VehicleSelectorComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ VehicleSelectorComponent ],\n      imports:[ I18nTestingModule ],\n      providers: [\n        { provide: CmsComponentData, useValue: MockCmsProductCarouselComponent },\n        { provide: VehicleStateService, useClass: MockVinVehicleService },\n        { provide: FlyoutHeaderService, useValue: {} },\n        { provide: VinFilterService, useValue: {} },\n        { provide: RoutingService, useValue: {} }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(VehicleSelectorComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vehicle-selector/vehicle-selector.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'map' is defined but never used.",
        "line": 20,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                895,
                898
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                895,
                898
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1301,
                1304
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1301,
                1304
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1892,
                1895
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1892,
                1895
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2293,
                2296
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2293,
                2296
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { VinVehicleData } from '../../core/models/vehicle.models';\nimport { VehicleStateService } from '../../state/vehicle-state.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { RoutingService } from '@spartacus/core';\nimport { FlyoutHeaderService } from 'src/app/features/flyoutheader/flyout-header.service';\nimport { FlyoutheaderComponentsType } from 'src/app/common/constants';\nimport { VinFilterService } from '../../core/services/vin-filter.service';\nimport { map, tap } from 'rxjs/operators';\nimport { WindowRef } from '@spartacus/core';\n\nexport interface TabElement {\n  id: string;\n  name: string;\n  headline: string;\n  templateRef: TemplateRef<any> | undefined;\n}\n@Component({\n  selector: 'atcpps-vehicle-selector',\n  templateUrl: './vehicle-selector.component.html',\n})\nexport class VehicleSelectorComponent implements OnInit, AfterViewInit, OnDestroy {\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    this.setComponentContainer();\n  }\n  @ViewChild('atcppsVinVehicleSelect', { static: true })\n  vinVehicleSelectTemplate: TemplateRef<any>;\n  public theme = 'light';\n  public vehicleSelectorTabs: TabElement[];\n  public selectedTab: TabElement | undefined;\n  public selectedVinVehileData: VinVehicleData | undefined;\n  public selectedTabName: string | undefined;\n  public validationInProgress = false;\n  vinVehicleData$: Observable<VinVehicleData | undefined> =\n    this._vinVehicleSelectionService.vinVehicleData$;\n  smallContainer: boolean;\n  containerHeight: number;\n  lastContainerHeight: number;\n  siblingHeight: number;\n  subscription = new Subscription();\n\n  constructor(\n    private cmsComponentData: CmsComponentData<any>,\n    private _vinVehicleSelectionService: VehicleStateService,\n    private _flyOutHeaderService: FlyoutHeaderService,\n    private _vinFilterService: VinFilterService,\n    private _routingService: RoutingService,\n    private cd: ChangeDetectorRef,\n    private el: ElementRef,\n    private _winRef: WindowRef\n  ) {}\n\n  ngOnInit(): void {\n    this.cmsComponentData.data$.subscribe((cmsComponentData: any) => {\n      this.setThemeFromCmsStyleClass(cmsComponentData?.styleClasses);\n    });\n\n    this.vehicleSelectorTabs = [\n      {\n        id: this.getUniqueIdentifier('atcpps-vin-vehicle-select'),\n        name: 'atcpps-vin-vehicle-select',\n        headline: 'vehicleSelector.tabHeadline',\n        templateRef: this.vinVehicleSelectTemplate,\n      },\n    ];\n    this.selectedTab = this.vehicleSelectorTabs[0];\n    this.selectedTabName = this.selectedTab?.name;\nthis.subscription.add(\n  this.vinVehicleData$.pipe(\n    tap((data: VinVehicleData | undefined) => {\n      this.selectedVinVehileData = data;\n      this.onVinVehicleDataChanged();\n      this.cd?.detectChanges();\n    }),\n  ).subscribe()\n);\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.setComponentContainer();\n    }, 1000);\n  }\n\n  private setComponentContainer(): void {\n    this.containerHeight = this.el.nativeElement.offsetHeight;\n    this.siblingHeight = this.getSmallestSiblingHeight(this.el);\n    if (\n      !this.smallContainer ||\n      this.containerHeight > (this.siblingHeight ?? 0)\n    )\n      this.lastContainerHeight = this.containerHeight;\n    this.smallContainer =\n      (this.smallContainer ? this.lastContainerHeight : this.containerHeight) >\n      (this.siblingHeight ?? 0);\n    this.cd?.detectChanges();\n  }\n\n  private getSmallestSiblingHeight(element: ElementRef): number {\n    if(element?.nativeElement?.parentNode?.children) {\n      const siblings = Array.from(element?.nativeElement?.parentNode?.children);\n      const filteredSiblings = siblings.filter(sibling => sibling !== element.nativeElement);\n      const heights = filteredSiblings.map(sibling => (sibling as HTMLElement).offsetHeight);\n      return heights.length > 0 ? Math.min(...heights) : 0;\n    }\n    return 0;\n  }\n\n  private getUniqueIdentifier(name: string): string {\n    const components = this._winRef.document.getElementsByTagName(\n      'atcpps-vehicle-selector'\n    );\n    return `${name}-${components.length}`;\n  }\n\n  browseCTAClick(): void {\n    this._flyOutHeaderService.toggleFlyout(\n      FlyoutheaderComponentsType.VINSELECTOR\n    );\n    this._vinFilterService.updateToggleBtnState(true);\n    this._routingService.go({ cxRoute: 'searchByVehicle' });\n  }\n\n  setThemeFromCmsStyleClass(styleClasses: string): void {\n    if (styleClasses.includes('dark')) {\n      this.theme = 'dark';\n    } else if (styleClasses.includes('light')) {\n      this.theme = 'light';\n    }\n  }\n\n  onVinVehicleDataChanged(): void {\n    this.reselectTab();\n  }\n\n  onValidationInProgress(validationInProgress: boolean) {\n    this.validationInProgress = validationInProgress;\n  }\n\n  private reselectTab(): void {\n    this.selectedTabName = undefined;\n    setTimeout(() => {\n      this.selectedTabName = this.selectedTab?.name;\n      this.cd?.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vin-filter/vin-filter.component.html",
    "messages": [
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 17,
        "column": 34,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 17,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                538,
                564
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                538,
                564
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                538,
                564
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      },
      {
        "ruleId": "@angular-eslint/template/no-negated-async",
        "severity": 1,
        "message": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
        "line": 25,
        "column": 17,
        "nodeType": null,
        "messageId": "noNegatedAsync",
        "endLine": 25,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestFalseComparison",
            "fix": {
              "range": [
                846,
                872
              ],
              "text": "(vinVehicleData$ | async) === false"
            },
            "desc": "Compare with `false`"
          },
          {
            "messageId": "suggestNullComparison",
            "fix": {
              "range": [
                846,
                872
              ],
              "text": "(vinVehicleData$ | async) === null"
            },
            "desc": "Compare with `null`"
          },
          {
            "messageId": "suggestUndefinedComparison",
            "fix": {
              "range": [
                846,
                872
              ],
              "text": "(vinVehicleData$ | async) === undefined"
            },
            "desc": "Compare with `undefined`"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<div\n  class=\"vf-wrapper\"\n  [ngClass]=\"{ collapsed: !isExpanded, expanded: isExpanded }\"\n>\n  <button\n    class=\"heading\"\n    (click)=\"toggleBlock()\"\n    [attr.aria-expanded]=\"isExpanded\"\n    attr.aria-label=\"Vehicle\"\n  >\n    {{ \"vinFilter.btnTitle\" | cxTranslate }}\n    <cx-icon class=\"collapse-icon\" [type]=\"iconTypes.COLLAPSE\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"iconTypes.EXPAND\"></cx-icon>\n  </button>\n  <div class=\"vf-wrapper__content\">\n    <div class=\"vf-wrapper__vehicle-selector\">\n      <p class=\"vin-info\" *ngIf=\"!(vinVehicleData$ | async)\">\n        {{ \"vinFilter.note\" | cxTranslate }}\n      </p>\n      <atcpps-vin-vehicle-selection\n        (manuallyChanged)=\"onVehicleManuallyChanged()\"\n        [placeHolderText]=\"'vinFilter.placeholder' | cxTranslate\"\n      ></atcpps-vin-vehicle-selection>\n    </div>\n    <div *ngIf=\"!(vinVehicleData$ | async)\" class=\"vf-wrapper__help-section\">\n      <atcpps-vehicle-finder [infoText]=\"'vinFilter.helpText' | cxTranslate\">\n      </atcpps-vehicle-finder>\n    </div>\n    <div *ngIf=\"vinVehicleData$ | async\" class=\"vf-wrapper__toggle-section\">\n      <span>\n        {{ \"vinFilter.showOnlyText\" | cxTranslate }}\n      </span>\n      <wb-toggle\n        [checked]=\"toggleState$ | async\"\n        (wbchange)=\"toggleFilter($event)\"\n      ></wb-toggle>\n    </div>\n  </div>\n</div>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vin-filter/vin-filter.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1931,
                1934
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1931,
                1934
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ICON_TYPE } from '@spartacus/storefront';\nimport { VinVehicleData } from '../../core/models/vehicle.models';\nimport { VinFilterService } from '../../core/services/vin-filter.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { VehicleStateService } from '../../state/vehicle-state.service';\nimport { pairwise, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'atcpps-vin-filter',\n  templateUrl: './vin-filter.component.html',\n  styleUrls: ['./vin-filter.component.scss'],\n})\nexport class VinFilterComponent implements OnInit, OnDestroy {\n  isExpanded = true;\n  subscriptions: Subscription;\n  compSubscription = new Subscription();\n  toggleState$: Observable<boolean> = this._vinFilterService.vinFilterToggle$;\n  vinVehicleData$: Observable<VinVehicleData | undefined> =\n    this._vinVehicleSelectionService.vinVehicleData$;\n  iconTypes = ICON_TYPE;\n  constructor(\n    private _vinFilterService: VinFilterService,\n    private _vinVehicleSelectionService: VehicleStateService\n  ) {}\n  ngOnDestroy(): void {\n    this.compSubscription.unsubscribe();\n  }\n  ngOnInit(): void {\n    this.compSubscription.add(\n      this.vinVehicleData$\n      .pipe(startWith(null), pairwise())\n      .subscribe(([prevVehicleData, currVehicleData]) => {\n        if (\n          currVehicleData &&\n          this._vinFilterService._getCompatibleArticleNumbers(currVehicleData.vin)\n            .length === 0\n        ) {\n          this._loadProductSku(false);\n        }\n        else {\n          (prevVehicleData && !currVehicleData) ?\n            this._vinFilterService.fetchFirstPage() :\n            this._vinFilterService.refreshListPage();\n        }\n      })\n    );\n  }\n\n  onVehicleManuallyChanged(): void {\n    this._vinFilterService.updateToggleBtnState(true);\n  }\n\n  toggleBlock(): void {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  toggleFilter(event: any) {\n    const toggleStatus = event?.target?.checked;\n    this._vinFilterService.updateToggleBtnState(toggleStatus);\n    this._loadProductSku(true);\n  }\n\n  private _loadProductSku(loadFistPage: boolean) {\n    this._vinFilterService.loadProductSkus(loadFistPage);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/features/vehicle-configurator/components/vin-vehicle-selection/vin-vehicle-selection.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2840,
                2843
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2840,
                2843
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { VehicleStateService } from '../../state/vehicle-state.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n  VEHICLE_DATA_IMG_SIZE,\n  VinVehicleData,\n} from '../../core/models/vehicle.models';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'atcpps-vin-vehicle-selection',\n  templateUrl: './vin-vehicle-selection.component.html',\n})\nexport class VinVehicleSelectionComponent implements OnInit, OnDestroy {\n  @Input() theme = 'light';\n  @Input() id = 'input-id';\n  @Input() imageSize = VEHICLE_DATA_IMG_SIZE.MEDIUM;\n  @Output() changed = new EventEmitter();\n  @Output() manuallyChanged = new EventEmitter();\n  @Output() validationInProgress = new EventEmitter();\n  @Input() placeHolderText: string;\n  defaultImagePath = './assets/images/placeholder_limousine-right.webp';\n  vinInput = '';\n  isValidVin: boolean | undefined;\n  vinVehicleData$: Observable<VinVehicleData | undefined> =\n    this._vehicleSelectionService.vinVehicleData$;\n  vinValidationForm: UntypedFormGroup;\n  vinErrorMessage = false;\n  vinVehicleSubscription: Subscription;\n  vehicleImageUrl: string;\n  previousVehicleData: VinVehicleData | undefined;\n\n  constructor(\n    private _vehicleSelectionService: VehicleStateService,\n    private fb: UntypedFormBuilder,\n    private cd: ChangeDetectorRef\n  ) {\n    this.vinVehicleSubscription = this.vinVehicleData$?.subscribe(\n      (vehicleData: VinVehicleData | undefined) => {\n        if (vehicleData) {\n          this.vehicleImageUrl = this._getImageByIndex(\n            vehicleData,\n            this.imageSize\n          );\n        }\n        if (this.hasDataChanged(vehicleData)) {\n          this.changed.emit(vehicleData);\n          this.previousVehicleData = vehicleData;\n        }\n      }\n    );\n  }\n\n  ngOnInit(): void {\n    this.buildForm();\n  }\n\n  private hasDataChanged(vehicleData: VinVehicleData | undefined) {\n    return (\n      JSON.stringify(vehicleData) !== JSON.stringify(this.previousVehicleData)\n    );\n  }\n\n  private buildForm(): void {\n    this.vinValidationForm = this.fb.group({\n      vinInput: ['', [Validators.required, Validators.minLength(17)]],\n    });\n\n    this.vinValidationForm\n      .get('vinInput')\n      ?.valueChanges.subscribe((value: string) => {\n        this.showErrorMessage(false);\n        if (value?.length === 17) {\n          this.validateEnteredVin(value);\n        }\n      });\n  }\n\n  private validateEnteredVin(vin: string): void {\n    this._vehicleSelectionService\n      .validateVin(vin)\n      .pipe(tap(() => this.validationInProgress.emit(true)))\n      .subscribe((res: any) => this.setVinValidationResult(res));\n  }\n\n  private setVinValidationResult = (\n    result: VinVehicleData | HttpErrorResponse\n  ) => {\n    if (result instanceof HttpErrorResponse) {\n      this.isValidVin = false;\n      this.validationInProgress.emit(false);\n      if (result.status !== 200) {\n        this.showErrorMessage(true);\n      }\n    } else if (result?.vin) {\n      this.isValidVin = true;\n      this.showErrorMessage(false);\n      this.validationInProgress.emit(false);\n      this.updateVinVehicleData(result);\n      this.manuallyChanged.emit();\n    }\n  };\n\n  private showErrorMessage(show: boolean): void {\n    this.vinErrorMessage = show;\n    this.cd.markForCheck();\n  }\n\n  private updateVinVehicleData(data: VinVehicleData): void {\n    this._vehicleSelectionService.updateVehicleData(data);\n  }\n\n  public clearSelectedVinVehicleData(): void {\n    this.isValidVin = undefined;\n    this._vehicleSelectionService.clearVehicleData();\n    this.vinValidationForm.reset();\n  }\n\n  private _getImageByIndex(\n    vehicleData: VinVehicleData,\n    size: VEHICLE_DATA_IMG_SIZE\n  ) {\n    const imageEntries = vehicleData?.images?.entry;\n    if (!imageEntries) return '';\n    const entry = imageEntries.find((item) => item.key === size);\n    return entry?.value ?? '';\n  }\n\n  ngOnDestroy(): void {\n    this.vinVehicleSubscription?.unsubscribe();\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/models/mb-search-box.model.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                116,
                119
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                116,
                119
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "declare module '@spartacus/storefront' {\n    interface SearchResults {\n        message?: string;\n        products?: any[];\n        suggestions?: string[];\n        keywordRedirectUrl?: string;\n    }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/outlets/product/product-price/product-price.component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                597,
                600
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                597,
                600
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ProductDetailOutlets,\n  CurrentProductService,\n} from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\n\nimport { filter } from 'rxjs/operators';\nimport { Product } from '@spartacus/core';\n\n@Component({\n  selector: 'atcpps-product-price-outlet',\n  templateUrl: './product-price.component.html',\n  styleUrls: ['./product-price.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductPriceOutletComponent {\n  outlets = ProductDetailOutlets;\n  product$: Observable<Product | any> = this.currentProductService\n    .getProduct()\n    .pipe(filter(Boolean));\n  constructor(private currentProductService: CurrentProductService) {}\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/services/custom-http-auth-interceptor.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                464,
                467
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                464,
                467
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                518,
                521
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                518,
                521
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable, } from '@angular/core';\nimport { HttpRequest, HttpEvent, HttpHandler, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { SiteContextParamsService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomHttpAuthInterceptorService implements HttpInterceptor {\n  constructor(private _siteContextParamsService: SiteContextParamsService) { }\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n\n      if (request.url.includes('authorizationserver/oauth/token')) {\n\n        if (localStorage.getItem('oneTimeToken')) {\n\n          const oneTimeToken = localStorage.getItem('oneTimeToken');\n          const currentSite= this._siteContextParamsService.getParamValues('baseSite');\n          if(localStorage.getItem('guid')){\n\n            const guid = localStorage.getItem('guid');\n            request = request.clone({\n              body: request.body.delete(\"grant_type\").\n                      delete(\"scope\").\n                      delete(\"username\").\n                      delete(\"password\").\n                      append(\"grant_type\",\"ciasToken\").\n                      append(\"oneTimeToken\",oneTimeToken).\n                      append(\"guid\",guid).\n                      append(\"currentSiteId\",currentSite)\n          });\n          //localStorage.removeItem('guid');\n          }\n          else {\n            request = request.clone({\n              body: request.body.delete(\"grant_type\").\n                      delete(\"scope\").\n                      delete(\"username\").\n                      delete(\"password\").\n                      append(\"grant_type\",\"ciasToken\").\n                      append(\"oneTimeToken\",oneTimeToken).\n                      append(\"currentSiteId\",currentSite)\n          });\n          }\n            localStorage.removeItem('oneTimeToken');\n        }\n      }\n\n    return next.handle(request);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/store/browser-storage.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                250,
                253
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                250,
                253
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserStorageService {\n  constructor(private _winref: WindowRef) {}\n  public storeItem(key: string, value: any): void {\n    this._winref?.localStorage?.setItem(key, value);\n  }\n\n  public readItem(key: string) {\n    return this._winref?.localStorage?.getItem(key);\n  }\n\n  public deleteItem(key: string): void {\n    this._winref?.localStorage?.removeItem(key);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/tracking/events/services/custom-cart-event.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1919,
                1922
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1919,
                1922
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1947,
                1950
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1947,
                1950
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { createFrom } from '@spartacus/core';\nimport { EventService } from '@spartacus/core';\nimport { filter, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport {\n  Cart,\n  CartAddEntrySuccessEvent,\n  CartRemoveEntrySuccessEvent,\n  CartUiEventAddToCart,\n  CartUpdateEntrySuccessEvent,\n  DeleteCartEvent,\n} from '@spartacus/cart/base/root';\nimport {\n  CustomAddToCartEvent,\n  CustomDeleteCartEvent,\n  CustomRemoveFromCartEvent,\n  CustomUpdateCartSuccessEvent,\n} from '../event.models';\nimport { GtmDataService } from '../../gtm/services/gtm-data.service';\nimport { TRACKING_CONSTS } from '../../tracking.constants';\nimport {\n  AnalyticsCartDetails,\n  AnalyticsCartEvent,\n  AnalyticsProduct,\n} from '../../gtm/models/gtm.models';\nimport { Observable } from 'rxjs';\nimport { PageEvent } from '@spartacus/storefront';\nimport { ProductDetailsPageEvent } from '@spartacus/storefront';\nimport { CurrentProductService } from '@spartacus/storefront';\nimport { Product } from '@spartacus/core';\nimport { ActiveCartService } from '@spartacus/cart/base/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomCartEventService {\n  constructor(\n    private _eventService: EventService,\n    private _gtmDataService: GtmDataService,\n    private _currentProductService: CurrentProductService,\n    private _activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  protected register() {\n    this.registerEvent(\n      CustomAddToCartEvent,\n      this.buildCartAddEntrySuccessEvent()\n    );\n\n    this.registerEvent(\n      CustomRemoveFromCartEvent,\n      this.buildCartRemoveEntrySuccessEvent()\n    );\n\n    this.registerEvent(\n      CustomUpdateCartSuccessEvent,\n      this.buildCartUpdateEntrySuccessEvent()\n    );\n\n    this.registerEvent(\n      CustomDeleteCartEvent,\n      this.buildDeleteCartSuccessEvent()\n    );\n  }\n\n  private registerEvent(eventType: any, observable: Observable<any>) {\n    this._eventService.register(eventType, observable);\n  }\n\n  private buildCartAddEntrySuccessEvent(): Observable<CustomAddToCartEvent> {\n    // cartUiEventAddToCart - This event is intended for the UI feedback like the added to cart dialog.\n    return this._eventService?.get(CartUiEventAddToCart).pipe(\n      switchMap(() => {\n        return this._eventService?.get(CartAddEntrySuccessEvent).pipe(\n          withLatestFrom(this._currentProductService.getProduct()),\n          map(([cartAddEntrySuccessEvent, product]) => {\n            return this.createCustomAddToCartEvent(\n              cartAddEntrySuccessEvent,\n              product\n            );\n          })\n        );\n      })\n    );\n  }\n\n  private buildCartRemoveEntrySuccessEvent(): Observable<CustomRemoveFromCartEvent> {\n    return this._eventService?.get(CartRemoveEntrySuccessEvent).pipe(\n      withLatestFrom(\n        this._eventService?.get(PageEvent),\n        this._currentProductService.getProduct(),\n      ),\n      map(([cartRemoveEntrySuccessEvent, pageEvent, product]) => {\n        const eventDetails: AnalyticsCartDetails =\n          this.getRemoveEntryEventDetails(\n            cartRemoveEntrySuccessEvent,\n            pageEvent,\n            product\n          );\n\n        return createFrom(\n          CustomRemoveFromCartEvent,\n          this.generateEventObject(eventDetails)\n        );\n      })\n    );\n  }\n\n  private buildCartUpdateEntrySuccessEvent(): Observable<CustomUpdateCartSuccessEvent> {\n    return this._eventService?.get(CartUpdateEntrySuccessEvent).pipe(\n      withLatestFrom(\n        this._eventService?.get(PageEvent),\n        this._currentProductService.getProduct(),\n      ),\n      map(([cartUpdateEntrySuccessEvent, pageEvent, product]) => {\n        return this.createCartUpdateCartSuccessEvent(\n          cartUpdateEntrySuccessEvent,\n          pageEvent,\n          product\n        );\n      })\n    );\n  }\n\n  private buildDeleteCartSuccessEvent(): Observable<CustomDeleteCartEvent> {\n    return this._eventService?.get(DeleteCartEvent).pipe(\n      withLatestFrom(this._activeCartService.getActive()),\n      filter(([ , cart]) => Boolean(cart.totalItems)),\n      map(([ , cart]) => {\n        return this.createCustomDeleteCartEvent(cart);\n      })\n    );\n  }\n\n  private createCustomAddToCartEvent(\n    cartAddEntrySuccessEvent: CartAddEntrySuccessEvent,\n    product: Product | null\n  ): AnalyticsCartEvent {\n    const addToCartDetais = this.getAddToCartDetails(\n      cartAddEntrySuccessEvent,\n      product\n    );\n    return createFrom(\n      CustomAddToCartEvent,\n      this.generateEventObject(addToCartDetais)\n    );\n  }\n\n  private createCustomDeleteCartEvent(cart: Cart): AnalyticsCartEvent {\n    const eventDetails: AnalyticsCartDetails =\n      this.getDeleteCartEventDetails(cart);\n    return createFrom(\n      CustomDeleteCartEvent,\n      this.generateEventObject(eventDetails)\n    );\n  }\n\n  private createCartUpdateCartSuccessEvent(\n    cartUpdateEntrySuccessEvent: CartUpdateEntrySuccessEvent,\n    pageEvent: PageEvent,\n    product: Product | null\n  ): AnalyticsCartEvent {\n    const eventDetails: AnalyticsCartDetails = this.getUpdateEntryEventDetails(\n      cartUpdateEntrySuccessEvent,\n      pageEvent,\n      product\n    );\n\n    return createFrom(\n      CustomUpdateCartSuccessEvent,\n      this.generateEventObject(eventDetails)\n    );\n  }\n\n  private getAddToCartDetails(\n    event: CartAddEntrySuccessEvent,\n    product: Product | null\n  ): AnalyticsCartDetails {\n    const productData = product || event?.entry?.product;\n    const products = productData\n      ? [\n          this._gtmDataService.transformCartProduct(\n            productData,\n            event?.quantityAdded\n          ),\n        ]\n      : [];\n\n    return {\n      name: TRACKING_CONSTS.eventNames.addToCart,\n      category: TRACKING_CONSTS.eventCategories.feature,\n      action: TRACKING_CONSTS.eventActions.productDetail,\n      label: TRACKING_CONSTS.eventLabels.addToCart,\n      products: products,\n    };\n  }\n\n  private getUpdateEntryEventDetails(\n    cartEvent: CartUpdateEntrySuccessEvent,\n    pageEvent: PageEvent,\n    product: Product | null\n  ): AnalyticsCartDetails {\n    const { entry, quantity } = cartEvent;\n    const entryQty = entry?.quantity || 0;\n    const isIncrease = quantity > entryQty;\n    const productData = product || {\n      ...(entry?.product || {}),\n      price: entry?.basePrice,\n    };\n    const eventName = isIncrease\n      ? TRACKING_CONSTS.eventNames.addToCart\n      : TRACKING_CONSTS.eventNames.removeFromCart;\n    const eventCategory = TRACKING_CONSTS.eventCategories.feature;\n    const eventAction = this.getEventActionFromPageEvent(pageEvent);\n    const eventLabel = isIncrease\n      ? TRACKING_CONSTS.eventLabels.addToCartUpdate\n      : TRACKING_CONSTS.eventLabels.removeFromCartUpdate;\n    const quantityChanged = isIncrease\n      ? quantity - entryQty\n      : entryQty - quantity;\n\n    return {\n      name: eventName,\n      category: eventCategory,\n      action: eventAction,\n      label: eventLabel,\n      products: [\n        this._gtmDataService.transformCartProduct(productData, quantityChanged),\n      ],\n    };\n  }\n\n  private getRemoveEntryEventDetails(\n    cartEvent: CartRemoveEntrySuccessEvent,\n    pageEvent: PageEvent,\n    product: Product | null\n  ) {\n    const { entry } = cartEvent;\n    const quantityChanged = cartEvent?.entry?.quantity || 0;\n    const productData = product || {\n      ...(entry?.product || {}),\n      price: entry?.basePrice,\n    };\n    const eventName = TRACKING_CONSTS.eventNames.removeFromCart;\n    const eventCategory = TRACKING_CONSTS.eventCategories.feature;\n    const eventAction = this.getEventActionFromPageEvent(pageEvent);\n    const eventLabel = TRACKING_CONSTS.eventLabels.removeFromCart;\n\n    return {\n      name: eventName,\n      category: eventCategory,\n      action: eventAction,\n      label: eventLabel,\n      products: [\n        this._gtmDataService.transformCartProduct(productData, quantityChanged),\n      ],\n    };\n  }\n\n  private getDeleteCartEventDetails(cart: Cart) {\n    const { entries } = cart;\n    const productData = entries?.map((entry) => {\n      const { product, quantity, basePrice } = entry;\n      const transformedProduct: AnalyticsProduct = {\n        ...this._gtmDataService.transformCartProduct(product, quantity),\n        pricewtax: basePrice?.value || TRACKING_CONSTS.EMPTY_VALUE,\n      };\n      return transformedProduct;\n    });\n    const eventName = TRACKING_CONSTS.eventNames.removeFromCart;\n    const eventCategory = TRACKING_CONSTS.eventCategories.feature;\n    const eventAction = TRACKING_CONSTS.eventActions.cartPage;\n    const eventLabel = TRACKING_CONSTS.eventLabels.clearCart;\n\n    return {\n      name: eventName,\n      category: eventCategory,\n      action: eventAction,\n      label: eventLabel,\n      products: productData,\n    };\n  }\n\n  private getEventActionFromPageEvent(pageEvent: PageEvent): string {\n    const isProductDetailPage = pageEvent instanceof ProductDetailsPageEvent;\n    const eventAction = isProductDetailPage\n      ? TRACKING_CONSTS.eventActions.addToCartModal\n      : TRACKING_CONSTS.eventActions.cartPage;\n    return eventAction;\n  }\n\n  private generateEventObject(\n    eventDetail: AnalyticsCartDetails\n  ): AnalyticsCartEvent {\n    return {\n      event: TRACKING_CONSTS.interactionLabel,\n      eventDetail: eventDetail,\n      application: this._gtmDataService.getPageApplication(),\n    };\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/tracking/events/services/custom-navigation-event-builder.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2865,
                2868
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2865,
                2868
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 178,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 178,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5892,
                5895
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5892,
                5895
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport {\n  EventService,\n  CmsService,\n  createFrom,\n  isNotNullable,\n  ProductSearchService,\n  ProductSearchPage,\n  Breadcrumb,\n} from '@spartacus/core';\nimport {\n  NavigationEvent,\n  CurrentProductService,\n  CategoryPageResultsEvent,\n  SearchPageResultsEvent,\n} from '@spartacus/storefront';\nimport { Observable, combineLatest, zip } from 'rxjs';\nimport {\n  switchMap,\n  map,\n  filter,\n  take,\n  first,\n  withLatestFrom,\n  pairwise,\n  startWith,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {\n  CustomCheckoutPageEvent,\n  CustomOrderPlacedEvent,\n  CustomProductCategoryListPageEvent,\n  CustomProductDetailsPageEvent,\n  CustomProductSearchListPageEvent,\n  GenericNavigationEvent,\n} from '../event.models';\nimport { PageView } from '../../gtm/models/gtm.models';\nimport { TRACKING_CONSTS } from '../../tracking.constants';\nimport { GtmDataService } from '../../gtm/services/gtm-data.service';\nimport { OrderFacade } from '@spartacus/order/root';\nimport { ActiveCartService } from '@spartacus/cart/base/core';\nimport { CheckoutQueryFacade } from '@spartacus/checkout/base/root';\nimport { PageEvent } from '@spartacus/storefront';\nimport { UtilService } from 'src/app/utilities/util.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomNavigationEventBuilder {\n  constructor(\n    private _cmsService: CmsService,\n    private _eventService: EventService,\n    private _productService: CurrentProductService,\n    private _gtmDataService: GtmDataService,\n    private _orderService: OrderFacade,\n    private _activeCartService: ActiveCartService,\n    private _checkoutQueryFacade: CheckoutQueryFacade,\n    private _productSearchService: ProductSearchService,\n    private _utilService: UtilService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this._eventService.register(\n      GenericNavigationEvent,\n      this.buildGenericNavigationEvent()\n    );\n    this._eventService.register(\n      CustomProductDetailsPageEvent,\n      this.buildProductDetailsPageEvent()\n    );\n    this._eventService.register(\n      CustomProductCategoryListPageEvent,\n      this.buildProductCategoryListPageEvent()\n    );\n    this._eventService.register(\n      CustomProductSearchListPageEvent,\n      this.buildProductSearchListPageEvent()\n    );\n    this._eventService.register(\n      CustomOrderPlacedEvent,\n      this.buildOrderPlacedEvent()\n    );\n    this._eventService.register(\n      CustomCheckoutPageEvent,\n      this.buildCheckoutPageEvent()\n    );\n  }\n\n  protected buildGenericNavigationEvent(): Observable<GenericNavigationEvent> {\n    return this._eventService.get(NavigationEvent).pipe(\n      switchMap((navigationEvent: NavigationEvent) => {\n        return this._cmsService.getPage(navigationEvent.context).pipe(\n          first(),\n          filter((page) => !!page),\n          map((page: any) => {\n            return createFrom(GenericNavigationEvent, {\n              ...this._constructPageView(\n                page.analyticsPageName,\n                page.analyticsPageType\n              ),\n            });\n          })\n        );\n      })\n    );\n  }\n\n  protected buildProductDetailsPageEvent(): Observable<CustomProductDetailsPageEvent> {\n    const productDetailPageNavigation =\n      this._getListingPageNavigationEvent('product_detail');\n    const currentProduct = this._productService\n      .getProduct()\n      .pipe(filter(isNotNullable));\n\n    return zip(productDetailPageNavigation, currentProduct).pipe(\n      map(([navigationEvent, product]) => {\n        navigationEvent.page.products = [\n          this._gtmDataService.transformCoreProduct(product),\n        ];\n        return createFrom(CustomProductDetailsPageEvent, {\n          ...navigationEvent,\n        });\n      })\n    );\n  }\n\n  protected buildProductCategoryListPageEvent(): Observable<CustomProductCategoryListPageEvent> {\n    const productListPageNavEvent =\n      this._getListingPageNavigationEvent('product_list');\n    const filterSearchRes = this._getProductSearchResult();\n    const categoryPageVisited = this._eventService\n      .get(CategoryPageResultsEvent)\n      .pipe(\n        withLatestFrom(\n          this._eventService.get(PageEvent).pipe(\n            startWith(null), // https://github.com/ReactiveX/rxjs/issues/4772\n            pairwise()\n          ),\n          this._getPairedGenericNavigationEvent()\n        ),\n        distinctUntilChanged(\n          (\n            [previouslyEmittedCategoryPage],\n            [\n              currentCategoryPage,\n              [previousRoute, currentRoute],\n              [prevNavigation],\n            ]: [\n              CategoryPageResultsEvent,\n              [PageEvent | null, PageEvent | null],\n              [GenericNavigationEvent | null, GenericNavigationEvent | null]\n            ]\n          ) => {\n            const prevNavType = prevNavigation?.page?.type;\n            const isDuplicatedPageView =\n              previouslyEmittedCategoryPage.categoryCode ===\n                currentCategoryPage.categoryCode &&\n              previousRoute?.navigation.semanticRoute ===\n                currentRoute?.navigation.semanticRoute;\n            // Allow navigating back from SRP\n            if (previousRoute instanceof SearchPageResultsEvent) return false;\n            // Allow navigating from any other page (faq, cms, etc.)\n            if (isDuplicatedPageView && prevNavType) {\n              const resolvedPageTypes = [\n                'product_list',\n                'product_detail',\n                'homepage',\n              ];\n              if (!resolvedPageTypes.includes(prevNavType)) return false;\n            }\n            return isDuplicatedPageView;\n            // A true means that this item is not unique. If category code is the same AND last emitted semantic route\n            // is the same then this is a duplicate.\n          }\n        ),\n        map(([categoryPageEvent]: any) => {\n          return categoryPageEvent;\n        })\n      );\n\n    return categoryPageVisited.pipe(\n      withLatestFrom(productListPageNavEvent, filterSearchRes),\n      filter(([, , filterSearchRes]) => {\n        return Boolean(filterSearchRes);\n      }),\n      map(\n        ([categoryPageResultsEvent, navigationEvent]: [\n          CategoryPageResultsEvent,\n          GenericNavigationEvent,\n          boolean\n        ]) => {\n          navigationEvent.page.listName = categoryPageResultsEvent.categoryCode;\n          navigationEvent.page.name = `${navigationEvent.page.type}.${categoryPageResultsEvent.categoryCode}`;\n          return createFrom(CustomProductCategoryListPageEvent, {\n            ...navigationEvent,\n          });\n        }\n      )\n    );\n  }\n\n  protected buildProductSearchListPageEvent(): Observable<CustomProductSearchListPageEvent> {\n    const productSearchPageNavEvent =\n      this._getListingPageNavigationEvent('search_results');\n    const searchPageVisited = this._eventService\n      .get(SearchPageResultsEvent)\n      .pipe(\n        //skip(1),\n        withLatestFrom(this._getPairedGenericNavigationEvent()),\n        distinctUntilChanged(\n          (\n            [previouslyEmittedSearchPage],\n            [currentSearchPage, [prevNavigation, currNavigation]]: [\n              SearchPageResultsEvent,\n              [GenericNavigationEvent | null, GenericNavigationEvent | null]\n            ]\n          ) => {\n            const isDuplicatedSearchPage =\n              previouslyEmittedSearchPage.searchTerm ===\n                currentSearchPage.searchTerm &&\n              (prevNavigation?.page?.name === currNavigation?.page.name ||\n                prevNavigation === null);\n\n            return isDuplicatedSearchPage;\n          }\n        ),\n        map(\n          ([currentSearchPage]: [\n            SearchPageResultsEvent,\n            [GenericNavigationEvent | null, GenericNavigationEvent | null]\n          ]) => {\n            return currentSearchPage;\n          }\n        )\n      );\n    const filterSearchRes = this._getProductSearchResult();\n\n    return searchPageVisited.pipe(\n      withLatestFrom(productSearchPageNavEvent, filterSearchRes),\n      filter(([, , filterSearchRes]) => Boolean(filterSearchRes)),\n      map(([searchPageResultsEvent, navigationEvent]) => {\n        navigationEvent.page.search = {\n          term: searchPageResultsEvent.searchTerm,\n          autocomplete: searchPageResultsEvent.searchTerm,\n          results: '' + searchPageResultsEvent.numberOfResults,\n        };\n        return createFrom(CustomProductSearchListPageEvent, {\n          ...navigationEvent,\n        });\n      })\n    );\n  }\n\n  protected buildOrderPlacedEvent(): Observable<CustomOrderPlacedEvent> {\n    const orderConfirmationPageNavEvent =\n      this._getListingPageNavigationEvent('order_confirmation');\n    return orderConfirmationPageNavEvent.pipe(\n      switchMap((navigationEvent: GenericNavigationEvent) => {\n        return this._orderService.getOrderDetails().pipe(\n          map((order) => {\n            navigationEvent.page.transaction =\n              this._gtmDataService.transformTransactionData(order);\n            return createFrom(CustomOrderPlacedEvent, {\n              ...navigationEvent,\n            });\n          })\n        );\n      })\n    );\n  }\n\n  protected buildCheckoutPageEvent(): Observable<CustomCheckoutPageEvent> {\n    return this._eventService.get(GenericNavigationEvent).pipe(\n      filter((navigationEvent: GenericNavigationEvent) =>\n        this._gtmDataService.isCheckoutPage(navigationEvent.page.name)\n      ),\n      switchMap((navigationEvent: GenericNavigationEvent) => {\n        return combineLatest([\n          this._activeCartService.getActive(),\n          this._checkoutQueryFacade.getCheckoutDetailsState().pipe(\n            filter((state) => !state.loading),\n            map((state) => state.data)\n          ),\n        ]).pipe(\n          take(1),\n          map(([cartObject, checkoutObject]) => {\n            navigationEvent.page.cart = this._gtmDataService.transformCartData(\n              cartObject,\n              checkoutObject\n            );\n            return createFrom(CustomCheckoutPageEvent, {\n              ...navigationEvent,\n            });\n          })\n        );\n      })\n    );\n  }\n\n  private _getListingPageNavigationEvent(pageName: string) {\n    return this._eventService\n      .get(GenericNavigationEvent)\n      .pipe(\n        filter(\n          (navigationEvent: GenericNavigationEvent) =>\n            navigationEvent.page.name === pageName\n        )\n      );\n  }\n\n  private _constructPageView(\n    pageName: string | undefined,\n    pageType: string | undefined\n  ): PageView {\n    const pageView: PageView = {\n      event: TRACKING_CONSTS.pageViewLabel,\n      page: {\n        name: pageName,\n        type: this._isLogin(pageName)\n          ? TRACKING_CONSTS.LOGIN_PAGE_TYPE\n          : pageType,\n      },\n      application: this._gtmDataService.getPageApplication(),\n    };\n    return pageView;\n  }\n\n  private _isLogin(pageName: string | undefined): boolean {\n    return (\n      pageName === 'login_register' &&\n      this._utilService.getCurrentUrl().indexOf('?forced=') === -1\n    );\n  }\n\n  private _getProductSearchResult() {\n    return this._productSearchService.getResults().pipe(\n      pairwise(),\n      withLatestFrom(this._getPairedGenericNavigationEvent()),\n      map(\n        ([[prev, curr], [prevNavEvent, currNavEvent]]: [\n          [ProductSearchPage, ProductSearchPage],\n          [GenericNavigationEvent | null, GenericNavigationEvent | null]\n        ]) => {\n          const detectFacetOrSortingChange = this._detectFacetOrSortingChange(\n            prev,\n            curr\n          );\n          const isFreeTextSearch = this._isFreeTextSearch(\n            prev?.freeTextSearch,\n            curr?.freeTextSearch\n          );\n          if (prevNavEvent === null) {\n            return true;\n          } else if (currNavEvent?.page?.search && !isFreeTextSearch) {\n            return false;\n          }\n          return isFreeTextSearch || detectFacetOrSortingChange;\n        }\n      )\n    );\n  }\n\n  private _getPairedGenericNavigationEvent() {\n    return this._eventService\n      .get(GenericNavigationEvent)\n      .pipe(startWith(null), pairwise());\n  }\n\n  private _detectFacetOrSortingChange(\n    prev: ProductSearchPage,\n    curr: ProductSearchPage\n  ): boolean {\n    if (!prev || Object.keys(prev).length === 0) {\n      return true;\n    }\n    const toggledFilter =\n      this._getToggledBreadcrumb(curr.breadcrumbs, prev.breadcrumbs) ||\n      this._getToggledBreadcrumb(prev.breadcrumbs, curr.breadcrumbs);\n    const isCategoryChange = this._isCategoryChange(toggledFilter);\n    const isActiveSortingChange =\n      !isCategoryChange && this._isSortingChange(prev, curr);\n    const isFilterChange = isCategoryChange ? false : toggledFilter;\n\n    return !isActiveSortingChange && !isFilterChange;\n  }\n\n  private _isFreeTextSearch(\n    prevSearch: string | undefined,\n    currSearch: string | undefined\n  ): boolean {\n    if (currSearch) {\n      return prevSearch !== currSearch;\n    } else {\n      return false;\n    }\n  }\n\n  private _isCategoryChange(filter: Breadcrumb | undefined): boolean {\n    return filter?.facetCode === 'allCategories';\n  }\n\n  private _isSortingChange(\n    prev: ProductSearchPage,\n    curr: ProductSearchPage\n  ): boolean {\n    return prev?.pagination?.sort !== curr?.pagination?.sort;\n  }\n\n  private _getToggledBreadcrumb(\n    bc1: Breadcrumb[] | undefined,\n    bc2: Breadcrumb[] | undefined\n  ): Breadcrumb | undefined {\n    let toggled = undefined;\n    if (bc1 && bc2) {\n      toggled = bc1.find(\n        (x) =>\n          !bc2.find(\n            (y) =>\n              y.facetCode === x.facetCode &&\n              y.facetValueCode === x.facetValueCode\n          )\n      );\n    }\n    return toggled;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/tracking/events/services/custom-view-item-list-event.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                793,
                796
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                793,
                796
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1391,
                1394
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1391,
                1394
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1419,
                1422
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1419,
                1422
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_context' is defined but never used.",
        "line": 65,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'result' is defined but never used.",
        "line": 66,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3682,
                3685
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3682,
                3685
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { \n  EventService, \n  ProductSearchPage, \n  createFrom, \n  ProductSearchService,\n  RouterState,\n  LanguageService,\n  CurrencyService,\n  RoutingService,\n  ActivatedRouterStateSnapshot\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { CustomViewItemListEvent } from '../event.models';\nimport { debounceTime, distinctUntilChanged, filter, map, skip, switchMap } from 'rxjs/operators';\nimport { GtmDataService } from '../../gtm/services/gtm-data.service';\nimport { TRACKING_CONSTS } from '../../tracking.constants';\nimport { configPageSize } from 'src/app/spartacus/spartacus-configuration.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomViewItemListEventService {\n  private unregisterEvent: any;\n\n  constructor(\n    private _eventService: EventService,\n    private _gtmDataService: GtmDataService,\n    private _productSearchService: ProductSearchService,\n    private _routing: RoutingService,\n    private _currencyService: CurrencyService,\n    private _languageService: LanguageService,\n  ) { \n    this.register();\n  }\n\n  public register() {\n    this.unregisterEvent = this.registerEvent(\n      CustomViewItemListEvent,\n      this.buildViewItemListEvent()\n    );\n  }\n\n  public unregister() {\n    if(this.unregisterEvent) this.unregisterEvent();    \n  }\n\n  private registerEvent(eventType: any, observable: Observable<any>) {\n    this._eventService.register(eventType, observable);\n  }\n\n  private buildViewItemListEvent(): Observable<CustomViewItemListEvent> {\n    return combineLatest([\n      this._routing.getRouterState().pipe(\n        distinctUntilChanged((x, y) => {\n          // router emits new value also when the anticipated `nextState` changes\n          // but we want to perform search only when current url changes\n          return x.state.url === y.state.url;\n        })\n      ),\n      ...[this._languageService.getActive(), this._currencyService.getActive()],\n    ])\n    .pipe(\n      debounceTime(0),\n      map(([routerState, ..._context]) => (routerState as RouterState).state),\n      switchMap((result: ActivatedRouterStateSnapshot) => {\n        return this._productSearchService.getResults()\n        .pipe(\n          skip(1),\n          filter((result: ProductSearchPage) => Boolean(\n            Object.keys(result).length > 0 && \n            (result.freeTextSearch || result?.breadcrumbs?.length)\n          )),\n          map((result: ProductSearchPage) => {\n            return createFrom(\n              CustomViewItemListEvent,\n              this.generateEventObjectFromPageSearch(result)\n            );\n        }))\n      })\n    );\n  }\n\n  private generateEventObjectFromPageSearch(result: ProductSearchPage): CustomViewItemListEvent {\n    const productSearch = TRACKING_CONSTS.listName.productSearch;\n    const category = (result?.breadcrumbs?.length) ? this.getCategoryFromBreadcrumb(result.breadcrumbs) : TRACKING_CONSTS.EMPTY_VALUE;\n    const listName = result?.freeTextSearch ? productSearch : category;\n    const lastIndex = ((result?.pagination?.currentPage ?? 0) * (result?.pagination?.pageSize ?? configPageSize));\n    return {\n      event: TRACKING_CONSTS.interactionLabel,\n      eventDetail: {\n        name: TRACKING_CONSTS.eventNames.viewItemList,\n        category: TRACKING_CONSTS.eventCategories.impression,\n        action: TRACKING_CONSTS.eventActions.pageList,\n        label: listName,\n        listName: listName, \n        products: this._gtmDataService.getViewItemListProducts(result?.products, listName, lastIndex)\n      },\n      application: this._gtmDataService.getPageApplication(),\n    };\n  }\n\n  private getCategoryFromBreadcrumb(breadcrumbs: any[]): string | undefined {\n    const categoryIndex = [...breadcrumbs].reverse()\n      .findIndex(breadcrumb => breadcrumb.facetCode === 'category');\n\n    const allCategoriesIndex = breadcrumbs\n      .findIndex(breadcrumb => breadcrumb.facetCode === 'allCategories');\n\n    return categoryIndex !== -1\n      ? breadcrumbs[(breadcrumbs.length - 1) - categoryIndex].facetValueCode\n      : (allCategoriesIndex !== -1\n        ? breadcrumbs[allCategoriesIndex].facetValueCode\n        : TRACKING_CONSTS.EMPTY_VALUE);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/tracking/gtm/services/custom-gtm-colletor.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 105,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 105,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3261,
                3264
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3261,
                3264
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { GtmDataService } from './gtm-data.service';\nimport { CxEvent, WindowRef, AuthService } from '@spartacus/core';\nimport {\n  TmsCollector,\n  TmsCollectorConfig,\n  WindowObject,\n} from '@spartacus/tracking/tms/core';\nimport { GtmCollectorService } from '@spartacus/tracking/tms/gtm';\nimport { UtilService } from '../../../utilities/util.service';\nimport { LoggedInStatus } from '../../../common/constants';\nimport { Observable, Subscription } from 'rxjs';\nimport { EventService } from '@spartacus/core';\nimport { NavigationEvent } from '@spartacus/storefront';\nimport { switchMap } from 'rxjs/operators';\nimport { GlobalGTMEvent } from '../models/gtm.models';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomGtmColletorService\n  extends GtmCollectorService\n  implements TmsCollector\n{\n  private subGlobalPushEvent= new Subscription();\n  constructor(\n    private _eventService: EventService,\n    private _authService: AuthService,\n    private _utilService: UtilService,\n    windowRef: WindowRef,\n    private _gtmDataService: GtmDataService\n  ) {\n    super(windowRef);\n  }\n\n  override init(config: TmsCollectorConfig, windowObject: WindowObject): void {\n    super.init(config, windowObject);\n    this.initGlobalPushEvent(config, windowObject);\n  }\n\n  map?<T extends CxEvent>(event: T): T | object {\n    return this._gtmDataService.transformEvent(event);\n  }\n\n  private initGlobalPushEvent(\n    config: TmsCollectorConfig,\n    windowObject: WindowObject\n  ): void {\n    const obsUserLoggedIn: Observable<boolean> =\n      this._authService.isUserLoggedIn();\n    const obsNavigationEvent: Observable<NavigationEvent> =\n      this._eventService.get(NavigationEvent);\n    let navigationEventRes: NavigationEvent;\n\n    this.subGlobalPushEvent = obsNavigationEvent\n      .pipe(\n        switchMap((res: NavigationEvent) => {\n          navigationEventRes = res;\n          return obsUserLoggedIn;\n        })\n      )\n      .subscribe((isUserLoggedIn: boolean) => {\n        if (\n          navigationEventRes &&\n          navigationEventRes.url &&\n          !navigationEventRes.url.includes('token=')\n        ) {\n          super.pushEvent(\n            config,\n            windowObject,\n            this.getGlobalGTMPayload(isUserLoggedIn)\n          );\n          this.subGlobalPushEvent.unsubscribe();\n        }\n        return isUserLoggedIn;\n      });\n  }\n\n  private getGlobalGTMPayload(isUserLoggedIn: boolean): GlobalGTMEvent {\n    return {\n      event: 'global',\n      site: {\n        market: this._utilService.getActiveCountryIsoCode(),\n        language: this._utilService.getSiteContext('language').split('_')[0],\n        currency: this._utilService.getSiteContext('currency'),\n        mediaQuery: this._utilService.getMediaQuery(),\n        sysEnv: this._utilService.getEnvProps().gtmEnvName,\n      },\n      user: {\n        loginState: isUserLoggedIn\n          ? LoggedInStatus.isLoggedIn\n          : LoggedInStatus.isLoggesOut,\n      },\n      application: {\n        id: this._utilService.getApplicationId(),\n        version: this._utilService.getApplicationVersion(),\n      },\n    };\n  }\n\n  override pushEvent<T extends CxEvent>(\n    config: TmsCollectorConfig,\n    windowObject: WindowObject,\n    event: T | any\n  ): void {\n    const dataLayerProperty = config.dataLayerProperty ?? 'dataLayer';\n    if (!this._utilService.isEmptyObject(event))\n      windowObject[dataLayerProperty].push(event);\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/tracking/gtm/services/custom-tms.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2190,
                2193
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2190,
                2193
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 45,
        "column": 39,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 45,
        "endColumn": 67,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 61,
        "column": 13,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 61,
        "endColumn": 41,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable, isDevMode } from '@angular/core';\nimport { CxEvent } from '@spartacus/core';\nimport { TmsCollector, TmsService } from '@spartacus/tracking/tms/core';\nimport { GenericNavigationEvent } from '../../events/event.models';\nimport { CategoryPageResultsEvent } from '@spartacus/storefront';\nimport { SearchPageResultsEvent } from '@spartacus/storefront';\nimport { TRACKING_CONSTS } from '../../tracking.constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomTmsService extends TmsService {\n  /**\n   * Called only once to start collecting and dispatching events\n   */\n  override collect(): void {\n    if (!this.windowRef.isBrowser()) {\n      return;\n    }\n\n    for (const tmsCollectorConfig in this.tmsConfig.tagManager) {\n      if (!(tmsCollectorConfig in this.tmsConfig.tagManager)) {\n        continue;\n      }\n\n      const collectorConfig =\n        this.tmsConfig.tagManager[tmsCollectorConfig] ?? {};\n\n      if (!collectorConfig.collector) {\n        if (isDevMode()) {\n          console.warn(\n            `Skipping the '${tmsCollectorConfig}', as the collector is not defined.`\n          );\n        }\n        continue;\n      }\n\n      const events =\n        collectorConfig.events?.map((event) => this.eventsService.get(event)) ||\n        [];\n      const collector = this.injector.get<TmsCollector>(\n        collectorConfig.collector\n      );\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      collector.init(collectorConfig, this.windowRef.nativeWindow!);\n\n      this.subscription.add(\n        this.mapEvents(events).subscribe((event) => {\n          if (this._toBeIgnored(event)) return;\n          if (collectorConfig.debug) {\n            console.log(\n              `🎤 Pushing the following event to ${tmsCollectorConfig}: `,\n              event\n            );\n          }\n\n          event = collector.map ? collector.map(event) : event;\n          collector.pushEvent(\n            collectorConfig,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.windowRef.nativeWindow!,\n            event\n          );\n        })\n      );\n    }\n  }\n\n  private _toBeIgnored<T extends CxEvent | any>(event: T): boolean {\n    if (\n      event instanceof GenericNavigationEvent &&\n      this._shouldIgnoreGenericEvent(event.page.name, event.page.type)\n    )\n      return true;\n    if (event instanceof CategoryPageResultsEvent) return true;\n    if (event instanceof SearchPageResultsEvent) return true;\n    return false;\n  }\n\n  private _shouldIgnoreGenericEvent(\n    pageName: string | undefined,\n    pageType: string | undefined\n  ): boolean {\n    return (\n      pageName !== 'login_register' &&\n      pageName !== 'guest_checkout' &&\n      TRACKING_CONSTS.customNavigationPages.some(\n        (element) => element === pageType\n      )\n    );\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/tracking/gtm/services/gtm-data.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                938,
                941
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                938,
                941
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1001,
                1004
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1001,
                1004
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                4138,
                4141
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                4138,
                4141
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 155,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 155,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5231,
                5234
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5231,
                5234
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 172,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 172,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6009,
                6012
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6009,
                6012
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport {\n  Cart,\n  DeliveryMode,\n  PaymentDetails,\n  Voucher,\n} from '@spartacus/cart/base/root';\nimport { CxEvent } from '@spartacus/core';\nimport {\n  AnalyticsProduct,\n  AnalyticsTransactionDetails,\n  PageApplication,\n} from '../models/gtm.models';\nimport { Product } from '@spartacus/core';\nimport { Order } from '@spartacus/order/root';\nimport { TRACKING_CONSTS } from '../../tracking.constants';\nimport { CheckoutState } from '@spartacus/checkout/base/root';\nimport { UtilService } from 'src/app/utilities/util.service';\nimport { TrackingDetails } from 'src/app/features/product/models/mb.product.model';\nimport { VariantOptionQualifier } from '@spartacus/core';\nimport { VariantQualifier } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GtmDataService {\n  constructor(private _utilService: UtilService) { }\n\n  public transformEvent<T extends CxEvent>(event: any): T | object {\n    const eventObject = Object.assign({} as any, event);\n    //FIXME This deep cloning has to be checked later!\n    const transformedEvent = JSON.parse(JSON.stringify(eventObject));\n    return transformedEvent;\n  }\n\n  public transformCoreProduct(product: Product | null): AnalyticsProduct {\n    const transformedProduct: AnalyticsProduct = {\n      name: product?.trackingDetails?.name\n        ? product?.trackingDetails.name\n        : product?.trackingDetails?.variantName,\n      id: product?.trackingDetails?.id,\n      category: product?.trackingDetails?.category\n        ? product?.trackingDetails.category\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      type: product?.trackingDetails?.type\n        ? product.trackingDetails.type\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      brand: product?.trackingDetails?.brand\n        ? product.trackingDetails.brand\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      variantId: product?.trackingDetails?.variantId\n        ? product.trackingDetails.variantId\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      variantName: product?.trackingDetails?.variantName\n        ? product.trackingDetails.variantName\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      pricewtax: product?.price?.value\n        ? product?.price?.value\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      size: product?.trackingDetails?.size\n        ? product.trackingDetails.size\n        : TRACKING_CONSTS.EMPTY_VALUE,\n      color: product?.trackingDetails?.color\n        ? product.trackingDetails.color\n        : TRACKING_CONSTS.EMPTY_VALUE,\n    };\n    return transformedProduct;\n  }\n\n  private getVariant(product: Product, variantQualifier: VariantQualifier) {\n    const variant = product?.baseOptions?.[0]?.selected?.variantOptionQualifiers?.filter((variant: VariantOptionQualifier) => {\n      return variant.qualifier === variantQualifier\n    })\n    return variant?.[0]?.value\n  }\n\n  public transformTransactionData(order?: Order): AnalyticsTransactionDetails {\n    const transformIncomingData: AnalyticsTransactionDetails = {\n      id: order?.code,\n      qty: order?.totalItems,\n      pricewtax: order?.totalPriceWithTax?.value,\n      tax: order?.totalTax?.value,\n      shipcost: order?.deliveryCost?.value,\n      voucher: this.transformVoucherApplied(order?.appliedVouchers),\n      products: this.transformProducts(\n        order?.entries,\n        order?.paymentInfo,\n        order?.deliveryMode\n      ),\n    };\n    return transformIncomingData;\n  }\n\n  public transformCartData(\n    cart: Cart,\n    checkoutObject: CheckoutState | undefined\n  ): AnalyticsTransactionDetails {\n    const transformedCartData: AnalyticsTransactionDetails = {\n      id: cart?.code,\n      qty: cart?.totalItems,\n      pricewtax: cart?.totalPriceWithTax?.value,\n      products: this.transformProducts(\n        cart?.entries,\n        checkoutObject?.paymentInfo,\n        checkoutObject?.deliveryMode\n      ),\n    };\n    return transformedCartData;\n  }\n\n  private transformVoucherApplied(\n    vouchers: Voucher[] | undefined\n  ): string | undefined {\n    return vouchers\n      ? vouchers.map((voucher) => voucher.code).join(' | ')\n      : TRACKING_CONSTS.EMPTY_VALUE;\n  }\n\n  private transformProducts(\n    products?: any[],\n    paymentInfo?: PaymentDetails,\n    deliveryMode?: DeliveryMode\n  ): AnalyticsProduct[] | undefined {\n    const productsEntries = products?.map((entries) => {\n      const { product, quantity, basePriceWithTax } = entries;\n      const transformedProduct: AnalyticsProduct = {\n        ...this.transformCoreProduct(product),\n        pricewtax: basePriceWithTax,\n        qty: quantity,\n        shipmethod: deliveryMode?.code\n          ? deliveryMode.code\n          : TRACKING_CONSTS.EMPTY_VALUE,\n        paymethod: paymentInfo?.cardType?.code\n          ? paymentInfo.cardType.code\n          : TRACKING_CONSTS.EMPTY_VALUE,\n      };\n      return transformedProduct;\n    });\n    return productsEntries;\n  }\n\n  public isCheckoutPage(pageName: string | undefined): boolean {\n    return TRACKING_CONSTS.checkoutPages.some(\n      (element) => element === pageName\n    );\n  }\n\n  public getPageApplication(): PageApplication {\n    return {\n      id: this._utilService.getApplicationId(),\n      version: this._utilService.getApplicationVersion(),\n    };\n  }\n\n  public transformCartProduct(product: any, quantity: number | undefined) {\n    return {\n      ...this.transformCoreProduct(product),\n      qty: quantity ? quantity : TRACKING_CONSTS.EMPTY_VALUE,\n    };\n  }\n\n  public getPageCategoryFromTrackingDetails(trackingDetails: TrackingDetails): string {\n    const category = trackingDetails?.category ? trackingDetails.category.split('/')[0] : '';\n    return category;\n  }\n\n  public getViewItemListProducts(products: Product[] | undefined, listName: string | undefined, lastIndex: number, loadedProducts?: Product[]): AnalyticsProduct[] {\n    if(!products) return [];\n    return [\n      ...products.map((product, index) => {\n        const pageIndex = typeof lastIndex === 'number' ? (index + lastIndex) : index;\n        const carouselIndex = loadedProducts?.findIndex((item: any) => item.code === product.code);\n        const transformedProduct: AnalyticsProduct = {\n          ...this.transformCoreProduct(product),\n          qty: 1,\n          listName: listName,\n          index: typeof carouselIndex === 'number' ? carouselIndex : pageIndex\n        };\n        return transformedProduct;\n      })\n    ];\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/anoop.kumar/MB/Repo/commerce-core/js-storefront/atcpps-spa/src/app/utilities/env-picker.service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                618,
                621
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                618,
                621
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Injectable } from '@angular/core';\nimport { OccEndpointsService } from '@spartacus/core';\nimport { APP_CONSTS, Environments } from '../common/constants';\nimport { Meta } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnvPickerService {\n  constructor(\n    private _meta: Meta,\n    protected _occEnpointService: OccEndpointsService\n  ) {}\n\n  public getOccBaseUrl(): string {\n    return this._occEnpointService.getBaseUrl();\n  }\n\n  public getCurrentEnvironment(): string {\n    let currentEnv = '';\n    const backendUrl = (this._meta.getTag('name=occ-backend-base-url') as any)\n      .content;\n    if (backendUrl === 'OCC_BACKEND_BASE_URL_VALUE') {\n      currentEnv = Environments.Local;\n    }\n    if (backendUrl.includes(APP_CONSTS.occEnvEndpoints.dev)) {\n      currentEnv = Environments.Dev;\n    }\n    if (backendUrl.includes(APP_CONSTS.occEnvEndpoints.stage)) {\n      currentEnv = Environments.Staging;\n    }\n    if (backendUrl.includes(APP_CONSTS.occEnvEndpoints.prod)) {\n      currentEnv = Environments.Production;\n    }\n\n    return currentEnv;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  }
]
